<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>潇晗宇浩的博客</title>
    <link>http://blog.xhyh.best/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>记录生活</description>
    <pubDate>Sun, 26 Apr 2020 16:06:03 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>汇编入门-汇编指令详解</title>
      <link>http://blog.xhyh.best/study/assembly-instructions/</link>
      <guid>http://blog.xhyh.best/study/assembly-instructions/</guid>
      <pubDate>Sun, 26 Apr 2020 03:18:26 GMT</pubDate>
      <description>
      
        &lt;p&gt;最近在深入学习操作系统, 少不了和汇编代码打交道, 尽管原来对汇编指令有所了解, 但实际看到一条指令还是模凌两可. 本文对常用汇编指令进行一个总结, 同时区分几个易混的指令&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>最近在深入学习操作系统, 少不了和汇编代码打交道, 尽管原来对汇编指令有所了解, 但实际看到一条指令还是模凌两可. 本文对常用汇编指令进行一个总结, 同时区分几个易混的指令</p><a id="more"></a><h3 id="汇编格式说明">汇编格式说明</h3><p>一般来说, 在<code>Linux</code>下使用<code>GCC</code>生成的汇编代码会使用<code>AT&amp;T/UNIX</code>汇编语法, 而使用<code>IDA</code>, <code>pwndbg</code>, <code>gef</code>反编译出来的代码会使用<code>Intel</code>汇编语法</p><p>下面大致讲一下两者语法的不同, 后文将使用<code>AT&amp;T</code>汇编格式</p><ol type="1"><li>操作数顺序不同</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Op-code src dst &#x2F;&#x2F;AT&amp;T语法</span><br><span class="line">OP-code dst src &#x2F;&#x2F;Intel语法</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>寄存器, 立即数的使用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movl  $0xff,%ebx &#x2F;&#x2F;AT&amp;T语法</span><br><span class="line">mov   ebx,0ffh   &#x2F;&#x2F;Intel语法</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>操作数大小</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movb  (%rbp), %al &#x2F;&#x2F;AT&amp;T语法</span><br><span class="line">mov   al, byte ptr rbp   &#x2F;&#x2F;Intel语法</span><br></pre></td></tr></table></figure><blockquote><p>movb, movw, movl, movq 分别代表操作1, 2, 4, 8字节, 若仅是mov, 则根据应用是32位还是64位决定是movl还是movq</p></blockquote><ol start="4" type="1"><li>内存寻址</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movl -8(%ebp, %edx, 4), %eax &#x2F;&#x2F;AT&amp;T语法</span><br><span class="line">mov  eax, [%ebp + %edx * 4 - 8h] &#x2F;&#x2F;Intel语法</span><br></pre></td></tr></table></figure><h3 id="常见指令">常见指令</h3><h4 id="mov指令">mov指令</h4><p>mov作为最常用的指令, 用法非常灵活</p><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov &lt;reg&gt;, &lt;reg&gt; &#x2F;&#x2F; 寄存器的值到寄存器的值</span><br><span class="line">mov &lt;reg&gt;, &lt;mem&gt; &#x2F;&#x2F; 寄存器的值到寄存器指针指向的内存(通过加括号的方式)</span><br><span class="line">mov &lt;mem&gt;, &lt;reg&gt; &#x2F;&#x2F; 内存到寄存器</span><br><span class="line">mov &lt;imm&gt;, &lt;reg&gt; &#x2F;&#x2F; 立即数到寄存器(立即数前要加$)</span><br><span class="line">mov &lt;imm&gt;, &lt;mem&gt; &#x2F;&#x2F; 立即数到内存</span><br></pre></td></tr></table></figure><blockquote><p>内存寻址方式可采用disp(base, index, scale)的方式, 对表达式整体计算的值作为内存地址 如mov -8(%ebp, %edx, 4), %eax 表示加载 *(ebp + (edx * 4) - 8) 到 eax寄存器</p></blockquote><h4 id="push-pop指令">push / pop指令</h4><p>push可以理解为在mov到esp内存的同时使<code>esp</code>减小(高地址到低地址扩展) pop 可以理解为在mov到esp内存的同时的同时使<code>esp</code>增加</p><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push &lt;reg&gt;</span><br><span class="line">push &lt;mem&gt;</span><br><span class="line">push &lt;imm&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在64位里push操作8字节的数, 32位只能操作4子节的数</p></blockquote><h4 id="lea-指令">lea 指令</h4><p>lea 可以将内存操作数放入寄存器中 lea 虽然用法单一, 但十分灵活, 常用来代替乘法和加法指令</p><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lea &lt;mem&gt;, &lt;reg&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这里的mem并不是真的取内存中的值, 而是操作数本身 如lea -8(%ebp, %edx, 4), %eax 表示加载 ebp + (edx * 4) - 8 的值到 eax寄存器</p></blockquote><h4 id="add-sub-指令">add / sub 指令</h4><p>这两个指令比较简单, 就是做加法和减法, 将操作结果存在目的操作数中</p><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add &lt;reg&gt;, &lt;reg&gt;</span><br><span class="line">add &lt;mem&gt;, &lt;reg&gt;</span><br><span class="line">add &lt;reg&gt;, &lt;mem&gt;</span><br><span class="line">add &lt;imm&gt;, &lt;reg&gt;</span><br><span class="line">add &lt;imm&gt;, &lt;mem&gt;</span><br></pre></td></tr></table></figure><h4 id="inc-dec-指令">inc / dec 指令</h4><p>基本和add / sub一致, 但只能加减1</p><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inc &lt;reg&gt;</span><br><span class="line">inc &lt;mem&gt;</span><br></pre></td></tr></table></figure><h4 id="imul-指令">imul 指令</h4><p>乘法指令, 可以有两个操作数或三个操作数, 第三个操作数必须为寄存器</p><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">imul &lt;reg32&gt;, &lt;reg32&gt;</span><br><span class="line">imul &lt;mem&gt;, &lt;reg32&gt;</span><br><span class="line">imul &lt;imm&gt;, &lt;reg32&gt;, &lt;reg32&gt;</span><br><span class="line">imul &lt;imm&gt;, &lt;mem&gt;, &lt;reg32&gt;</span><br></pre></td></tr></table></figure><h4 id="idiv-指令">idiv 指令</h4><p>除法指令, 需要把被除数放入eax寄存器中, 得到商在eax中, 余数在edx中</p><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idiv &lt;reg&gt;</span><br><span class="line">idiv &lt;mem&gt;</span><br></pre></td></tr></table></figure><h4 id="and-or-xor-指令">and / or / xor 指令</h4><p>做与, 或, 异或运算</p><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">and &lt;reg&gt;, &lt;reg&gt;</span><br><span class="line">and &lt;mem&gt;, &lt;reg&gt;</span><br><span class="line">and &lt;reg&gt;, &lt;mem&gt;</span><br><span class="line">and &lt;imm&gt;, &lt;reg&gt;</span><br><span class="line">and &lt;imm&gt;, &lt;mem&gt;</span><br></pre></td></tr></table></figure><blockquote><p>常使用xor %edx, %edx 将寄存器置0</p></blockquote><h4 id="not-neg-指令">not / neg 指令</h4><p>not 按位取反, neg 按补码取负</p><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">not &lt;reg&gt;</span><br><span class="line">not &lt;mem&gt;</span><br></pre></td></tr></table></figure><h4 id="shl-shr-sal-sar指令">shl / shr / sal / sar指令</h4><p>逻辑左移/逻辑右移/算数左移/算数右移操作</p><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shl &lt;imm&gt;, &lt;reg&gt;</span><br><span class="line">shl &lt;imm&gt;, &lt;mem&gt;</span><br><span class="line">shl %cl, &lt;reg&gt;</span><br><span class="line">shl %cl, &lt;mem&gt;</span><br></pre></td></tr></table></figure><h4 id="jmp-jcondition-cmp指令">jmp / jcondition /cmp指令</h4><p>跳转到某一标签, 常用语循环语句和判断语句</p><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">jmp &lt;label&gt;</span><br><span class="line"></span><br><span class="line">cmp &lt;reg&gt;, &lt;reg&gt;</span><br><span class="line">cmp &lt;mem&gt;, &lt;reg&gt;</span><br><span class="line">cmp &lt;reg&gt;, &lt;mem&gt;</span><br><span class="line">cmp &lt;imm&gt;, &lt;reg&gt;</span><br><span class="line"></span><br><span class="line">je  &lt;label&gt; &#x2F;&#x2F; 等于时跳转</span><br><span class="line">jne &lt;label&gt; &#x2F;&#x2F; 不等时跳转</span><br><span class="line">jz  &lt;label&gt; &#x2F;&#x2F; cmp将两数相减, 为0时跳转</span><br><span class="line">jg  &lt;label&gt; &#x2F;&#x2F; 大于时跳转</span><br><span class="line">jge &lt;label&gt; &#x2F;&#x2F; 大于等于跳转</span><br><span class="line">jl  &lt;label&gt; &#x2F;&#x2F; 小于时跳转</span><br><span class="line">jle &lt;label&gt; &#x2F;&#x2F; 小于等于跳转</span><br></pre></td></tr></table></figure><h4 id="call-ret-指令">call / ret 指令</h4><p>函数调用及函数返回</p><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call &lt;label&gt;</span><br><span class="line"></span><br><span class="line">ret</span><br></pre></td></tr></table></figure><h3 id="常见问题">常见问题</h3><h4 id="mov-和-lea-指令的区别">mov 和 lea 指令的区别?</h4><p>在简单操作上两者可以等价</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov %eax, %ebx</span><br><span class="line"></span><br><span class="line">lea (%eax), %ebx</span><br></pre></td></tr></table></figure><p>若mov使用了内存寻址, 则mov会取到对应地址的值, 而lea仅操作地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov -8(%ebp, %edx, 4), %eax</span><br><span class="line"></span><br><span class="line">lea -8(%ebp, %edx, 4), %eax</span><br></pre></td></tr></table></figure><p>在这种情况下, mov便无法替代lea</p><h4 id="i为什么不是原子操作">i++为什么不是原子操作?</h4><p>尽管add/inc可以直接对内存进行操作, 但实际情况下会先从内存加载到寄存器中, 再对寄存器进行加操作</p>]]></content:encoded>
      
      <comments>http://blog.xhyh.best/study/assembly-instructions/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows下使用wsl2打造极致开发环境</title>
      <link>http://blog.xhyh.best/tutorial/windows-wsl2-env/</link>
      <guid>http://blog.xhyh.best/tutorial/windows-wsl2-env/</guid>
      <pubDate>Tue, 14 Apr 2020 01:09:44 GMT</pubDate>
      <description>
      
        &lt;p&gt;自Windows Terminal发布后一直用得很爽, 我也一直在关注着另一个&#39;神器&#39;wsl2的到来. Windows 2004 RTM版出来后我便立即重装了系统, 感受到了wsl2的强大. 本文的主要内容就是如何配置wsl2并解决它带来的一些问题&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>自Windows Terminal发布后一直用得很爽, 我也一直在关注着另一个'神器'wsl2的到来. Windows 2004 RTM版出来后我便立即重装了系统, 感受到了wsl2的强大. 本文的主要内容就是如何配置wsl2并解决它带来的一些问题</p><a id="more"></a><h4 id="为什么需要wsl2">为什么需要wsl2</h4><p>如果你是一个开发人员, 一定有以下几个痛点</p><ol type="1"><li>安装软件麻烦, c++应该下哪个? python应该下哪个? vscode对应的配置怎么配?</li><li>残缺的<code>Git bash</code>, <code>wget</code> 命令去哪了? <code>md5sum</code>在哪?</li><li>巨慢的<code>git clone</code>, ssh怎么不走代理啊? 怎么配置?</li><li>乱码问题, 我使用<code>UTF-8</code>编码, 怎么运行到命令行就乱码?</li></ol><p><code>Windows</code>下还有很多问题就不一一列举了</p><h4 id="wsl2能解决的问题">wsl2能解决的问题</h4><ol type="1"><li>真实<code>Linux</code>内核, 带来了完整的<code>Linux</code>体验</li><li>优化后的IO速度, 读写速度快</li><li>内存回收技术, 避免占用过多内存不释放</li><li>自动挂载Windows磁盘, 无缝访问Windows文件</li></ol><h4 id="wsl2安装">wsl2安装</h4><p>具体安装请看<a href="https://docs.microsoft.com/en-us/windows/wsl/wsl2-install" target="_blank" rel="noopener">官方文档</a></p><p>大致的步骤是</p><ol type="1"><li>打开可选功能的<code>适用于Linux的Windows子系统</code>和<code>虚拟机平台</code></li><li>重启计算机</li><li>在<code>Windows Store</code>中下载<code>Linux</code>发行版, 如<code>Ubuntu</code></li><li>启动<code>Ubuntu</code>, 设置用户名, 密码(此时默认是<code>wsl</code>而不是<code>wsl2</code>)</li><li>在<code>powershell</code>中根据文档切换成<code>wsl2</code></li><li>若提示切换失败, 可能需要手动安装内核, 去<a href="https://docs.microsoft.com/en-us/windows/wsl/wsl2-kernel" target="_blank" rel="noopener">官网</a>下载安装</li></ol><h4 id="windows-terminal配置">Windows Terminal配置</h4><ol type="1"><li>主题配置 这里贴一份我自己的配置, 有需要的可以<a href="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrnfoiwu5i48/b/anan/o/profiles.json" target="_blank" rel="noopener">下载</a>修改 <img src="https://pic.rmb.bdstatic.com/3a62a32f090a8aed6fb9caa0af0019eb.png" alt="windows-terminal" /></li><li>右键-在此文件夹中打开 这个功能需要添加注册表, 有需要可以<a href="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrnfoiwu5i48/b/anan/o/right.reg" target="_blank" rel="noopener">下载</a>, 运行</li></ol><h4 id="wsl2简单配置">wsl2简单配置</h4><ol type="1"><li><p>使用<code>zsh</code>作为默认<code>bash</code>(可选, 这里不做过多介绍)</p></li><li><p>当使用<code>Windows Search</code> 打开<code>Windows Terminal</code>时, 默认进入用户目录<code>~</code></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$(pwd)</span>"</span> == *<span class="string">"Windows"</span>* ]] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">cd</span> ~</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><blockquote><p>由于我使用了oh-my-zsh, 每次安装会覆盖原有的.zshrc, 所以我的所有关于bash配置都写在~/.profile下, 并在.zshrc中使用source .profile加载</p></blockquote></li><li><p>配置默认使用<code>vim</code>作为可视化编辑器</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> VISUAL=vim</span><br><span class="line"><span class="built_in">export</span> EDITOR=<span class="string">"<span class="variable">$VISUAL</span>"</span></span><br></pre></td></tr></table></figure></p></li></ol><h4 id="wsl2代理设置">wsl2代理设置</h4><p><code>wsl2</code>采用的网络模式是<code>Nat</code>模式, 在<code>wsl2</code>中如果想使用<code>Windows</code>下的代理会比较麻烦, 不能直接通过<code>localhost</code>访问</p><blockquote><p>但Windows却可以使用localhost访问wsl2中的服务, 很便于程序的调试</p></blockquote><p>首先需要安装<code>proxychains4</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install proxychains4</span><br></pre></td></tr></table></figure><p>复制一份配置文件到用户目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/proxychains4.conf ~/.proxychains.conf</span><br></pre></td></tr></table></figure><p>配置bash设置(.profile中)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到windows ip</span></span><br><span class="line"><span class="built_in">export</span> WIN_IP=`cat /etc/resolv.conf | grep nameserver | awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line"><span class="comment"># 删除原有socks5配置</span></span><br><span class="line">sed -i <span class="string">'/socks5/d'</span> ~/.proxychains.conf</span><br><span class="line"><span class="comment"># 添加新的socks5配置</span></span><br><span class="line">sed -i <span class="string">'$a socks5 '</span><span class="variable">$&#123;WIN_IP&#125;</span><span class="string">' 7891'</span> ~/.proxychains.conf</span><br><span class="line"><span class="built_in">alias</span> pc=<span class="string">'proxychains4 -q -f ~/.proxychains.conf'</span></span><br></pre></td></tr></table></figure><p>这样每次启动都会寻找正确的ip地址, 并设置好给<code>proxychains4</code></p><h4 id="vscode设置">vscode设置</h4><p>还是由于网络问题, <code>remote server</code>继承了主<code>vscode</code>的配置, 代理会默认被设为<code>127.0.0.1:7890</code>, 会出现无法下载插件, 或无法使用插件等问题</p><p>经过测试, 即使在<code>wsl2</code>设置了<code>http_proxy</code>环境变量也没办法生效(主配置已检测到代理), 需要手动设置才能生效 <img src="https://pic.rmb.bdstatic.com/ff4e30a30dd6be1ee200ef58054b83e9.png" alt="vscode-config" /></p><h4 id="其他配置">其他配置</h4><p>大多数软件都能使用<code>wsl2</code>替代, 如<code>git</code>, <code>c++</code>, <code>python</code>, <code>golang</code>等</p><p>但还是有些依赖图形化的软件只能在<code>Windows</code>下运行, 如<code>IDEA</code>, <code>Android Studio</code>等</p><p>这些软件也依赖于<code>git</code>, 但又不想在<code>Windows</code>又装一个重量级的<code>git bash</code>, 于是我找到两种解决方案, 一种是<code>git</code>映射到<code>wsl2</code>中的<code>git</code>, 第二种是额外下载一个轻量级的<code>git</code>--<a href="https://github.com/git-for-windows/git/releases" target="_blank" rel="noopener">MinGit</a></p><p>这里推荐第二种方法, 简单, 最小只有20M左右, 而且无需安装</p><h4 id="坑">坑</h4><p><code>wsl2</code>唯一的缺点是无法自动缩进磁盘空间, 当突然下载大文件后又删除后, 虚拟机占用空间并不会减少, 只会持续扩张. 目前解决办法是磁盘分区, 后续官网应该有更好的解决方法</p><h4 id="总结">总结</h4><p>总得来说, <code>wsl2</code>的体验很不错, 有种在<code>Linux</code>中使用<code>Windows</code>的感觉, 既可以享受<code>Windows</code>众多图形化软件带来的优势, 也可以方便快捷使用<code>Linux</code>做程序开发, 这点就比原生<code>Linux</code>强很多了, 和<code>mac</code>的差距也没那么大了</p>]]></content:encoded>
      
      <comments>http://blog.xhyh.best/tutorial/windows-wsl2-env/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo主题开发和修改-实践篇</title>
      <link>http://blog.xhyh.best/tutorial/hexo-theme-dev/</link>
      <guid>http://blog.xhyh.best/tutorial/hexo-theme-dev/</guid>
      <pubDate>Mon, 13 Apr 2020 00:32:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;https://blog.xhyh.best/tutorial/hexo-theme-theory/&quot;&gt;上一篇&lt;/a&gt;中, 我们了解了Hexo主题的目录结构和基本的语法知识, 本文主要针对&lt;code&gt;apollo&lt;/code&gt;主题进行开发和修改&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><a href="https://blog.xhyh.best/tutorial/hexo-theme-theory/">上一篇</a>中, 我们了解了Hexo主题的目录结构和基本的语法知识, 本文主要针对<code>apollo</code>主题进行开发和修改</p><a id="more"></a><h3 id="布局修改">布局修改</h3><h4 id="部分部局">部分部局</h4><p>为了使布局能够复用, 所以将一个页面拆分成多个模块</p><p><code>head</code> 网页的头部信息, 变量可通过Hexo中配置文件<code>config.xxx</code>获取</p><p><code>nav</code> 导航栏信息, 可通过遍历主题配置<code>each value, key in theme.menu</code>获取</p><p><code>layout</code> 基布局, 包含多个<code>block</code>可以被覆盖</p><p><code>comment</code> 评论布局, 包括了所有支持的评论插件</p><p><code>copyright</code> 底部布局</p><p><code>scripts</code> 页面所需的js</p><h4 id="博客页面">博客页面</h4><p>主页: 继承至<code>layout</code>布局, 包含三大部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">extends partial&#x2F;layout</span><br><span class="line"></span><br><span class="line">block container</span><br><span class="line">    include mixins&#x2F;post</span><br><span class="line">    +posts()</span><br><span class="line"></span><br><span class="line">block pagination</span><br><span class="line">    include mixins&#x2F;paginator</span><br><span class="line">    +home()</span><br><span class="line"></span><br><span class="line">block copyright</span><br><span class="line">    include partial&#x2F;copyright</span><br></pre></td></tr></table></figure><p>其中<code>posts()</code>是混入的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mixin posts()</span><br><span class="line">    ul.home.post-list</span><br><span class="line">        - page.posts.each(function (item) &#123;</span><br><span class="line">            li.post-list-item</span><br><span class="line">                article.post-block</span><br><span class="line">                    h2.post-title</span><br><span class="line">                        a.post-title-link(href&#x3D; url_for(item.path))</span><br><span class="line">                            !&#x3D; item.title</span><br><span class="line">                    +postInfo(item)</span><br><span class="line">                    .post-content</span><br><span class="line">                        !&#x3D; item.excerpt</span><br><span class="line">                    a.read-more(href&#x3D; url_for(item.path))!&#x3D; __(&#39;more&#39;)</span><br><span class="line">        - &#125;)</span><br><span class="line">mixin postInfo(item)</span><br><span class="line">    .post-info</span><br><span class="line">        !&#x3D; full_date(item.date, &#39;ll&#39;)</span><br><span class="line">        if (item.tags &amp;&amp; (is_home() || is_post())) </span><br><span class="line">            for tag in item.tags.toArray()</span><br><span class="line">                a.tag-title(href&#x3D;url_for(tag.path))</span><br><span class="line">                    !&#x3D; &#39;#&#39; + tag.name</span><br></pre></td></tr></table></figure><blockquote><p>如果想修改, 比如给文章加上tag, 就可以自行在<code>postInfo</code>函数中加入对应的标签</p></blockquote><p>文章页: 和<code>index</code>页面基本一样, 但多了标题和描述block的覆盖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">extends partial&#x2F;layout</span><br><span class="line"></span><br><span class="line">block site_title</span><br><span class="line">    !&#x3D; page.title + &quot; · &quot; + config.title</span><br><span class="line"></span><br><span class="line">block description</span><br><span class="line">    - var desc &#x3D; page.desc || page.title + &#39; - &#39; + config.author;</span><br><span class="line">    meta(name&#x3D;&quot;description&quot;, content&#x3D;desc)</span><br><span class="line"></span><br><span class="line">block container</span><br><span class="line">    include mixins&#x2F;post</span><br><span class="line">    +post(page)</span><br><span class="line"></span><br><span class="line">block pagination</span><br><span class="line">    include mixins&#x2F;paginator</span><br><span class="line">    +post()</span><br><span class="line">    include partial&#x2F;comment</span><br><span class="line"></span><br><span class="line">block copyright</span><br><span class="line">    include partial&#x2F;copyright</span><br></pre></td></tr></table></figure><p>自定义页面: 需要在<code>block container</code>中判断页面类型实现不同的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">extends partial&#x2F;layout</span><br><span class="line"></span><br><span class="line">block container</span><br><span class="line">    if page.type &#x3D;&#x3D;&#x3D; &#39;category&#39;</span><br><span class="line">      .category  </span><br><span class="line">          h2.title </span><br><span class="line">              !&#x3D; page.title</span><br><span class="line">          !&#x3D; list_categories()</span><br><span class="line">    else if page.type &#x3D;&#x3D;&#x3D; &#39;friends&#39;</span><br><span class="line">      .flink</span><br><span class="line">        if site.data.link</span><br><span class="line">           ...</span><br><span class="line">block pagination</span><br><span class="line">    include mixins&#x2F;paginator</span><br><span class="line">    +home()</span><br><span class="line"></span><br><span class="line">block copyright</span><br><span class="line">    include partial&#x2F;copyright</span><br></pre></td></tr></table></figure><blockquote><p>我这里使用<code>page.type</code>判断页面类型, 这样需要在对应页面<code>index.md</code>中添加<code>type</code>变量</p></blockquote><h3 id="样式修改">样式修改</h3><h4 id="根样式">根样式</h4><p>定义一个根样式, <code>gulp</code>只编译这个文件, 更方便管理, 其他样式通过<code>@import</code>引入</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">"utf-8"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"_partial/normalize"</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"_partial/base"</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"_partial/header"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">'https://fonts.googleapis.com/css?family=Open+Sans&amp;display=swap'</span>);</span><br></pre></td></tr></table></figure><h4 id="部分样式">部分样式</h4><p>根据每个部分布局定义部分样式, 再在根样式中引入</p><p>在命令行中运行<code>gulp</code>命令即可监控样式的更改, 实时编译</p><blockquote><p>在chrome中, 右键-检查想修改的部分, 可快速定位css信息和debug</p></blockquote><h3 id="配置修改">配置修改</h3><p>可根据自身需求在<code>_config</code>文件中进行修改, 可以新增<code>menu</code>菜单或新增变量</p>]]></content:encoded>
      
      <comments>http://blog.xhyh.best/tutorial/hexo-theme-dev/#disqus_thread</comments>
    </item>
    
    <item>
      <title>记一次阿里云被攻击</title>
      <link>http://blog.xhyh.best/other/aliyun-hacked/</link>
      <guid>http://blog.xhyh.best/other/aliyun-hacked/</guid>
      <pubDate>Sun, 12 Apr 2020 02:46:23 GMT</pubDate>
      <description>
      
        &lt;p&gt;之前申请了免费的阿里云学生机, 部署了服务后就没管了, 前几天阿里云连续两天发来了安全警告邮件, 登上管理页一看, 还真的被hack了...&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>之前申请了免费的阿里云学生机, 部署了服务后就没管了, 前几天阿里云连续两天发来了安全警告邮件, 登上管理页一看, 还真的被hack了...</p><a id="more"></a><h4 id="事情开端">事情开端</h4><p>收到第一封阿里发的邮件 <img src="https://pic.rmb.bdstatic.com/bf8743473cee025d4c2bdc9523a93e5f.png" alt="mail-1" /> 当时在电脑右下角弹出来了, 我正好在忙其他的, 想了想我服务器上也没跑什么不安全的东西, 也许又是某个库(如<code>fastjson</code>)爆出的高危漏洞, 就没管它了</p><blockquote><p>现在重看发现上面写的内容是<strong>挖矿程序</strong>, 当时如果看到了应该会立即处理吧</p></blockquote><p>第二天收到第二封阿里发的邮件 <img src="https://pic.rmb.bdstatic.com/f9518a806696c111e4253d67b9fd65ae.png" alt="mail-2" /> 这天不忙, 点进去看了, 觉得很奇怪, 怎么变成了我<strong>对外攻击</strong>了啊?</p><p>于是便打开阿里云控制台查看情况</p><h4 id="情况分析">情况分析</h4><figure><img src="https://pic.rmb.bdstatic.com/eaa8ce2a19586e83a0d76fca536d2cb7.png" alt="" /><figcaption>alert-1</figcaption></figure><figure><img src="https://pic.rmb.bdstatic.com/81adc00297cf1dae3a7d81d09458f259.png" alt="" /><figcaption>alert-2</figcaption></figure><p>打开控制台后便看到了这两条警告</p><p>第一条是显示被植入了挖矿程序</p><p>第二条是显示在疯狂和外网IP通讯</p><p>然后去<a href="https://github.com/docker-library/redis/issues/217" target="_blank" rel="noopener">网上</a>查了一下, 这个挖矿程序在<code>redis docker</code>中十分盛行, 当然不是镜像的锅, 而是创建<code>redis</code>时没有设密码, 而<code>redis</code>本身防护做得不好, 导致可以任意的文件读写, 造成了被黑客攻击, 植入程序</p><p>其实我在很早就知道无密码的<code>redis</code>有很大的安全风险, 原来用腾讯云部署应用时, 为了方便就没给<code>redis</code>上密码, 后来发现<code>redis</code>服务隔一天左右就会自动停止服务, 去查了一下发现是被攻击了, 后面自己使用<code>redis</code>都会上密码</p><blockquote><p>给这次开redis服务的同学一个教训了</p></blockquote><h4 id="损失">损失</h4><p>分析完原因后想马上登陆服务器关掉<code>redis</code>, 然后一直连接不上, 估计是cpu跑到了100%</p><p>迫不得已只能重启服务器(幸好redis没开--restart always)</p><p>然而, 登陆发现<code>mysql</code>里面的数据全没了!!</p><p>我这才意识到, 每次新建<code>mysql</code>的时候, 我都偷懒没做文件映射, 也没对数据做定期备份</p><h4 id="教训">教训</h4><ol type="1"><li><p>不要忽视任何一封安全邮件</p></li><li><p>开<code>redis</code>设密码</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在容器执行redis-server启动命令，并打开redis持久化</span></span><br><span class="line">docker run -d --name redis \</span><br><span class="line">              -p 6378:6379 \ </span><br><span class="line">              redis:latest \</span><br><span class="line">              redis-server --appendonly yes --requirepass <span class="string">"your_pass"</span></span><br></pre></td></tr></table></figure></p></li><li><p>开<code>mysql</code>文件映射</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=mysql \</span><br><span class="line">            -v ~/docker/mysql/data:/var/lib/mysql \</span><br><span class="line">            -e MYSQL_ROOT_HOST=% -p 3306:3306 \</span><br><span class="line">            -d mysql/mysql-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看密码</span></span><br><span class="line">docker logs mysql1 2&gt;&amp;1 | grep GENERATED</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql mysql -uroot -p</span><br><span class="line"><span class="comment"># 修改密码</span></span><br><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'password'</span>;</span><br><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure></p></li><li><p>定时备份数据库</p></li></ol>]]></content:encoded>
      
      <comments>http://blog.xhyh.best/other/aliyun-hacked/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo主题开发和修改-理论篇</title>
      <link>http://blog.xhyh.best/tutorial/hexo-theme-theory/</link>
      <guid>http://blog.xhyh.best/tutorial/hexo-theme-theory/</guid>
      <pubDate>Sat, 11 Apr 2020 03:37:19 GMT</pubDate>
      <description>
      
        &lt;p&gt;在寻找Hexo主题时, 发现了一款极其简洁的主题&lt;a href=&quot;https://github.com/achjqz/hexo-theme-apollo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;apollo&lt;/a&gt;, 这款主题代码量不多, 视图引擎使用的是&lt;code&gt;pug&lt;/code&gt;(原名&lt;code&gt;jade&lt;/code&gt;), 本文主要讲述进行Hexo主题开发和对主题的理论部分&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>在寻找Hexo主题时, 发现了一款极其简洁的主题<a href="https://github.com/achjqz/hexo-theme-apollo" target="_blank" rel="noopener">apollo</a>, 这款主题代码量不多, 视图引擎使用的是<code>pug</code>(原名<code>jade</code>), 本文主要讲述进行Hexo主题开发和对主题的理论部分</p><a id="more"></a><h3 id="主题下载和环境配置">主题下载和环境配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/achjqz/hexo-theme-apollo.git apollo</span><br><span class="line"><span class="built_in">cd</span> apollo</span><br><span class="line">npm install</span><br><span class="line">npm install --global gulp-cli</span><br></pre></td></tr></table></figure><blockquote><p>主题用到的所有依赖包都是gulp相关的, gulp可以使开发者更方便的编写css文件</p></blockquote><h3 id="主题目录结构介绍">主题目录结构介绍</h3><figure><img src="https://pic.rmb.bdstatic.com/e5d6dc0330e0dbfb33d4419d968c5a8c.png" alt="" /><figcaption>catalog</figcaption></figure><h4 id="docs文件夹">docs文件夹</h4><p>这个文件夹是自己新建的, 存放主题的配置文档说明, 可有可无</p><h4 id="languages文件夹">languages文件夹</h4><p>根据<a href="https://hexo.io/zh-cn/docs/internationalization.html" target="_blank" rel="noopener">Hexo官网</a>的说明, 在此文件夹下配置多语言文件,可以让网站以不同语言呈现</p><p>例如, 配置<code>en.yml</code>和<code>zh-Hans.yml</code>文件可以支持英语和中文</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># en.yml</span></span><br><span class="line"><span class="attr">more:</span> <span class="string">...more</span></span><br><span class="line"><span class="comment"># zh-Hans.yml</span></span><br><span class="line"><span class="attr">more:</span> <span class="string">...阅读更多</span></span><br></pre></td></tr></table></figure><p>在模板中, 使用 __ 或 _p 辅助函数, 即可取得翻译后的字符串, 前者用于一般使用；而后者用于复数字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.read-more(href&#x3D; url_for(item.path))!&#x3D; __(&#39;more&#39;)</span><br></pre></td></tr></table></figure><h4 id="layout文件夹">layout文件夹</h4><p>该文件夹存放的就是博客页面的布局文件, 根据需求, 至少存在<code>index</code>, <code>post</code>, <code>archive</code> 三个页面</p><table><thead><tr class="header"><th>模板</th><th>用途</th><th>回退</th></tr></thead><tbody><tr class="odd"><td>index</td><td>首页</td><td></td></tr><tr class="even"><td>post</td><td>文章</td><td>index</td></tr><tr class="odd"><td>page</td><td>分页</td><td>index</td></tr><tr class="even"><td>archive</td><td>归档</td><td>index</td></tr><tr class="odd"><td>category</td><td>分类归档</td><td>archive</td></tr><tr class="even"><td>tag</td><td>标签归档</td><td>archive</td></tr></tbody></table><h4 id="source文件夹">source文件夹</h4><p>该文件夹下主要存放<code>css</code>文件, <code>js</code>文件, 图片资源等</p><h4 id="config.yml文件"><code>_config.yml</code>文件</h4><p>主题配置文件, 其中定义的变量在模版中可通过<code>theme.xxx</code>获取</p><blockquote><p>Hexo博客目录下也有同样的配置文件, 可以覆盖主题中定义的变量</p></blockquote><h4 id="gulpfile.js-文件"><code>gulpfile.js</code> 文件</h4><p>执行<code>gulp</code>命令后执行的脚本, 可以将<code>scss</code>打包成<code>css</code>并监控文件变化, 后文会详细讲解</p><h3 id="布局语法和样式语法">布局语法和样式语法</h3><h4 id="pug语法了解"><code>pug</code>语法了解</h4><ol type="1"><li><p>html标签, 注意缩进</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div</span><br><span class="line">    p Hello, world!</span><br><span class="line">    p Hello, pug.</span><br></pre></td></tr></table></figure></p></li><li><p>定义class或id</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h1.title Test class title</span><br><span class="line">h1#title Test id title</span><br></pre></td></tr></table></figure></p></li><li><p>标签属性, 存放于括号内</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img#name.class1.class2(src&#x3D;&quot;&#x2F;test.png&quot; alt&#x3D;&quot;test&quot;)</span><br></pre></td></tr></table></figure></p></li><li><p>包含,方便代码复用</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html(lang&#x3D;&#39;en&#39;)</span><br><span class="line">    include _partial&#x2F;head.pug</span><br></pre></td></tr></table></figure></p></li><li><p>继承, 方便模块化编写</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;- base.pug</span><br><span class="line">html</span><br><span class="line">    head</span><br><span class="line">        block title</span><br><span class="line">    body</span><br><span class="line">        block content</span><br><span class="line">&#x2F;&#x2F;- index.pug 使用extends继承以上模板，通过block覆盖或替换原有块block</span><br><span class="line">extends base.pug</span><br><span class="line"></span><br><span class="line">block title</span><br><span class="line">    title &quot;Test title&quot;</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">    h1 Hello world!</span><br><span class="line">    block article</span><br></pre></td></tr></table></figure></p></li><li><p>定义变量</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;- 通过&#96;- var&#96;定义</span><br><span class="line">- var intData &#x3D; 100</span><br><span class="line">- var boolData &#x3D; false</span><br><span class="line">- var stringData &#x3D; &#39;Test&#39;</span><br><span class="line">&#x2F;&#x2F;- 通过&#96;&#x3D;&#96;引用</span><br><span class="line">p.int&#x3D; intData</span><br><span class="line">p.bool&#x3D; boolData</span><br><span class="line">p.stringData&#x3D; stringData</span><br><span class="line">&#x2F;&#x2F;- 通过&#96;#&#123;&#125;&#96;连接其他字面量</span><br><span class="line">p #&#123;stringData&#125; is so good!</span><br></pre></td></tr></table></figure></p></li><li><p>条件结构</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if A</span><br><span class="line">    ...</span><br><span class="line">else if B</span><br><span class="line">    ...</span><br><span class="line">else </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p></li><li><p>迭代</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ol</span><br><span class="line">each item in [&#39;Sun&#39;, &#39;Mon&#39;, &#39;Tus&#39;, &#39;Wen&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;]</span><br><span class="line">    li&#x3D; item</span><br></pre></td></tr></table></figure></p></li><li><p>Mixin 用于编写函数</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;- 定义函数</span><br><span class="line">mixin menu-item(href, name)</span><br><span class="line">li</span><br><span class="line">    span.dot ●</span><br><span class="line">    a(href&#x3D;href)&#x3D; name</span><br><span class="line">&#x2F;&#x2F;- 调用函数</span><br><span class="line">+menu-item(&#39;&#x2F;About&#39;,&#39;About&#39;)</span><br></pre></td></tr></table></figure></p></li><li><p>Javascript</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">script(type&#x3D;&#39;text&#x2F;javascript&#39;).</span><br><span class="line">var data &#x3D; &quot;Test&quot;</span><br><span class="line">var enable &#x3D; true</span><br><span class="line">if enable</span><br><span class="line">    console.log(data)</span><br><span class="line">else</span><br><span class="line">    console.log(&#39;nothing&#39;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="scss介绍"><code>scss</code>介绍</h4><blockquote><p><code>scss</code>和<code>css</code>关系</p><p>scss 是 css的预处理器, 它的优势在于开发效率高, 对于一些样式复杂的站点, 用 scss 之类的工具生成代码比手写 css 快得多</p></blockquote><p>在这里我们通过<code>gulp</code>将<code>scss</code>转化为压缩的<code>css</code>, 即我们只用维护几个碎片的<code>scss</code>文件, 而不是直接修改<code>css</code>文件</p><h4 id="hexo的变量">Hexo的变量</h4><p>在模版中为了渲染出具体的内容需要使用Hexo中的变量</p><p>变量非常多, 建议看<a href="https://hexo.io/zh-cn/docs/variables" target="_blank" rel="noopener">官方文档</a>按需使用</p><h4 id="hexo的函数">Hexo的函数</h4><p>在模版中也可以使用Hexo提供的函数, 可进行一些判断或作为工具</p><p>函数也非常多, 建议看<a href="https://hexo.io/zh-cn/docs/helpers" target="_blank" rel="noopener">官方文档</a>按需使用</p><p></br></p><p>至此, 理论部分已经讲解完成, <a href="https://blog.xhyh.best/tutorial/hexo-theme-dev/">下一篇</a>实践篇将利用这些知识以实际例子讲述如何开发和修改主题</p>]]></content:encoded>
      
      <comments>http://blog.xhyh.best/tutorial/hexo-theme-theory/#disqus_thread</comments>
    </item>
    
    <item>
      <title>用Github Actions将Hexo博客部署到Github Page</title>
      <link>http://blog.xhyh.best/tutorial/zero-to-hexo2/</link>
      <guid>http://blog.xhyh.best/tutorial/zero-to-hexo2/</guid>
      <pubDate>Fri, 10 Apr 2020 02:43:08 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;https://blog.xhyh.best/tutorial/zero-to-hexo1/&quot;&gt;上篇博客&lt;/a&gt;中已经实现在本地预览博客, 本篇会将本地博客部署到Github Page&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><a href="https://blog.xhyh.best/tutorial/zero-to-hexo1/">上篇博客</a>中已经实现在本地预览博客, 本篇会将本地博客部署到Github Page</p><a id="more"></a><h4 id="配置github-actions">配置Github Actions</h4><p><code>Github Actions</code> 是 Github 推出的一款持续集成工具, 这里我们可以用来发布博客到<code>Github Page</code></p><ol type="1"><li><p>新建workflow文件</p><p>只有当项目中<code>.github/workflow</code>目录下存在以<code>.yml</code>结尾的配置才会触发<code>Github Actions</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Blog</span><br><span class="line">mkdir -p .github/workflow</span><br><span class="line">touch .github/workflow/deploy.yml</span><br></pre></td></tr></table></figure></li><li><p>配置<code>deploy.yml</code>文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># workflow name</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">To</span> <span class="string">Github</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当有 push 到仓库和外部触发的时候就运行</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push,</span> <span class="string">repository_dispatch]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ACCESS_TOKEN</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span> <span class="string">Public</span> <span class="string">To</span> <span class="string">Pages</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> </span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span>    </span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># check it to your workflow can access it</span></span><br><span class="line">    <span class="comment"># from: https://github.com/actions/checkout</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎️</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span> <span class="comment"># If you're using actions/checkout@v2 you must set persist-credentials    to false in most cases for the deployment to work correctly.</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">persist-credentials:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># from: https://github.com/actions/setup-node  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span> <span class="number">10.</span><span class="string">x</span> <span class="string">🔧</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">"10.x"</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">pandoc</span> <span class="string">🔧</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">curl</span> <span class="string">-s</span> <span class="string">https://api.github.com/repos/jgm/pandoc/releases/latest</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">"browser_download_url.   *deb"</span> <span class="string">|</span> <span class="string">cut</span> <span class="string">-d</span> <span class="string">'"'</span> <span class="string">-f</span> <span class="number">4</span> <span class="string">|</span> <span class="string">wget</span> <span class="string">-qi</span> <span class="bullet">-</span></span><br><span class="line">        <span class="string">sudo</span> <span class="string">dpkg</span> <span class="string">-i</span> <span class="string">*.deb</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span> <span class="string">Dependencies</span> <span class="string">🔧</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># from https://github.com/marketplace/actions/deploy-to-github-pages   </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">🚀</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@releases/v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ACCESS_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">BRANCH:</span> <span class="string">gh-pages</span> <span class="comment"># The branch the action should deploy to.</span></span><br><span class="line">        <span class="attr">FOLDER:</span> <span class="string">public</span> <span class="comment"># The folder the action should deploy.</span></span><br><span class="line">        <span class="attr">COMMIT_MESSAGE:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.head_commit.message</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>流程介绍</p><p>根据上面的配置可以看到主要分为4步</p><ul><li>Checkout 拉取你的博客, 默认拉取本项目</li><li>安装Node环境</li><li>安装Hexo依赖</li><li>部署到Github Page</li></ul><blockquote><p>由于我的博客使用<code>pandoc</code>进行渲染, 所以还多了一步安装<code>pandoc</code>环境</p></blockquote></li></ol><h4 id="生成ssh私钥">生成ssh私钥</h4><p>有了ssh私钥可以实现免密码将博客推送到Github</p><p>具体配置可以参照<a href="https://blog.xhyh.best/tutorial/linux-ssh/">Linux下的ssh配置</a>, 只用完成第一部分ssh生成</p><h4 id="生成access_secret">生成ACCESS_SECRET</h4><p>有了ACCESS_SECRET, <code>Github Actions</code> 才有权限写入仓库</p><p>可以在Github账户设置中生成一个 <img src="https://pic.rmb.bdstatic.com/3e96456f3136c30e6daee91f21d00176.png" alt="token" /></p><p>至少必须给<code>read, write repo</code>的权限</p><h4 id="在github上新建仓库">在Github上新建仓库</h4><ol type="1"><li>进入<a href="https://github.com/new" target="_blank" rel="noopener">新建仓库页面</a></li><li>新建一个仓库, public和private均可, 但推荐public, 否则Github Page需要另外新建一个仓库 <img src="https://pic.rmb.bdstatic.com/245f3c54feac8e15db0dae57ff18533c.png" alt="new repo" /></li><li>在项目设置中添加ACCESS_SECRET <img src="https://pic.rmb.bdstatic.com/5b364db983b09727ee07df2a9dc54a99.png" alt="secret" /></li><li>根据提示push项目</li></ol><h4 id="查看github-actions工作情况">查看<code>Github Actions</code>工作情况</h4><p>当push项目后, 在Actions选项中能看到已经自动运行部署 <img src="https://pic.rmb.bdstatic.com/8cdc7826c558371149a5198b9fd6e43c.png" alt="workflow" /></p><p>如果有报错信息, 则根据信息修改</p><h4 id="自定义域名设置">自定义域名设置</h4><p>在项目Settings中可以<a href="https://help.github.com/en/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site" target="_blank" rel="noopener">设置域名</a>并开启https <img src="https://pic.rmb.bdstatic.com/2e181936fe576fb0f0cf484f87d538ad.png" alt="setting" /></p><blockquote><p>注意若设置的是子域名, 则需要在DNS设置中加入CNAME规则, 使子域名指向<code>username.github.io</code></p></blockquote><h4 id="写作发布流程">写作发布流程</h4><p>至此, 应该能使用<code>username.github.io</code>访问你的博客了, 后续写作的流程是</p><ol type="1"><li><code>hexo new 'Hello world'</code> 生成新文章</li><li>写作</li><li><code>git add</code>, <code>git commit</code>, <code>git push</code></li><li><code>Github Actions</code> 自动部署</li></ol>]]></content:encoded>
      
      <comments>http://blog.xhyh.best/tutorial/zero-to-hexo2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello new blog</title>
      <link>http://blog.xhyh.best/talk/hello-new-blog/</link>
      <guid>http://blog.xhyh.best/talk/hello-new-blog/</guid>
      <pubDate>Wed, 08 Apr 2020 10:50:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;最近闲了下来, 计划慢慢输出一点这段时间学习的内容, 便重新打理了一下博客&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>最近闲了下来, 计划慢慢输出一点这段时间学习的内容, 便重新打理了一下博客</p><a id="more"></a><h4 id="为什么不使用老博客">为什么不使用老博客</h4><ol type="1"><li>老博客基于<code>diygod</code>主题改造, 虽尽力保持简洁了很多, 但一段时间后发现还是不利于文章阅读</li><li><code>diygod</code> 主题过于复杂, 不利于修改和维护</li><li>老博客采用源码私库备份, <code>Github page</code> 部署的策略, 但非常不利于维护, 发布文章也不方便</li></ol><h4 id="新博客的优势">新博客的优势</h4><ol type="1"><li>更加简洁的外观</li><li>基于<a href="https://github.com/achjqz/hexo-theme-apollo" target="_blank" rel="noopener">apollo</a>主题修改, 额外支持了<code>tag</code>显示和<code>category</code>界面</li><li>使用<code>Github Actions</code>持续集成, 语雀云端写作, 维护和写作更加方便</li></ol><h4 id="新博客的内容">新博客的内容</h4><ol type="1"><li>旧博客内容的整理, 升级</li><li>各种折腾的笔记</li><li>学习知识的整理输出</li><li>生活</li></ol>]]></content:encoded>
      
      <comments>http://blog.xhyh.best/talk/hello-new-blog/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Linux下ssh的配置</title>
      <link>http://blog.xhyh.best/tutorial/linux-ssh/</link>
      <guid>http://blog.xhyh.best/tutorial/linux-ssh/</guid>
      <pubDate>Fri, 28 Sep 2018 08:25:43 GMT</pubDate>
      <description>
      
        &lt;p&gt;本文带你了解ssh, 如何实现ssh免密码登陆? 如何使用ssh做端口转发, 跳板?&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>本文带你了解ssh, 如何实现ssh免密码登陆? 如何使用ssh做端口转发, 跳板?</p><a id="more"></a><h4 id="生成ssh-key">生成ssh key</h4><p>本文以Linux为例, 其他平台可参照<a href="https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" target="_blank" rel="noopener">Github官方文档</a>操作</p><ol type="1"><li><p>生成2048位的密匙 <code>passphrase</code> 可以设置为空</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure></li><li><p>设置权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .ssh directory: 700 (drwx------)</span></span><br><span class="line">chmod 700 .ssh</span><br><span class="line"><span class="comment"># public key (.pub file): 644 (-rw-r--r--)</span></span><br><span class="line">chmod 644 .ssh/id_rsa.pub</span><br><span class="line"><span class="comment"># private key (id_rsa): 600 (-rw-------)</span></span><br><span class="line">chmod 600 .ssh/id_rsa</span><br></pre></td></tr></table></figure></li></ol><h4 id="服务器设置">服务器设置</h4><ol type="1"><li><p>将公匙用<code>ssh-copy-id</code> 命令传给服务器,实现ssh免密码登陆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@serverip</span><br></pre></td></tr></table></figure></li><li><p>服务器端设置<code>/etc/ssh/sshd_config</code>, 使得不能用密码登陆root用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置</span></span><br><span class="line">PermitRootLogin yes</span><br><span class="line">PasswordAuthentication no</span><br></pre></td></tr></table></figure></li><li><p>本地新建一个config文件,填入服务器信息,实现简化登陆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">touch ~/.ssh/config</span><br><span class="line"><span class="comment"># config file</span></span><br><span class="line">Host name</span><br><span class="line">  Hostname serverip</span><br><span class="line">  User root</span><br></pre></td></tr></table></figure></li><li><p>查看服务器ssh登陆日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scp name:/var/<span class="built_in">log</span>/btmp btmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选日志信息, 实现显示 次数+ IP</span></span><br><span class="line">lastb -f btmp | awk <span class="string">'&#123;print $3&#125;'</span> | sort | uniq -c | sort -nr | more</span><br></pre></td></tr></table></figure></li></ol><h4 id="ssh高级操作">ssh高级操作</h4><ol type="1"><li><p>实现端口转发,将服务器用作代理访问其他网站</p><p>命令: <code>ssh -N -f -L  \&lt;local port&gt;:\&lt;remote host&gt;:\&lt;remote port&gt; \&lt;SSH hostname&gt;</code></p><p>这样就将IP为remote host机器的remote port通过中间服务器映射到本地机器的localport</p><blockquote><p>解释:</p><p>-N 指这个连接不需要执行任何命令。仅仅做端口转发</p><p>-f 在后台运行</p><p>-L 做本地映射端口，被冒号分割的三个部分含义分别是</p><p>需要使用的本地端口号 </br> ​需要访问的目标机器IP地址 </br> 需要访问的目标机器端口 </br></p></blockquote></li><li><p>将私匙添加到ssh-agent,避免每次都要输密码</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start ssh-agent</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br><span class="line">&gt; Agent pid 59566</span><br><span class="line"></span><br><span class="line"><span class="comment"># add ssh key</span></span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p></li><li><p>跳板登陆 本地A, 跳板服务器B, 目标服务器C</p><p>首先将本地A均可以ssh登陆B和C</p><p>当连接服务器B时,使用ssh -A命令, 以打开agent forwarding</p><p>当服务器B连接服务器C时, 就不用再输密码了, 相当于这台服务器充当了转发信息的功能,把私钥操作的request转发到了本机的agent, 然后再将agent的response原路返回</p></li></ol>]]></content:encoded>
      
      <comments>http://blog.xhyh.best/tutorial/linux-ssh/#disqus_thread</comments>
    </item>
    
    <item>
      <title>零基础搭建Hexo博客</title>
      <link>http://blog.xhyh.best/tutorial/zero-to-hexo1/</link>
      <guid>http://blog.xhyh.best/tutorial/zero-to-hexo1/</guid>
      <pubDate>Sat, 14 Apr 2018 14:18:32 GMT</pubDate>
      <description>
      
        &lt;p&gt;用Hexo + Github来搭建个人博客已经很普遍了, 正好Github action发布, 可以利用持续集成使得部署更加轻松&lt;br /&gt;
本文从零开始, 搭建hexo博客并用Github Actions发布到Github Page&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>用Hexo + Github来搭建个人博客已经很普遍了, 正好Github action发布, 可以利用持续集成使得部署更加轻松<br />本文从零开始, 搭建hexo博客并用Github Actions发布到Github Page</p><a id="more"></a><h4 id="工具介绍及安装">工具介绍及安装</h4><ol type="1"><li><code>Git</code> 版本管理工具, 用于管理写的文章, 并和Github仓库建立连接, <a href="https://git-scm.com/" target="_blank" rel="noopener">官网安装</a></li><li><code>node.js</code> 为hexo提供JavaScript环境 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">官网安装</a></li><li><code>Github Pages</code> Github 官网提供的一个服务, 将博客部署到它上面, 避免自己购买服务器, 无需安装</li></ol><h4 id="hexo和主题安装">hexo和主题安装</h4><blockquote><p>hexo 和 hexo 主题的关系<br />hexo 主题定义了博客的界面布局, 颜色, 脚本等<br />hexo 将内容交给hexo 主题生成对应的排版</p></blockquote><ol type="1"><li><p>hexo 安装 <a href="https:/.io/" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li><li><p>生成默认博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>下载主题</p><p>这里以<code>apollo</code>主题为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-pug\</span><br><span class="line"> hexo-generator-feed \</span><br><span class="line"> hexo-generator-sitemap \ </span><br><span class="line"> hexo-browsersync  \</span><br><span class="line"> hexo-generator-archive \</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/achjqz/hexo-theme-apollo.git themes/apollo</span><br></pre></td></tr></table></figure></li></ol><h4 id="博客配置">博客配置</h4><p>博客的配置主要都在<code>_config.yml</code>中</p><ol type="1"><li><p>主题相关配置 <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"><span class="comment"># 修改主题名称</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">apollo</span></span><br><span class="line"><span class="attr">theme_config:</span> </span><br><span class="line">  <span class="comment"># google analyse 配置</span></span><br><span class="line">  <span class="attr">ga:</span> <span class="string">UA-117536047-1</span></span><br><span class="line">  <span class="comment"># 评论区配置</span></span><br><span class="line">  <span class="attr">gitalk:</span></span><br><span class="line">    <span class="attr">on:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">achjqz</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">blog</span></span><br><span class="line">    <span class="attr">admin:</span> <span class="string">['achjqz']</span></span><br><span class="line">    <span class="attr">clientID:</span> <span class="string">1ad726ece750d0552748</span></span><br><span class="line">    <span class="attr">clientSecret:</span> <span class="string">6917691391883046d263b52a7107fab68e457194</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure></p></li><li><p>博客url配置 <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">http://blog.xhyh.best</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:category/:urlname/</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year:month:day-:title.md</span></span><br></pre></td></tr></table></figure></p><blockquote><p>为方便整理, 生成新文章会有时间前缀<br />而我们不希望在文章链接中包含时间, 这里使用了urlname, 需要在每篇文章头中添加这个变量</p></blockquote></li></ol><h4 id="常用命令">常用命令</h4><ol type="1"><li><code>hexo clean</code> 清除缓存和生成的public文件夹</li><li><code>hexo g</code> generator 生成public文件</li><li><code>hexo s</code> server 本地预览, 加参数<code>--debug</code>可查看具体信息</li><li><code>hexo d</code> deploy 部署到github</li></ol><h4 id="增加categorytag页面">增加category/tag页面</h4><p>默认并没有category, tag页面, 需要在命令行中输入命令添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page category</span><br></pre></td></tr></table></figure><p></br></p><p><a href="https://blog.xhyh.best/tutorial/zero-to-hexo2/">下一篇</a>将介绍如何使用 Github Actions 部署博客</p>]]></content:encoded>
      
      <comments>http://blog.xhyh.best/tutorial/zero-to-hexo1/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
