<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>潇晗宇浩的博客</title>
    <link>http://blog.xhyh.best/</link>
    
    <atom:link href="http://blog.xhyh.best/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>记录生活</description>
    <pubDate>Sun, 09 Aug 2020 08:31:31 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>如何高效的提问与回答</title>
      <link>http://blog.xhyh.best/talk/question-and-answer/</link>
      <guid>http://blog.xhyh.best/talk/question-and-answer/</guid>
      <pubDate>Sun, 09 Aug 2020 08:31:31 GMT</pubDate>
      
      <description>&lt;p&gt;工作一段时间后, 越发觉得会高效沟通是一个必备技能, 但发现身边不够有经验的人很多, 本篇就来讲述如何高效的提问与回答&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>工作一段时间后, 越发觉得会高效沟通是一个必备技能, 但发现身边不够有经验的人很多, 本篇就来讲述如何高效的提问与回答</p><a id="more"></a><h3 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h3><blockquote><p>90%的问题, 想清楚如何提问前, 就找到了答案</p></blockquote><h4 id="好的模式"><a href="#好的模式" class="headerlink" title="好的模式"></a>好的模式</h4><ol><li>描述你的目的, 目标或需求<blockquote><p>有助于发现你是否南辕北辙</p></blockquote></li><li>描述你的想法, 思路或自己对它的看法, 认知<blockquote><p>有助于对某些概念达成共识, 或提前发现思路错误</p></blockquote></li><li>描述你的背景, 已经成功做了什么, 网上查了什么<blockquote><p>有助于回答者直击问题, 而不是重头讲起</p></blockquote></li><li>描述遇到的问题, 报错信息, 与自己期望的矛盾点<blockquote><p>有助于回答者精确分析问题, 而不是胡乱猜测</p></blockquote></li></ol><h4 id="禁止的做法"><a href="#禁止的做法" class="headerlink" title="禁止的做法"></a>禁止的做法</h4><ul><li><p>“在不在?” / “可以请教一个问题吗?”</p></li><li><p>“xxx是什么?” / “怎么才能xxx?” / “xxx怎么做?”</p></li><li><p>“我的XXX坏了/不工作了/出问题了, 怎么办?”</p></li></ul><h4 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h4><p><strong>不好的提问:</strong>  页缓存和内核缓冲区是一个概念吗？</p><p>改进:</p><ol><li><p>加上目标: 想弄清楚内核缓冲区是用来干嘛的</p></li><li><p>加上自己的看法: 我理解的页缓存: XXX, 我理解的内核缓冲区: XXX</p></li><li><p>加上自己的背景: 这个问题是从XXX中而来的, 我现在分析得出的结论是: XXX</p></li><li><p>加上自己的问题: 有点混淆概念, 不知道内核缓冲区存在的意义</p></li></ol><h3 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h3><h4 id="金字塔原理"><a href="#金字塔原理" class="headerlink" title="金字塔原理"></a>金字塔原理</h4><ol><li><p>首先说结论</p></li><li><p>若结论不同意, 则将得出结论的论据拆分成最多3个小点</p></li><li><p>递归确认是否同意, 直到解决所有点</p></li></ol><h4 id="不好的做法"><a href="#不好的做法" class="headerlink" title="不好的做法"></a>不好的做法</h4><ol><li><p>答非所问</p><blockquote><p>问: 什么是5G? (提问不规范)<br>答: 基站多, 速度快就是5G (回答成了5G的优点)</p></blockquote></li><li><p>阐述过多</p><blockquote><p>问: 什么是5G? (提问不规范)<br>答: 说到5G, 还要从1G, 2G, 3G…说起 (可能对方已经知道了这些)</p></blockquote></li></ol>]]></content:encoded>
      
      
      <category domain="http://blog.xhyh.best/categories/talk/">talk</category>
      
      
      <category domain="http://blog.xhyh.best/tags/summary/">summary</category>
      
      <category domain="http://blog.xhyh.best/tags/social/">social</category>
      
      
      <comments>http://blog.xhyh.best/talk/question-and-answer/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>理解内存映射和 mmap</title>
      <link>http://blog.xhyh.best/study/memory-mapping/</link>
      <guid>http://blog.xhyh.best/study/memory-mapping/</guid>
      <pubDate>Sun, 02 Aug 2020 04:45:55 GMT</pubDate>
      
      <description>&lt;p&gt;以前总是对mmap的作用很迷惑, 特别是在用户态和内核态概念引入之后就更加疑惑, 为什么mmap可以做到零拷贝?本篇主要是梳理虚拟内存, 内存, 磁盘以及mmap之间的关系&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>以前总是对mmap的作用很迷惑, 特别是在用户态和内核态概念引入之后就更加疑惑, 为什么mmap可以做到零拷贝?本篇主要是梳理虚拟内存, 内存, 磁盘以及mmap之间的关系</p><a id="more"></a><h3 id="什么是mmap"><a href="#什么是mmap" class="headerlink" title="什么是mmap"></a>什么是mmap</h3><p>先来看<a href="https://en.wikipedia.org/wiki/Mmap">维基百科</a>的解释</p><blockquote><p>mmap是POSIX兼容的Unix系统调用, 它将文件或设备映射到内存中.<br>这是一种内存映射文件I / O的方法, 它实现了按需分页, 因为文件内容不直接从磁盘读取, 并且最初根本不使用物理RAM</p></blockquote><p>翻译得好听一点就是:</p><ol><li>是一个系统调用</li><li>可以将内存和文件映射</li><li>不直接从磁盘读取文件内容, 最初也不占用内存</li></ol><p>要理解这几条概念首先得知道虚拟内存和分页技术</p><h4 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h4><blockquote><p>具体虚拟内存为什么存在, 解决了哪些问题, 有什么优点可以单开一章来讲, 这里只讲一些便于理解mmap的东西</p></blockquote><p>理论上讲, 虚拟内存就是存储在<strong>磁盘</strong>上的连续N个字节, 而物理内存则是这些内容的缓存</p><p><img src="https://pic.rmb.bdstatic.com/bjh/2bfa5b6707d571d59bf0a8b26e5f62a8.png" alt="virtual-memory"></p><p>如果以1个字节为单位, 那么每次从磁盘载入进物理内存的效率会非常低, 于是虚拟内存以页为单位存储, 一个页通常是4kb</p><p>那操作系统是如何知道哪些内容被缓存了, 哪些还在磁盘上呢?</p><p>在物理内存里会给每个进程维护一张页表, 当进程使用虚拟地址进行访问内存时, 查页表可知这个页是否已经被加载到物理内存里了</p><p><img src="https://pic.rmb.bdstatic.com/bjh/05ff3794951778d5be6722d682d3865b.png" alt="page-table"></p><h4 id="内存映射"><a href="#内存映射" class="headerlink" title="内存映射"></a>内存映射</h4><p>虚拟内存里面的内容究竟是什么呢?</p><p>在虚拟内存初始化的时候, 有两种途径</p><ol><li>映射存在磁盘上的普通文件(如可执行的二进制文件)</li><li>映射匿名文件(加载进物理内存时初始化全为0)</li></ol><p>虚拟内存初始化的过程, 就叫做内存映射</p><p>通过理解以上两点, 可以解释mmap的概念了</p><ol><li>mmap就是做内存映射的一个系统调用</li><li>虚拟内存是存在磁盘上的, 所以内存映射后初始不占据物理内存, 按需从磁盘载入进物理内存</li></ol><h3 id="怎么用mmap"><a href="#怎么用mmap" class="headerlink" title="怎么用mmap"></a>怎么用mmap</h3><h4 id="操作系统中内存映射使用的场景"><a href="#操作系统中内存映射使用的场景" class="headerlink" title="操作系统中内存映射使用的场景"></a>操作系统中内存映射使用的场景</h4><ol><li><p>加载可执行程序</p><p> 如果不做内存映射的话, 需要先把可执行程序全部读入物理内存中, 再进行命令执行</p><p> 这显然是十分低效且不可行的做法, 如果可执行程序比物理内存还大, 运行都无法成功</p><p> 采用内存映射, 首先先把可执行程序代码段的内容映射到虚拟内存中, cpu执行指令时发现有缺页错误, 再从磁盘中载入到物理内存里来</p></li><li><p>共享数据</p><p> 很多程序都会使用同样的系统共享库, 这些共享库不需要复制多份, 通过内存映射的方式可以使用同一份磁盘上的内容</p><p> <img src="https://pic.rmb.bdstatic.com/bjh/5fee85e39a785c251584487e482390ea.png" alt="share-object"></p></li></ol><blockquote><p>私有对象可以采用写时复制技术防止原有数据被修改</p></blockquote><h4 id="用户级别内存映射的使用"><a href="#用户级别内存映射的使用" class="headerlink" title="用户级别内存映射的使用"></a>用户级别内存映射的使用</h4><p>mmap就是内核提供的, 可以像操作系统一样做内存映射的一个系统调用</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mmap</span><span class="params">(<span class="keyword">void</span> *start, <span class="keyword">int</span> len, <span class="keyword">int</span> prot, <span class="keyword">int</span> flags, <span class="keyword">int</span> fd, <span class="keyword">int</span> offset)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>start</strong>: 指定开始的虚拟地址, 0 表示任意挑选一个地址</p><p><strong>len fd offset</strong>: 从fd指定的文件offet位置开始映射len个字节</p><p><strong>prot</strong>: PROT_READ, PROT_WRITE, PROT_EXEC…</p><p><strong>flags</strong>: MAP_ANON, MAP_PRIVATE, MAP_SHARED…</p><p>返回值: 一个虚拟地址指针, 可能不是start指定的(kernel决定真正映射的地址)</p><p><img src="https://pic.rmb.bdstatic.com/bjh/08ae83cd9ea18dfe208774a9ce8b8bda.png" alt="mmap"></p><ol><li><p>读取大文件</p><p> read读取文件流程: read系统调用-&gt;内核将文件内容读取到内核缓冲区-&gt;内核将缓冲区内容拷贝到用户空间</p><p> mmap读取文件流程: mmap系统调用-&gt;内核进行内存映射-&gt;用户使用数据-&gt;发生缺页异常-&gt;从磁盘载入数据</p></li><li><p>进程间通讯</p><p> 进程之间的数据本身是无法互通的(虚拟地址空间), 而通过mmap内存映射的方式, 将同一个文件映射到虚拟内存中, 那么对这个文件的修改都是跨进程可见的</p></li></ol>]]></content:encoded>
      
      
      <category domain="http://blog.xhyh.best/categories/study/">study</category>
      
      
      <category domain="http://blog.xhyh.best/tags/os/">os</category>
      
      <category domain="http://blog.xhyh.best/tags/mmap/">mmap</category>
      
      
      <comments>http://blog.xhyh.best/study/memory-mapping/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>wsl2 下打开 GUI 程序图形窗口</title>
      <link>http://blog.xhyh.best/tutorial/wsl2-gui/</link>
      <guid>http://blog.xhyh.best/tutorial/wsl2-gui/</guid>
      <pubDate>Tue, 12 May 2020 09:52:17 GMT</pubDate>
      
      <description>&lt;p&gt;为了能在Windows wsl2 中运行GUI程序, 踩下不少坑, 反复重装了不知多少次Ubuntu, 希望本文能给后来者一些帮助&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>为了能在Windows wsl2 中运行GUI程序, 踩下不少坑, 反复重装了不知多少次Ubuntu, 希望本文能给后来者一些帮助</p><a id="more"></a><p>相关阅读: <a href="https://blog.xhyh.best/tutorial/windows-wsl2-env/">Windows下使用wsl2打造极致开发环境</a></p><h3 id="前情提示"><a href="#前情提示" class="headerlink" title="前情提示"></a>前情提示</h3><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>默认情况下, wsl2仅是命令行运行模式, 想要实现运行GUI应用, 有两种解决方案</p><p>1 安装Ubuntu桌面库, 启动远程连接服务器, 使用Windows自带的远程桌面连接(RDP) 连接</p><p>2 在Windows中安装<code>X Server</code>, 将GUI窗口信息转发给<code>X Server</code></p><h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h4><p>首先我尝试的是第一种方案, 具体步骤按照<a href="https://dev.to/darksmile92/linux-on-windows-wsl-with-desktop-environment-via-rdp-522g">这篇教程</a>来做</p><p>然而一开始我的Ubuntu版本是20.04, 使用这种方法登陆上Ubuntu后, RDP软件直接闪退</p><p>于是我重装了Ubuntu 18.04, 成功登陆上了Ubuntu桌面, 但在运行GUI程序时卡住, 可能是由于性能不足</p><p>于是开始尝试第二方案, 一开始使用Ubuntu 18.04, 但发现打开4个窗口时, 有三个窗口直接闪退</p><p>最终切换到Ubuntu 20.04, 使用方案二成功</p><h3 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h3><h4 id="Windows下安装X-Server"><a href="#Windows下安装X-Server" class="headerlink" title="Windows下安装X Server"></a>Windows下安装X Server</h4><p>这里选择开源免费的<code>VcXsrv</code>, <a href="https://sourceforge.net/projects/vcxsrv/">下载</a>安装即可</p><p>然后默认<code>VcXsrv</code>分辨率有问题, 还需要修改DPI设置</p><p>找到安装目录, 分别对<code>vcxsrv.exe</code>和<code>xlaunch.exe</code>进行设置</p><p><img src="https://pic.rmb.bdstatic.com/25cdd33c6618a26e5d3beb595d5b552c.png" alt="dpi-setting"></p><p>右键-属性-兼容性-更改高DPI设置-勾选替代高DPI缩放</p><h4 id="Ubuntu下配置转发"><a href="#Ubuntu下配置转发" class="headerlink" title="Ubuntu下配置转发"></a>Ubuntu下配置转发</h4><p>在<code>.profile</code>配置中加入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> WIN_IP=`cat /etc/resolv.conf | grep nameserver | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="built_in">export</span> DISPLAY=<span class="string">&quot;<span class="variable">$&#123;WIN_IP&#125;</span>:0.0&quot;</span></span><br><span class="line"><span class="built_in">export</span> LIBGL_ALWAYS_INDIRECT=1</span><br></pre></td></tr></table></figure><h4 id="Windows下启动VcXsrv"><a href="#Windows下启动VcXsrv" class="headerlink" title="Windows下启动VcXsrv"></a>Windows下启动VcXsrv</h4><p>运行<code>XLunch</code>, 第一步, 第二步选择默认</p><p>第三步勾选<code>Disable access control</code><br><img src="https://pic.rmb.bdstatic.com/d9dff7c568de947945fce26502d9273a.png" alt="xlunch"></p><h4 id="Ubuntu下运行GUI程序"><a href="#Ubuntu下运行GUI程序" class="headerlink" title="Ubuntu下运行GUI程序"></a>Ubuntu下运行GUI程序</h4><p>运行程序<br><img src="https://pic.rmb.bdstatic.com/c7d06755de0801d83beb39bbabcf9cc4.png" alt="run"></p><p>可以看到正常打开窗口</p><blockquote><p>若提示gnome-terminal not found 可直接通过sudo apt install gnome-terminal 安装</p></blockquote>]]></content:encoded>
      
      
      <category domain="http://blog.xhyh.best/categories/tutorial/">tutorial</category>
      
      
      <category domain="http://blog.xhyh.best/tags/windows/">windows</category>
      
      <category domain="http://blog.xhyh.best/tags/wsl2/">wsl2</category>
      
      
      <comments>http://blog.xhyh.best/tutorial/wsl2-gui/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>汇编入门之 x86 和 x86_64 函数调用对比 --32位篇</title>
      <link>http://blog.xhyh.best/study/assembly-function-call-32/</link>
      <guid>http://blog.xhyh.best/study/assembly-function-call-32/</guid>
      <pubDate>Wed, 29 Apr 2020 03:17:29 GMT</pubDate>
      
      <description>&lt;p&gt;上一篇中讲了64位程序函数的调用情况, 这一篇我们来看32位程序的调用规则, 如果还没有看过上一篇的, 先阅读完上篇再读本文&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>上一篇中讲了64位程序函数的调用情况, 这一篇我们来看32位程序的调用规则, 如果还没有看过上一篇的, 先阅读完上篇再读本文</p><a id="more"></a><h3 id="x86程序分析"><a href="#x86程序分析" class="headerlink" title="x86程序分析"></a>x86程序分析</h3><blockquote><p>默认gcc编译成64位程序, 加上-m32参数可编译为32位程序</p></blockquote><h4 id="Og优化级别下"><a href="#Og优化级别下" class="headerlink" title="-Og优化级别下"></a>-Og优化级别下</h4><p>首先看<code>add</code>函数</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">subl  <span class="number">$60</span>, %esp</span><br><span class="line">/* 栈保护代码</span><br><span class="line">movl  <span class="number">$20</span>, %edx</span><br><span class="line">movl  %gs:(%edx), %eax</span><br><span class="line">movl  %eax, <span class="number">44</span>(%esp)</span><br><span class="line">*/</span><br><span class="line">xorl  %eax, %eax</span><br><span class="line">movl  <span class="number">68</span>(%esp), %eax // a</span><br><span class="line">addl  <span class="number">64</span>(%esp), %eax // b</span><br><span class="line">addl  <span class="number">12</span>(%esp), %eax // array[<span class="number">2</span>]</span><br><span class="line">addl  <span class="number">8</span>(%esp), %eax  // array[<span class="number">1</span>]</span><br><span class="line">/* 栈保护代码</span><br><span class="line">movl  <span class="number">44</span>(%esp), %ecx</span><br><span class="line">xorl  %gs:(%edx), %ecx</span><br><span class="line"><span class="keyword">jne</span>  .L4</span><br><span class="line">*/</span><br><span class="line">addl  <span class="number">$60</span>, %esp</span><br><span class="line"><span class="keyword">ret</span></span><br></pre></td></tr></table></figure><p>可以看出和64位程序差别不大, 只是在获取参数的时候使用了栈上的值而不是寄存器</p><p>再看<code>main</code>函数</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">leal  <span class="number">4</span>(%esp), %ecx</span><br><span class="line">andl  $-<span class="number">16</span>, %esp</span><br><span class="line">pushl -<span class="number">4</span>(%ecx)</span><br><span class="line">pushl %ebp</span><br><span class="line">movl  %esp, %ebp</span><br><span class="line">pushl  %esi</span><br><span class="line">pushl  %ebx</span><br><span class="line">pushl  %ecx  </span><br><span class="line"></span><br><span class="line">subl  <span class="number">$36</span>, %esp</span><br><span class="line">xorl  %eax, %eax</span><br><span class="line">movl  <span class="number">$4</span>, -<span class="number">40</span>(%ebp)</span><br><span class="line">movl  <span class="number">$5</span>, -<span class="number">36</span>(%ebp)</span><br><span class="line">movl  <span class="number">$6</span>, -<span class="number">32</span>(%ebp)</span><br><span class="line">pushl <span class="number">$8</span></span><br><span class="line">pushl <span class="number">$7</span></span><br><span class="line"><span class="keyword">call</span>  <span class="keyword">add</span></span><br><span class="line">addl  <span class="number">$12</span>, %esp</span><br><span class="line">pushl %eax</span><br><span class="line">leal  .LC0@GOTOFF(%ebx), %eax</span><br><span class="line">pushl %eax</span><br><span class="line">pushl <span class="number">$1</span></span><br><span class="line"><span class="keyword">call</span>  __printf_chk@PLT</span><br><span class="line">addl  <span class="number">$16</span>, %esp</span><br></pre></td></tr></table></figure><p><code>main</code>函数前面一段多了很多奇怪的指令, <code>ebp</code>这一套上一篇已经说过了, 这里即使开启了优化也保留了<code>ebp</code></p><p>而后面几条<code>pushl</code>保存了几个寄存器的值, 属于<code>Callee Saved</code>, 函数运行结束时会<code>popl</code>还原</p><p>前三条命令有点迷惑, 查了下资料看到了一些解释</p><p><code>leal 4(%esp), %ecx</code> 将<code>main</code>函数第一个参数放入寄存器<code>ecx</code>中, 便于后面访问</p><p><code>andl $-16, %esp</code>    将<code>esp</code>地址与16字节对齐(<code>-16 = 0xfffffff0</code>)</p><p><code>pushl  -4(%ecx)</code>    存储函数的返回地址, 暂不知道作用</p><p>后面调用函数时并没有将参数压入寄存器, 而是使用<code>push</code>命令压栈, 函数调用结束后使用<code>add</code>命令释放, 这点和64位下多参数情况一致</p><h4 id="无优化下"><a href="#无优化下" class="headerlink" title="无优化下"></a>无优化下</h4><p><code>add</code>函数</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">pushl %ebp</span><br><span class="line">movl  %esp, %ebp</span><br><span class="line">subl  <span class="number">$56</span>, %esp</span><br><span class="line">xorl  %eax, %eax</span><br><span class="line">movl  <span class="number">8</span>(%ebp), %edx    // a</span><br><span class="line">movl  <span class="number">12</span>(%ebp), %eax   // b</span><br><span class="line">addl  %eax, %edx</span><br><span class="line">movl  -<span class="number">44</span>(%ebp), %eax  // array[<span class="number">2</span>]</span><br><span class="line">addl  %eax, %edx</span><br><span class="line">movl  -<span class="number">48</span>(%ebp), %eax  // array[<span class="number">1</span>]</span><br><span class="line">addl  %edx, %eax</span><br><span class="line">movl  -<span class="number">12</span>(%ebp), %ecx</span><br><span class="line"><span class="keyword">leave</span></span><br><span class="line"><span class="keyword">ret</span></span><br></pre></td></tr></table></figure><p>可以看出仅仅是使用了<code>ebp</code></p><p>再看<code>main</code>函数</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">leal  <span class="number">4</span>(%esp), %ecx</span><br><span class="line">andl  $-<span class="number">16</span>, %esp</span><br><span class="line">pushl -<span class="number">4</span>(%ecx)</span><br><span class="line">pushl %ebp</span><br><span class="line">movl  %esp, %ebp</span><br><span class="line">pushl %ebx</span><br><span class="line">pushl %ecx</span><br><span class="line">subl  <span class="number">$32</span>, %esp</span><br><span class="line">xorl  %eax, %eax</span><br><span class="line">movl  <span class="number">$4</span>, -<span class="number">24</span>(%ebp)</span><br><span class="line">movl  <span class="number">$5</span>, -<span class="number">20</span>(%ebp)</span><br><span class="line">movl  <span class="number">$6</span>, -<span class="number">16</span>(%ebp)</span><br><span class="line">movl  <span class="number">$7</span>, -<span class="number">32</span>(%ebp)</span><br><span class="line">movl  <span class="number">$8</span>, -<span class="number">28</span>(%ebp)</span><br><span class="line">subl  <span class="number">$8</span>, %esp</span><br><span class="line">pushl -<span class="number">28</span>(%ebp)</span><br><span class="line">pushl -<span class="number">32</span>(%ebp)</span><br><span class="line"><span class="keyword">call</span>  <span class="keyword">add</span></span><br><span class="line">addl  <span class="number">$16</span>, %esp</span><br><span class="line">subl  <span class="number">$8</span>, %esp</span><br><span class="line">pushl %eax</span><br><span class="line">leal  .LC0@GOTOFF(%ebx), %eax</span><br><span class="line">pushl %eax</span><br><span class="line"><span class="keyword">call</span>  printf@PLT</span><br></pre></td></tr></table></figure><p>可以看到<code>main</code>函数和优化过的没有大的区别, 只是<code>printf</code>并没有被优化</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总的分析下来, 64位程序和32位程序差别不大, 仅是参数传递的差异, 而当64位参数过多时, 也会采用32位压栈的方式传参</p><p>而不同优化级别下, 最大的差别就是使用<code>rsp</code>作为函数基地址还是<code>rbp</code>作为函数基地址</p>]]></content:encoded>
      
      
      <category domain="http://blog.xhyh.best/categories/study/">study</category>
      
      
      <category domain="http://blog.xhyh.best/tags/assembly/">assembly</category>
      
      <category domain="http://blog.xhyh.best/tags/os/">os</category>
      
      
      <comments>http://blog.xhyh.best/study/assembly-function-call-32/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>汇编入门之 x86 和 x86_64 函数调用对比 --64位篇</title>
      <link>http://blog.xhyh.best/study/assembly-function-call-64/</link>
      <guid>http://blog.xhyh.best/study/assembly-function-call-64/</guid>
      <pubDate>Tue, 28 Apr 2020 03:19:33 GMT</pubDate>
      
      <description>&lt;p&gt;原来一直对64位程序的汇编函数调用比较熟悉, 32位程序的函数调用总觉得十分复杂. 本文主要对64位程序在不同优化级别下的汇编函数调用实现情况, 后篇再结合32位进行对比分析&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>原来一直对64位程序的汇编函数调用比较熟悉, 32位程序的函数调用总觉得十分复杂. 本文主要对64位程序在不同优化级别下的汇编函数调用实现情况, 后篇再结合32位进行对比分析</p><a id="more"></a><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h4 id="汇编格式"><a href="#汇编格式" class="headerlink" title="汇编格式"></a>汇编格式</h4><p>如果对汇编指令还不熟悉可以看<a href="https://blog.xhyh.best/study/assembly-instructions/">上一篇</a>文章, 本文还是采用<code>AT&amp;T</code>汇编格式</p><h4 id="优化级别"><a href="#优化级别" class="headerlink" title="优化级别"></a>优化级别</h4><p>在编译时, 可以指定代码的优化级别, 大致优化级别有如下几个</p><ul><li>-O (相当于 -O1)</li><li>-O0 (不优化, 默认级别)</li><li>-O1 (不影响编译速度的前提下，尽量采用一些优化算法降低代码大小和可执行代码的运行速度)</li><li>-O2 (牺牲部分编译速度, 优化更多)</li><li>-O3 (采取很多向量化算法，提高代码的并行执行程度)</li><li>-Ofast (不会严格遵循语言标准, 优化更多)</li><li>-Og (提供合理的优化水平，同时产生较好的可调试信息)</li><li>-Os (尽量降低目标代码的大小)</li></ul><blockquote><p>如果优化级别太高会出现和源代码完全不符的情况, 如函数调用会被优化掉, 出现汇编中没有调用函数的现象</p></blockquote><p>本文主要分析不优化和<code>-Og</code>两种情况</p><h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4><p>为了简便, 下面分析将采用以下源代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">return</span> a + b  + <span class="built_in">array</span>[<span class="number">2</span>] + <span class="built_in">array</span>[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[] = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">7</span>, b = <span class="number">8</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum: %d\n&quot;</span>, add(a, b));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">array</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="x86-64程序分析"><a href="#x86-64程序分析" class="headerlink" title="x86_64程序分析"></a>x86_64程序分析</h3><h4 id="Og优化级别下"><a href="#Og优化级别下" class="headerlink" title="-Og优化级别下"></a>-Og优化级别下</h4><p>首先看<code>add</code>函数的汇编代码(已省去无关指令)</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">subq <span class="number">$56</span>, %rsp</span><br><span class="line">/* 栈保护代码</span><br><span class="line">movl  <span class="number">$40</span>, %edx</span><br><span class="line"><span class="keyword">movq</span>  %fs:(%rdx), %rax</span><br><span class="line"><span class="keyword">movq</span>  %rax, <span class="number">40</span>(%rsp)</span><br><span class="line">*/</span><br><span class="line">xorl  %eax, %eax</span><br><span class="line">addl  %esi, %edi      // a + b</span><br><span class="line">addl  <span class="number">8</span>(%rsp), %edi   // array[<span class="number">2</span>]</span><br><span class="line">movl  %edi, %eax</span><br><span class="line">addl  <span class="number">4</span>(%rsp), %eax   // array[<span class="number">1</span>]</span><br><span class="line">/* 栈保护代码</span><br><span class="line"><span class="keyword">movq</span>  <span class="number">40</span>(%rsp), %rcx</span><br><span class="line">xorq  %fs:(%rdx), %rcx</span><br><span class="line"><span class="keyword">jne</span>  .L4</span><br><span class="line">*/</span><br><span class="line">addq  <span class="number">$56</span>, %rsp</span><br><span class="line"><span class="keyword">ret</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看到函数中存在栈保护代码, 这里暂且不说, 与函数调用关系不大, 后面的代码中将省略</p></blockquote><p>首先看出程序会计算出<code>add</code>函数内需要的栈空间, 这里我们开了长度为10的<code>int</code>数组, 需要40字节, 栈保护需要8字节,<br>在使用<code>call</code>调用函数时已经将返回地址8字节压入栈中, 为了使栈内存和16字节对齐, 所以第一步将栈顶指针下移了56字节(56+8 是16的倍数)</p><p><code>rsp + 40</code>的位置用于存放栈保护内容, 而<code>rsp</code>, <code>rsp + 4</code> 则依次存放数组元素<code>array[0]</code>, <code>array[1]</code></p><p><code>eax</code>寄存器作为返回值, 首先通过<code>xor</code>置0</p><p>函数的参数依次存放在<code>edi</code>, <code>esi</code> 寄存器中, 使用<code>add</code>指令累加</p><p>最后将栈指针上移56字节, 回到调用函数前的状态</p><p>再看<code>main</code>函数</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">pushq  %rbx</span><br><span class="line">subq  <span class="number">$32</span>, %rsp</span><br><span class="line">movl  <span class="number">$4</span>, <span class="number">12</span>(%rsp)</span><br><span class="line">movl  <span class="number">$5</span>, <span class="number">16</span>(%rsp)</span><br><span class="line">movl  <span class="number">$6</span>, <span class="number">20</span>(%rsp)</span><br><span class="line">movl  <span class="number">$8</span>, %esi</span><br><span class="line">movl  <span class="number">$7</span>, %edi</span><br><span class="line"><span class="keyword">call</span>  <span class="keyword">add</span></span><br><span class="line">movl  %eax, %edx</span><br><span class="line">leaq  .LC0(%rip), %rsi</span><br><span class="line">movl  <span class="number">$1</span>, %edi</span><br><span class="line">movl  <span class="number">$0</span>, %eax</span><br><span class="line"><span class="keyword">call</span>  __printf_chk@PLT</span><br></pre></td></tr></table></figure><p>除了一开始在栈上保存了<code>rbx</code>以外, 其它步骤基本和<code>add</code>函数一致, 也可以看到函数传参的过程(<code>mov</code>到相应寄存器)</p><blockquote><p>注意这里编译器自动优化, 将printf转换成了更安全的__printf_chk(int flag, const char * format)函数, 所以会多一个参数flag</p></blockquote><h4 id="无优化下"><a href="#无优化下" class="headerlink" title="无优化下"></a>无优化下</h4><p>首先还是先看<code>add</code>函数</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">pushq %rbp</span><br><span class="line"><span class="keyword">movq</span>  %rsp, %rbp</span><br><span class="line">subq  <span class="number">$64</span>, %rsp</span><br><span class="line">movl  %edi, -<span class="number">52</span>(%rbp)</span><br><span class="line">movl  %esi, -<span class="number">56</span>(%rbp)</span><br><span class="line">/* 栈保护</span><br><span class="line"><span class="keyword">movq</span>  %fs:<span class="number">40</span>, %rax</span><br><span class="line"><span class="keyword">movq</span>  %rax, -<span class="number">8</span>(%rbp)</span><br><span class="line">*/</span><br><span class="line">xorl  %eax, %eax</span><br><span class="line">movl  -<span class="number">52</span>(%rbp), %edx</span><br><span class="line">movl  -<span class="number">56</span>(%rbp), %eax</span><br><span class="line">addl  %eax, %edx</span><br><span class="line">movl  -<span class="number">40</span>(%rbp), %eax</span><br><span class="line">addl  %eax, %edx</span><br><span class="line">movl  -<span class="number">44</span>(%rbp), %eax</span><br><span class="line">addl  %edx, %eax</span><br><span class="line">/* 栈保护</span><br><span class="line"><span class="keyword">movq</span>  -<span class="number">8</span>(%rbp), %rcx</span><br><span class="line">xorq  %fs:<span class="number">40</span>, %rcx</span><br><span class="line">*/</span><br><span class="line"><span class="keyword">leave</span></span><br><span class="line"><span class="keyword">ret</span></span><br></pre></td></tr></table></figure><p>与优化过的代码相比, 最大的变化就是使用了<code>rbp</code>寄存器</p><p><code>rbp</code>存储当前函数的基地址, 一个正在执行的函数A, <code>rsp</code>是 A 的栈顶, <code>rbp</code> 是 A 的栈底<br><img src="https://pic.rmb.bdstatic.com/d54c105690f8ff541982deae78df5457.png" alt="stack-frame"></p><p>函数调用规定了被调用者需存储调用者的<code>rbp</code>信息(Callee Saved), 并且在函数执行结束时恢复</p><p>于是, 使用<code>rbp</code>这一套的模板大概如下</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">pushq %rbp // 存储调用者的<span class="built_in">rbp</span></span><br><span class="line"><span class="keyword">movq</span>  %rsp, %rbp // 将<span class="built_in">rbp</span>设置为当前函数的基地址</span><br><span class="line">subq  <span class="number">$64</span>, %rsp // 为局部变量预留空间</span><br><span class="line"></span><br><span class="line">... // 使用<span class="built_in">rbp</span>作为内存寻址的基地址</span><br><span class="line"></span><br><span class="line"><span class="keyword">leave</span> // <span class="keyword">mov</span> %rbp, %rsp 和 <span class="keyword">pop</span> %rbp 指令的结合</span><br></pre></td></tr></table></figure><blockquote><p>可以看到, 尽管使用rbp寻址, 但仍有subq $64, %rsp操作, 这是为了避免在调用函数时可能的push操作造成和局部变量数据冲突</p></blockquote><h4 id="多参数的情况"><a href="#多参数的情况" class="headerlink" title="多参数的情况"></a>多参数的情况</h4><p>在64位程序中, 函数的参数会依次存在<code>%rdi, %rsi, %rdx, %rcx, %r8, %r9</code>, 这6个寄存器中, 如果参数多于6个怎么处理呢? 下面看一个例子</p><p>修改<code>add</code>函数接收7个参数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d, <span class="keyword">int</span> e, <span class="keyword">int</span> f, <span class="keyword">int</span> g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">return</span> a + b + c + d + e + f + g + <span class="built_in">array</span>[<span class="number">2</span>] + <span class="built_in">array</span>[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的汇编代码为(-Og优化)</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">// <span class="keyword">add</span> 函数</span><br><span class="line">subq  <span class="number">$56</span>, %rsp</span><br><span class="line">addl  %esi, %edi //a + b</span><br><span class="line">addl  %edx, %edi // c</span><br><span class="line">addl  %ecx, %edi // d</span><br><span class="line">addl  %r8d, %edi // e</span><br><span class="line">addl  %r9d, %edi // f</span><br><span class="line">movl  %edi, %eax  </span><br><span class="line">addl  <span class="number">64</span>(%rsp), %eax // g</span><br><span class="line">addl  <span class="number">8</span>(%rsp), %eax // array[<span class="number">1</span>]</span><br><span class="line">addl  <span class="number">4</span>(%rsp), %eax // array[<span class="number">0</span>]</span><br><span class="line">addq  <span class="number">$56</span>, %rsp</span><br><span class="line"></span><br><span class="line">// main 函数</span><br><span class="line">pushq <span class="number">$0</span>       // g</span><br><span class="line">movl  <span class="number">$0</span>, %r9d // f</span><br><span class="line">movl  <span class="number">$0</span>, %r8d // e</span><br><span class="line">movl  <span class="number">$0</span>, %ecx // d</span><br><span class="line">movl  <span class="number">$0</span>, %edx // c</span><br><span class="line">movl  <span class="number">$8</span>, %esi // b</span><br><span class="line">movl  <span class="number">$7</span>, %edi // a</span><br><span class="line"><span class="keyword">call</span>  <span class="keyword">add</span></span><br><span class="line">addq  <span class="number">$16</span>, %rsp</span><br></pre></td></tr></table></figure><p>可以看到, 在main函数中通过<code>push</code>操作将第7个参数压栈, 调用完成后通过<code>add</code>释放栈空间<br>这也是上面说的为什么即使有<code>rbp</code>作为基地址, 仍然要移动<code>rsp</code>的原因</p></br><p>本文大致讲了两种函数调用的方式, 可以看出, 仅使用<code>rsp</code>代码会简洁不少, 而<code>rbp</code>方式仅仅是方便于调试, 所以在开了优化的情况下, 一般会被编译为<code>rsp</code>方式</p><p>下一篇将讲述32位程序的情况, 并与64位程序做一个对比总结</p>]]></content:encoded>
      
      
      <category domain="http://blog.xhyh.best/categories/study/">study</category>
      
      
      <category domain="http://blog.xhyh.best/tags/assembly/">assembly</category>
      
      <category domain="http://blog.xhyh.best/tags/os/">os</category>
      
      
      <comments>http://blog.xhyh.best/study/assembly-function-call-64/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MPV 视频播放器配置与插件优化</title>
      <link>http://blog.xhyh.best/tutorial/mpv-config/</link>
      <guid>http://blog.xhyh.best/tutorial/mpv-config/</guid>
      <pubDate>Mon, 27 Apr 2020 01:36:19 GMT</pubDate>
      
      <description>&lt;p&gt;原来在Windows下一直用potplayer作为视频播放器, 也没发现什么大问题, 无广告, 支持格式全. 然而最近在倍速播放视频时声音老是出问题, 便搜寻到了一款更简洁的播放器MPV, 也是因为过于简洁, 所以需要配置插件做优化&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>原来在Windows下一直用potplayer作为视频播放器, 也没发现什么大问题, 无广告, 支持格式全. 然而最近在倍速播放视频时声音老是出问题, 便搜寻到了一款更简洁的播放器MPV, 也是因为过于简洁, 所以需要配置插件做优化</p><a id="more"></a><h4 id="MPV安装"><a href="#MPV安装" class="headerlink" title="MPV安装"></a>MPV安装</h4><p>官方没有提供直接的安装包, 但推荐了一系列的<a href="https://mpv.io/installation/">第三方编译包</a>, 这里我选择Windows平台的<a href="https://sourceforge.net/projects/mpv-player-windows/files/">安装包</a></p><p>下载后直接解压到一个喜欢的目录, 运行目录下的<code>installer</code>文件下中<code>mpv-install.bat</code> 文件可将mpv注册到注册表</p><p>最后将mpv设置成默认的视频播放软件</p><h4 id="MPV配置"><a href="#MPV配置" class="headerlink" title="MPV配置"></a>MPV配置</h4><p>在mpv安装目录下新建一个<code>portable_config</code>文件夹方便管理配置和插件, 新建配置文件<code>mpv.conf</code></p><p>这里贴一个我在网上找的<a href="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrnfoiwu5i48/b/anan/o/mpv.conf">配置</a></p><p>快捷键这里用官方默认的, 不做修改, 可在<a href="https://mpv.io/manual/master/#keyboard-control">官网文档</a>查看</p><h4 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h4><p>官方记录了很多第三方插件, 如果有需要可以去<a href="https://github.com/mpv-player/mpv/wiki/User-Scripts">查看</a></p><p>这里我的需求有两个, 一个是可以选择播放列表, 一个是可以查看播放历史</p><p>播放列表使用的插件是<a href="https://github.com/jonniek/mpv-playlistmanager">playlistmanager</a>, 只需下载其中的<code>playlistmanager.conf</code>, <code>playlistmanager.lua</code> 分别放入<code>portable_config</code>中的<code>script-opts</code>文件夹和<code>scripts</code>文件夹</p><blockquote><p>这里默认的配置字体有点大, 可以修改style_ass_tags配置项调整大小</p></blockquote><p>播放历史使用的插件是<a href="https://github.com/hacel/mpv-scripts">recent</a>, 只需下载其中的<code>recent.lua</code>放入<code>scripts</code>文件夹即可</p><h4 id="播放文件夹"><a href="#播放文件夹" class="headerlink" title="播放文件夹"></a>播放文件夹</h4><p>很多时候都需要按照文件夹来播放, 自动生成播放列表, 配合播放列表插件使用</p><p>这里提供一个注册表<a href="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrnfoiwu5i48/b/anan/o/mpv.reg">配置</a>, 修改为自己的mpv安装路径, 运行即可</p>]]></content:encoded>
      
      
      <category domain="http://blog.xhyh.best/categories/tutorial/">tutorial</category>
      
      
      <category domain="http://blog.xhyh.best/tags/mpv/">mpv</category>
      
      <category domain="http://blog.xhyh.best/tags/software/">software</category>
      
      
      <comments>http://blog.xhyh.best/tutorial/mpv-config/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>汇编入门之汇编指令详解</title>
      <link>http://blog.xhyh.best/study/assembly-instructions/</link>
      <guid>http://blog.xhyh.best/study/assembly-instructions/</guid>
      <pubDate>Sun, 26 Apr 2020 03:18:26 GMT</pubDate>
      
      <description>&lt;p&gt;最近在深入学习操作系统, 少不了和汇编代码打交道, 尽管原来对汇编指令有所了解, 但实际看到一条指令还是模凌两可. 本文对常用汇编指令进行一个总结, 同时区分几个易混的指令&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>最近在深入学习操作系统, 少不了和汇编代码打交道, 尽管原来对汇编指令有所了解, 但实际看到一条指令还是模凌两可. 本文对常用汇编指令进行一个总结, 同时区分几个易混的指令</p><a id="more"></a><h3 id="汇编格式说明"><a href="#汇编格式说明" class="headerlink" title="汇编格式说明"></a>汇编格式说明</h3><p>一般来说, 在<code>Linux</code>下使用<code>GCC</code>生成的汇编代码会使用<code>AT&amp;T/UNIX</code>汇编语法, 而使用<code>IDA</code>, <code>pwndbg</code>, <code>gef</code>反编译出来的代码会使用<code>Intel</code>汇编语法</p><p>下面大致讲一下两者语法的不同, 后文将使用<code>AT&amp;T</code>汇编格式</p><ol><li><p>操作数顺序不同</p> <figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">Op-code src dst //<span class="meta">AT</span>&amp;T语法</span><br><span class="line">Op-code dst src //Intel语法</span><br></pre></td></tr></table></figure></li><li><p>寄存器, 立即数的使用</p> <figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">movl  <span class="number">$0</span>xff,%ebx //<span class="meta">AT</span>&amp;T语法</span><br><span class="line"><span class="keyword">mov</span>   <span class="built_in">ebx</span>,<span class="number">0ffh</span>   //Intel语法</span><br></pre></td></tr></table></figure></li><li><p>操作数大小</p> <figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">movb  (%rbp), %al //<span class="meta">AT</span>&amp;T语法</span><br><span class="line"><span class="keyword">mov</span>   <span class="built_in">al</span>, <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">rbp</span>   //Intel语法</span><br></pre></td></tr></table></figure><blockquote><p>movb, movw, movl, movq 分别代表操作1, 2, 4, 8字节, 若仅是mov, 则根据应用是32位还是64位决定是movl还是movq</p></blockquote></li><li><p>内存寻址</p> <figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">movl -<span class="number">8</span>(%ebp, %edx, <span class="number">4</span>), %eax //<span class="meta">AT</span>&amp;T语法</span><br><span class="line"><span class="keyword">mov</span>  <span class="built_in">eax</span>, [%ebp + %edx * <span class="number">4</span> - <span class="number">8h</span>] //Intel语法</span><br></pre></td></tr></table></figure></li></ol><h3 id="常见指令"><a href="#常见指令" class="headerlink" title="常见指令"></a>常见指令</h3><h4 id="mov指令"><a href="#mov指令" class="headerlink" title="mov指令"></a>mov指令</h4><p>mov作为最常用的指令, 用法非常灵活</p><p>语法</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> &lt;reg&gt;, &lt;reg&gt; // 寄存器的值到寄存器的值</span><br><span class="line"><span class="keyword">mov</span> &lt;reg&gt;, &lt;mem&gt; // 寄存器的值到寄存器指针指向的内存(通过加括号的方式)</span><br><span class="line"><span class="keyword">mov</span> &lt;mem&gt;, &lt;reg&gt; // 内存到寄存器</span><br><span class="line"><span class="keyword">mov</span> &lt;imm&gt;, &lt;reg&gt; // 立即数到寄存器(立即数前要加$)</span><br><span class="line"><span class="keyword">mov</span> &lt;imm&gt;, &lt;mem&gt; // 立即数到内存</span><br></pre></td></tr></table></figure><blockquote><p>内存寻址方式可采用disp(base, index, scale)的方式, 对表达式整体计算的值作为内存地址 如mov -8(%ebp, %edx, 4), %eax 表示加载 *(ebp + (edx * 4) - 8) 到 eax寄存器</p></blockquote><h4 id="push-pop指令"><a href="#push-pop指令" class="headerlink" title="push / pop指令"></a>push / pop指令</h4><p>push可以理解为在mov到esp内存的同时使<code>esp</code>减小(高地址到低地址扩展)<br>pop 可以理解为在mov到esp内存的同时的同时使<code>esp</code>增加</p><p>语法</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">push</span> &lt;reg&gt;</span><br><span class="line"><span class="keyword">push</span> &lt;mem&gt;</span><br><span class="line"><span class="keyword">push</span> &lt;imm&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在64位里push操作8字节的数, 32位只能操作4子节的数</p></blockquote><h4 id="lea-指令"><a href="#lea-指令" class="headerlink" title="lea 指令"></a>lea 指令</h4><p>lea 可以将内存操作数放入寄存器中<br>lea 虽然用法单一, 但十分灵活, 常用来代替乘法和加法指令</p><p>语法</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lea</span> &lt;mem&gt;, &lt;reg&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这里的mem并不是真的取内存中的值, 而是操作数本身 如lea -8(%ebp, %edx, 4), %eax 表示加载 ebp + (edx * 4) - 8 的值到 eax寄存器</p></blockquote><h4 id="add-sub-指令"><a href="#add-sub-指令" class="headerlink" title="add / sub 指令"></a>add / sub 指令</h4><p>这两个指令比较简单, 就是做加法和减法, 将操作结果存在目的操作数中</p><p>语法</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add</span> &lt;reg&gt;, &lt;reg&gt;</span><br><span class="line"><span class="keyword">add</span> &lt;mem&gt;, &lt;reg&gt;</span><br><span class="line"><span class="keyword">add</span> &lt;reg&gt;, &lt;mem&gt;</span><br><span class="line"><span class="keyword">add</span> &lt;imm&gt;, &lt;reg&gt;</span><br><span class="line"><span class="keyword">add</span> &lt;imm&gt;, &lt;mem&gt;</span><br></pre></td></tr></table></figure><h4 id="inc-dec-指令"><a href="#inc-dec-指令" class="headerlink" title="inc / dec 指令"></a>inc / dec 指令</h4><p>基本和add / sub一致, 但只能加减1</p><p>语法</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inc</span> &lt;reg&gt;</span><br><span class="line"><span class="keyword">inc</span> &lt;mem&gt;</span><br></pre></td></tr></table></figure><h4 id="imul-指令"><a href="#imul-指令" class="headerlink" title="imul 指令"></a>imul 指令</h4><p>乘法指令, 可以有两个操作数或三个操作数, 第三个操作数必须为寄存器</p><p>语法</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">imul</span> &lt;reg32&gt;, &lt;reg32&gt;</span><br><span class="line"><span class="keyword">imul</span> &lt;mem&gt;, &lt;reg32&gt;</span><br><span class="line"><span class="keyword">imul</span> &lt;imm&gt;, &lt;reg32&gt;, &lt;reg32&gt;</span><br><span class="line"><span class="keyword">imul</span> &lt;imm&gt;, &lt;mem&gt;, &lt;reg32&gt;</span><br></pre></td></tr></table></figure><h4 id="idiv-指令"><a href="#idiv-指令" class="headerlink" title="idiv 指令"></a>idiv 指令</h4><p>除法指令, 需要把被除数放入eax寄存器中, 得到商在eax中, 余数在edx中</p><p>语法</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">idiv</span> &lt;reg&gt;</span><br><span class="line"><span class="keyword">idiv</span> &lt;mem&gt;</span><br></pre></td></tr></table></figure><h4 id="and-or-xor-指令"><a href="#and-or-xor-指令" class="headerlink" title="and / or / xor 指令"></a>and / or / xor 指令</h4><p>做与, 或, 异或运算</p><p>语法</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> &lt;reg&gt;, &lt;reg&gt;</span><br><span class="line"><span class="keyword">and</span> &lt;mem&gt;, &lt;reg&gt;</span><br><span class="line"><span class="keyword">and</span> &lt;reg&gt;, &lt;mem&gt;</span><br><span class="line"><span class="keyword">and</span> &lt;imm&gt;, &lt;reg&gt;</span><br><span class="line"><span class="keyword">and</span> &lt;imm&gt;, &lt;mem&gt;</span><br></pre></td></tr></table></figure><blockquote><p>常使用xor %edx, %edx 将寄存器置0</p></blockquote><h4 id="not-neg-指令"><a href="#not-neg-指令" class="headerlink" title="not / neg 指令"></a>not / neg 指令</h4><p>not 按位取反, neg 按补码取负</p><p>语法</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">not</span> &lt;reg&gt;</span><br><span class="line"><span class="keyword">not</span> &lt;mem&gt;</span><br></pre></td></tr></table></figure><h4 id="shl-shr-sal-sar指令"><a href="#shl-shr-sal-sar指令" class="headerlink" title="shl / shr / sal / sar指令"></a>shl / shr / sal / sar指令</h4><p>逻辑左移/逻辑右移/算数左移/算数右移操作</p><p>语法</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">shl</span> &lt;imm&gt;, &lt;reg&gt;</span><br><span class="line"><span class="keyword">shl</span> &lt;imm&gt;, &lt;mem&gt;</span><br><span class="line"><span class="keyword">shl</span> %cl, &lt;reg&gt;</span><br><span class="line"><span class="keyword">shl</span> %cl, &lt;mem&gt;</span><br></pre></td></tr></table></figure><h4 id="jmp-jcondition-cmp指令"><a href="#jmp-jcondition-cmp指令" class="headerlink" title="jmp / jcondition /cmp指令"></a>jmp / jcondition /cmp指令</h4><p>跳转到某一标签, 常用语循环语句和判断语句</p><p>语法</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">jmp</span> &lt;label&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">cmp</span> &lt;reg&gt;, &lt;reg&gt;</span><br><span class="line"><span class="keyword">cmp</span> &lt;mem&gt;, &lt;reg&gt;</span><br><span class="line"><span class="keyword">cmp</span> &lt;reg&gt;, &lt;mem&gt;</span><br><span class="line"><span class="keyword">cmp</span> &lt;imm&gt;, &lt;reg&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">je</span>  &lt;label&gt; // 等于时跳转</span><br><span class="line"><span class="keyword">jne</span> &lt;label&gt; // 不等时跳转</span><br><span class="line"><span class="keyword">jz</span>  &lt;label&gt; // <span class="keyword">cmp</span>将两数相减, 为<span class="number">0</span>时跳转</span><br><span class="line"><span class="keyword">jg</span>  &lt;label&gt; // 大于时跳转</span><br><span class="line"><span class="keyword">jge</span> &lt;label&gt; // 大于等于跳转</span><br><span class="line"><span class="keyword">jl</span>  &lt;label&gt; // 小于时跳转</span><br><span class="line"><span class="keyword">jle</span> &lt;label&gt; // 小于等于跳转</span><br></pre></td></tr></table></figure><h4 id="call-ret-指令"><a href="#call-ret-指令" class="headerlink" title="call / ret 指令"></a>call / ret 指令</h4><p>函数调用及函数返回</p><p>语法</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> &lt;label&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ret</span></span><br></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="mov-和-lea-指令的区别"><a href="#mov-和-lea-指令的区别" class="headerlink" title="mov 和 lea 指令的区别"></a>mov 和 lea 指令的区别</h4><p>在简单操作上两者可以等价</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> %eax, %ebx</span><br><span class="line"></span><br><span class="line"><span class="keyword">lea</span> (%eax), %ebx</span><br></pre></td></tr></table></figure><p>若mov使用了内存寻址, 则mov会取到对应地址的值, 而lea仅操作地址</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> -<span class="number">8</span>(%ebp, %edx, <span class="number">4</span>), %eax</span><br><span class="line"></span><br><span class="line"><span class="keyword">lea</span> -<span class="number">8</span>(%ebp, %edx, <span class="number">4</span>), %eax</span><br></pre></td></tr></table></figure><p>在这种情况下, mov便无法替代lea</p><h4 id="i-为什么不是原子操作"><a href="#i-为什么不是原子操作" class="headerlink" title="i++为什么不是原子操作"></a>i++为什么不是原子操作</h4><p>尽管add/inc可以直接对内存进行操作, 但实际情况下会先从内存加载到寄存器中, 再对寄存器进行加操作</p>]]></content:encoded>
      
      
      <category domain="http://blog.xhyh.best/categories/study/">study</category>
      
      
      <category domain="http://blog.xhyh.best/tags/assembly/">assembly</category>
      
      <category domain="http://blog.xhyh.best/tags/os/">os</category>
      
      
      <comments>http://blog.xhyh.best/study/assembly-instructions/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Windows 下使用 wsl2 打造极致开发环境</title>
      <link>http://blog.xhyh.best/tutorial/windows-wsl2-env/</link>
      <guid>http://blog.xhyh.best/tutorial/windows-wsl2-env/</guid>
      <pubDate>Tue, 14 Apr 2020 01:09:44 GMT</pubDate>
      
      <description>&lt;p&gt;自Windows Terminal发布后一直用得很爽, 我也一直在关注着另一个’神器’wsl2的到来. Windows 2004 RTM版出来后我便立即重装了系统, 感受到了wsl2的强大. 本文的主要内容就是如何配置wsl2并解决它带来的一些问题&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>自Windows Terminal发布后一直用得很爽, 我也一直在关注着另一个’神器’wsl2的到来. Windows 2004 RTM版出来后我便立即重装了系统, 感受到了wsl2的强大. 本文的主要内容就是如何配置wsl2并解决它带来的一些问题</p><a id="more"></a><h4 id="为什么需要wsl2"><a href="#为什么需要wsl2" class="headerlink" title="为什么需要wsl2"></a>为什么需要wsl2</h4><p>如果你是一个开发人员, 一定有以下几个痛点</p><ol><li>安装软件麻烦, c++应该下哪个? python应该下哪个? vscode对应的配置怎么配?</li><li>残缺的<code>Git bash</code>,  <code>wget</code> 命令去哪了?  <code>md5sum</code>在哪?</li><li>巨慢的<code>git clone</code>, ssh怎么不走代理啊? 怎么配置?</li><li>乱码问题, 我使用<code>UTF-8</code>编码, 怎么运行到命令行就乱码?</li></ol><p><code>Windows</code>下还有很多问题就不一一列举了</p><h4 id="wsl2能解决的问题"><a href="#wsl2能解决的问题" class="headerlink" title="wsl2能解决的问题"></a>wsl2能解决的问题</h4><ol><li>真实<code>Linux</code>内核, 带来了完整的<code>Linux</code>体验</li><li>优化后的IO速度, 读写速度快</li><li>内存回收技术, 避免占用过多内存不释放</li><li>自动挂载Windows磁盘, 无缝访问Windows文件</li></ol><h4 id="wsl2安装"><a href="#wsl2安装" class="headerlink" title="wsl2安装"></a>wsl2安装</h4><p>具体安装请看<a href="https://docs.microsoft.com/en-us/windows/wsl/wsl2-install">官方文档</a></p><p>大致的步骤是</p><ol><li>打开可选功能的<code>适用于Linux的Windows子系统</code>和<code>虚拟机平台</code></li><li>重启计算机</li><li>在<code>Windows Store</code>中下载<code>Linux</code>发行版, 如<code>Ubuntu</code></li><li>启动<code>Ubuntu</code>, 设置用户名, 密码(此时默认是<code>wsl</code>而不是<code>wsl2</code>)</li><li>在<code>powershell</code>中根据文档切换成<code>wsl2</code></li><li>若提示切换失败, 可能需要手动安装内核, 去<a href="https://docs.microsoft.com/en-us/windows/wsl/wsl2-kernel">官网</a>下载安装</li></ol><h4 id="Windows-Terminal配置"><a href="#Windows-Terminal配置" class="headerlink" title="Windows Terminal配置"></a>Windows Terminal配置</h4><ol><li>主题配置 这里贴一份我自己的配置, 有需要的可以<a href="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrnfoiwu5i48/b/anan/o/settings.json">下载</a>修改<br> <img src="https://pic.rmb.bdstatic.com/3a62a32f090a8aed6fb9caa0af0019eb.png" alt="windows-terminal"></li><li>右键-在此文件夹中打开 这个功能需要添加注册表, 有需要可以<a href="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrnfoiwu5i48/b/anan/o/right.reg">下载</a>, 运行</li></ol><h4 id="wsl2简单配置"><a href="#wsl2简单配置" class="headerlink" title="wsl2简单配置"></a>wsl2简单配置</h4><ol><li><p>使用<code>zsh</code>作为默认<code>bash</code>(可选, 这里不做过多介绍)</p></li><li><p>当使用<code>Windows Search</code> 打开<code>Windows Terminal</code>时, 默认进入用户目录<code>~</code></p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="subst">$(pwd)</span>&quot;</span> == *<span class="string">&quot;Windows&quot;</span>* ]] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">cd</span> ~</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><blockquote><p>由于我使用了oh-my-zsh, 每次安装会覆盖原有的.zshrc, 所以我的所有关于bash配置都写在~/.profile下, 并在.zshrc中使用source .profile加载</p></blockquote></li><li><p>配置默认使用<code>vim</code>作为可视化编辑器</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> VISUAL=vim</span><br><span class="line"><span class="built_in">export</span> EDITOR=<span class="string">&quot;<span class="variable">$VISUAL</span>&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="wsl2代理设置"><a href="#wsl2代理设置" class="headerlink" title="wsl2代理设置"></a>wsl2代理设置</h4><p><code>wsl2</code>采用的网络模式是<code>Nat</code>模式, 在<code>wsl2</code>中如果想使用<code>Windows</code>下的代理会比较麻烦, 不能直接通过<code>localhost</code>访问</p><blockquote><p>但Windows却可以使用localhost访问wsl2中的服务, 很便于程序的调试</p></blockquote><p>首先需要安装<code>proxychains4</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install proxychains4</span><br></pre></td></tr></table></figure><p>复制一份配置文件到用户目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/proxychains4.conf ~/.proxychains.conf</span><br></pre></td></tr></table></figure><p>配置bash设置(.profile中)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到windows ip</span></span><br><span class="line"><span class="built_in">export</span> WIN_IP=`cat /etc/resolv.conf | grep nameserver | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="comment"># 删除原有socks5配置</span></span><br><span class="line">sed -i <span class="string">&#x27;/socks5/d&#x27;</span> ~/.proxychains.conf</span><br><span class="line"><span class="comment"># 添加新的socks5配置</span></span><br><span class="line">sed -i <span class="string">&#x27;$a socks5 &#x27;</span><span class="variable">$&#123;WIN_IP&#125;</span><span class="string">&#x27; 7891&#x27;</span> ~/.proxychains.conf</span><br><span class="line"><span class="built_in">alias</span> pc=<span class="string">&#x27;proxychains4 -q -f ~/.proxychains.conf&#x27;</span></span><br></pre></td></tr></table></figure><p>这样每次启动都会寻找正确的ip地址, 并设置好给<code>proxychains4</code></p><h4 id="vscode设置"><a href="#vscode设置" class="headerlink" title="vscode设置"></a>vscode设置</h4><p>还是由于网络问题, <code>remote server</code>继承了主<code>vscode</code>的配置, 代理会默认被设为<code>127.0.0.1:7890</code>, 会出现无法下载插件, 或无法使用插件等问题</p><p>经过测试, 即使在<code>wsl2</code>设置了<code>http_proxy</code>环境变量也没办法生效(主配置已检测到代理), 需要手动设置才能生效<br><img src="https://pic.rmb.bdstatic.com/ff4e30a30dd6be1ee200ef58054b83e9.png" alt="vscode-config"></p><h4 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h4><p>大多数软件都能使用<code>wsl2</code>替代, 如<code>git</code>, <code>c++</code>, <code>python</code>, <code>golang</code>等</p><p>但还是有些依赖图形化的软件只能在<code>Windows</code>下运行, 如<code>IDEA</code>, <code>Android Studio</code>等</p><p>这些软件也依赖于<code>git</code>, 但又不想在<code>Windows</code>又装一个重量级的<code>git bash</code>, 于是我找到两种解决方案, 一种是<code>git</code>映射到<code>wsl2</code>中的<code>git</code>, 第二种是额外下载一个轻量级的<code>git</code>–<a href="https://github.com/git-for-windows/git/releases">MinGit</a></p><p>这里推荐第二种方法, 简单, 最小只有20M左右, 而且无需安装</p><h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h4><p><code>wsl2</code>唯一的缺点是无法自动缩进磁盘空间, 当突然下载大文件后又删除后, 虚拟机占用空间并不会减少, 只会持续扩张. 目前解决办法是磁盘分区, 后续官方应该有更好的解决方法</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>总得来说, <code>wsl2</code>的体验很不错, 有种在<code>Linux</code>中使用<code>Windows</code>的感觉, 既可以享受<code>Windows</code>众多图形化软件带来的优势, 也可以方便快捷使用<code>Linux</code>做程序开发, 这点就比原生<code>Linux</code>强很多了, 和<code>mac</code>的差距也没那么大了</p>]]></content:encoded>
      
      
      <category domain="http://blog.xhyh.best/categories/tutorial/">tutorial</category>
      
      
      <category domain="http://blog.xhyh.best/tags/windows/">windows</category>
      
      <category domain="http://blog.xhyh.best/tags/wsl2/">wsl2</category>
      
      
      <comments>http://blog.xhyh.best/tutorial/windows-wsl2-env/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hexo 主题开发和修改 --实践篇</title>
      <link>http://blog.xhyh.best/tutorial/hexo-theme-dev/</link>
      <guid>http://blog.xhyh.best/tutorial/hexo-theme-dev/</guid>
      <pubDate>Mon, 13 Apr 2020 00:32:54 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;a href=&quot;https://blog.xhyh.best/tutorial/hexo-theme-theory/&quot;&gt;上一篇&lt;/a&gt;中, 我们了解了Hexo主题的目录结构和基本的语法知识, 本文主要针对&lt;code&gt;apollo&lt;/code&gt;主题进行开发和修改&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><a href="https://blog.xhyh.best/tutorial/hexo-theme-theory/">上一篇</a>中, 我们了解了Hexo主题的目录结构和基本的语法知识, 本文主要针对<code>apollo</code>主题进行开发和修改</p><a id="more"></a><h3 id="布局修改"><a href="#布局修改" class="headerlink" title="布局修改"></a>布局修改</h3><h4 id="部分部局"><a href="#部分部局" class="headerlink" title="部分部局"></a>部分部局</h4><p>为了使布局能够复用, 所以将一个页面拆分成多个模块</p><p><code>head</code> 网页的头部信息, 变量可通过Hexo中配置文件<code>config.xxx</code>获取</p><p><code>nav</code> 导航栏信息, 可通过遍历主题配置<code>each value, key in theme.menu</code>获取</p><p><code>layout</code> 基布局, 包含多个<code>block</code>可以被覆盖</p><p><code>comment</code> 评论布局, 包括了所有支持的评论插件</p><p><code>copyright</code> 底部布局</p><p><code>scripts</code> 页面所需的js</p><h4 id="博客页面"><a href="#博客页面" class="headerlink" title="博客页面"></a>博客页面</h4><p>主页: 继承至<code>layout</code>布局, 包含三大部分</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extends</span> partial/layout</span><br><span class="line"></span><br><span class="line">block container</span><br><span class="line">    include mixins/post</span><br><span class="line">    +posts()</span><br><span class="line"></span><br><span class="line">block pagination</span><br><span class="line">    include mixins/paginator</span><br><span class="line">    +home()</span><br><span class="line"></span><br><span class="line">block copyright</span><br><span class="line">    include partial/copyright</span><br></pre></td></tr></table></figure><p>其中<code>posts()</code>是混入的函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mixin posts()</span><br><span class="line">    ul.home.post-list</span><br><span class="line">        - page.posts.each(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">            li.post-list-item</span><br><span class="line">                article.post-block</span><br><span class="line">                    h2.post-title</span><br><span class="line">                        a.post-title-link(href= url_for(item.path))</span><br><span class="line">                            != item.title</span><br><span class="line">                    +postInfo(item)</span><br><span class="line">                    .post-content</span><br><span class="line">                        != item.excerpt</span><br><span class="line">                    a.read-more(href= url_for(item.path))!= __(<span class="string">&#x27;more&#x27;</span>)</span><br><span class="line">        - &#125;)</span><br><span class="line">mixin postInfo(item)</span><br><span class="line">    .post-info</span><br><span class="line">        != full_date(item.date, <span class="string">&#x27;ll&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> (item.tags &amp;&amp; (is_home() || is_post()))</span><br><span class="line">            <span class="keyword">for</span> tag <span class="keyword">in</span> item.tags.toArray()</span><br><span class="line">                a.tag-title(href=url_for(tag.path))</span><br><span class="line">                    != <span class="string">&#x27;#&#x27;</span> + tag.name</span><br></pre></td></tr></table></figure><blockquote><p>如果想修改, 比如给文章加上tag, 就可以自行在<code>postInfo</code>函数中加入对应的标签</p></blockquote><p>文章页: 和<code>index</code>页面基本一样, 但多了标题和描述block的覆盖</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extends</span> partial/layout</span><br><span class="line"></span><br><span class="line">block site_title</span><br><span class="line">    != page.title + <span class="string">&quot; · &quot;</span> + config.title</span><br><span class="line"></span><br><span class="line">block description</span><br><span class="line">    - <span class="keyword">var</span> desc = page.desc || page.title + <span class="string">&#x27; - &#x27;</span> + config.author;</span><br><span class="line">    meta(name=<span class="string">&quot;description&quot;</span>, content=desc)</span><br><span class="line"></span><br><span class="line">block container</span><br><span class="line">    include mixins/post</span><br><span class="line">    +post(page)</span><br><span class="line"></span><br><span class="line">block pagination</span><br><span class="line">    include mixins/paginator</span><br><span class="line">    +post()</span><br><span class="line">    include partial/comment</span><br><span class="line"></span><br><span class="line">block copyright</span><br><span class="line">    include partial/copyright</span><br></pre></td></tr></table></figure><p>自定义页面: 需要在<code>block container</code>中判断页面类型实现不同的内容</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extends</span> partial/layout</span><br><span class="line"></span><br><span class="line">block container</span><br><span class="line">    <span class="keyword">if</span> page.type === <span class="string">&#x27;category&#x27;</span></span><br><span class="line">      .category  </span><br><span class="line">          h2.title</span><br><span class="line">              != page.title</span><br><span class="line">          != list_categories()</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> page.type === <span class="string">&#x27;friends&#x27;</span></span><br><span class="line">      .flink</span><br><span class="line">        <span class="keyword">if</span> site.data.link</span><br><span class="line">           ...</span><br><span class="line">block pagination</span><br><span class="line">    include mixins/paginator</span><br><span class="line">    +home()</span><br><span class="line"></span><br><span class="line">block copyright</span><br><span class="line">    include partial/copyright</span><br></pre></td></tr></table></figure><blockquote><p>我这里使用<code>page.type</code>判断页面类型, 这样需要在对应页面<code>index.md</code>中添加<code>type</code>变量</p></blockquote><h3 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h3><h4 id="根样式"><a href="#根样式" class="headerlink" title="根样式"></a>根样式</h4><p>定义一个根样式, <code>gulp</code>只编译这个文件, 更方便管理, 其他样式通过<code>@import</code>引入</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">&quot;utf-8&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;_partial/normalize&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;_partial/base&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;_partial/header&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;https://fonts.googleapis.com/css?family=Open+Sans&amp;display=swap&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="部分样式"><a href="#部分样式" class="headerlink" title="部分样式"></a>部分样式</h4><p>根据每个部分布局定义部分样式, 再在根样式中引入</p><p>在命令行中运行<code>gulp</code>命令即可监控样式的更改, 实时编译</p><blockquote><p>在chrome中, 右键-检查想修改的部分, 可快速定位css信息和debug</p></blockquote><h3 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h3><p>可根据自身需求在<code>_config</code>文件中进行修改, 可以新增<code>menu</code>菜单或新增变量</p>]]></content:encoded>
      
      
      <category domain="http://blog.xhyh.best/categories/tutorial/">tutorial</category>
      
      
      <category domain="http://blog.xhyh.best/tags/blog/">blog</category>
      
      <category domain="http://blog.xhyh.best/tags/hexo-theme/">hexo-theme</category>
      
      
      <comments>http://blog.xhyh.best/tutorial/hexo-theme-dev/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>记一次阿里云被攻击</title>
      <link>http://blog.xhyh.best/other/aliyun-hacked/</link>
      <guid>http://blog.xhyh.best/other/aliyun-hacked/</guid>
      <pubDate>Sun, 12 Apr 2020 02:46:23 GMT</pubDate>
      
      <description>&lt;p&gt;之前申请了免费的阿里云学生机, 部署了服务后就没管了, 前几天阿里云连续两天发来了安全警告邮件, 登上管理页一看, 还真的被hack了…&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>之前申请了免费的阿里云学生机, 部署了服务后就没管了, 前几天阿里云连续两天发来了安全警告邮件, 登上管理页一看, 还真的被hack了…</p><a id="more"></a><h4 id="事情开端"><a href="#事情开端" class="headerlink" title="事情开端"></a>事情开端</h4><p>收到第一封阿里发的邮件<br><img src="https://pic.rmb.bdstatic.com/bf8743473cee025d4c2bdc9523a93e5f.png" alt="mail-1"><br>当时在电脑右下角弹出来了, 我正好在忙其他的, 想了想我服务器上也没跑什么不安全的东西, 也许又是某个库(如<code>fastjson</code>)爆出的高危漏洞, 就没管它了</p><blockquote><p>现在重看发现上面写的内容是<strong>挖矿程序</strong>, 当时如果看到了应该会立即处理吧</p></blockquote><p>第二天收到第二封阿里发的邮件<br><img src="https://pic.rmb.bdstatic.com/f9518a806696c111e4253d67b9fd65ae.png" alt="mail-2"><br>这天不忙, 点进去看了, 觉得很奇怪, 怎么变成了我<strong>对外攻击</strong>了啊?</p><p>于是便打开阿里云控制台查看情况</p><h4 id="情况分析"><a href="#情况分析" class="headerlink" title="情况分析"></a>情况分析</h4><p><img src="https://pic.rmb.bdstatic.com/eaa8ce2a19586e83a0d76fca536d2cb7.png" alt="alert-1"></p><p><img src="https://pic.rmb.bdstatic.com/81adc00297cf1dae3a7d81d09458f259.png" alt="alert-2"></p><p>打开控制台后便看到了这两条警告</p><p>第一条是显示被植入了挖矿程序</p><p>第二条是显示在疯狂和外网IP通讯</p><p>然后去<a href="https://github.com/docker-library/redis/issues/217">网上</a>查了一下, 这个挖矿程序在<code>redis docker</code>中十分盛行, 当然不是镜像的锅, 而是创建<code>redis</code>时没有设密码, 而<code>redis</code>本身防护做得不好, 导致可以任意的文件读写, 造成了被黑客攻击, 植入程序</p><p>其实在很早就知道无密码的<code>redis</code>有很大的安全风险, 原来用腾讯云部署应用时, 为了方便就没给<code>redis</code>上密码, 后来发现<code>redis</code>服务隔一天左右就会自动停止服务, 去查了一下发现是被攻击了, 后面自己使用<code>redis</code>都会上密码</p><h4 id="损失"><a href="#损失" class="headerlink" title="损失"></a>损失</h4><p>分析完原因后想马上登陆服务器关掉<code>redis</code>, 然后一直连接不上, 估计是cpu跑到了100%</p><p>迫不得已只能重启服务器(幸好redis没开–restart always)</p><p>然而, 登陆发现<code>mysql</code>里面的数据全没了!!</p><p>我这才意识到, 每次新建<code>mysql</code>的时候, 我都偷懒没做文件映射, 也没对数据做定期备份</p><h4 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h4><ol><li><p>不要忽视任何一封安全邮件</p></li><li><p>开<code>redis</code>设密码</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在容器执行redis-server启动命令，并打开redis持久化</span></span><br><span class="line">docker run -d --name redis \</span><br><span class="line">              -p 6378:6379 \ </span><br><span class="line">              redis:latest \</span><br><span class="line">              redis-server --appendonly yes --requirepass <span class="string">&quot;your_pass&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>开<code>mysql</code>文件映射</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name=mysql \</span><br><span class="line">            -v ~/docker/mysql/data:/var/lib/mysql \</span><br><span class="line">            -e MYSQL_ROOT_HOST=% -p 3306:3306 \</span><br><span class="line">            -d mysql/mysql-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看密码</span></span><br><span class="line">docker logs mysql1 2&gt;&amp;1 | grep GENERATED</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql mysql -uroot -p</span><br><span class="line"><span class="comment"># 修改密码</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>定时备份数据库</p></li></ol>]]></content:encoded>
      
      
      <category domain="http://blog.xhyh.best/categories/other/">other</category>
      
      
      <category domain="http://blog.xhyh.best/tags/server/">server</category>
      
      <category domain="http://blog.xhyh.best/tags/security/">security</category>
      
      
      <comments>http://blog.xhyh.best/other/aliyun-hacked/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hexo 主题开发和修改 --理论篇</title>
      <link>http://blog.xhyh.best/tutorial/hexo-theme-theory/</link>
      <guid>http://blog.xhyh.best/tutorial/hexo-theme-theory/</guid>
      <pubDate>Sat, 11 Apr 2020 03:37:19 GMT</pubDate>
      
      <description>&lt;p&gt;在寻找Hexo主题时, 发现了一款极其简洁的主题&lt;a href=&quot;https://github.com/achjqz/hexo-theme-apollo&quot;&gt;apollo&lt;/a&gt;, 这款主题代码量不多, 视图引擎使用的是&lt;code&gt;pug&lt;/code&gt;(原名&lt;code&gt;jade&lt;/code&gt;), 本文主要讲述进行Hexo主题开发和对主题的理论部分&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>在寻找Hexo主题时, 发现了一款极其简洁的主题<a href="https://github.com/achjqz/hexo-theme-apollo">apollo</a>, 这款主题代码量不多, 视图引擎使用的是<code>pug</code>(原名<code>jade</code>), 本文主要讲述进行Hexo主题开发和对主题的理论部分</p><a id="more"></a><h3 id="主题下载和环境配置"><a href="#主题下载和环境配置" class="headerlink" title="主题下载和环境配置"></a>主题下载和环境配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/achjqz/hexo-theme-apollo.git apollo</span><br><span class="line"><span class="built_in">cd</span> apollo</span><br><span class="line">npm install</span><br><span class="line">npm install --global gulp-cli</span><br></pre></td></tr></table></figure><blockquote><p>主题用到的所有依赖包都是gulp相关的, gulp可以使开发者更方便的编写css文件</p></blockquote><h3 id="主题目录结构介绍"><a href="#主题目录结构介绍" class="headerlink" title="主题目录结构介绍"></a>主题目录结构介绍</h3><p><img src="https://pic.rmb.bdstatic.com/e5d6dc0330e0dbfb33d4419d968c5a8c.png" alt="catalog"></p><h4 id="docs文件夹"><a href="#docs文件夹" class="headerlink" title="docs文件夹"></a>docs文件夹</h4><p>这个文件夹是自己新建的, 存放主题的配置文档说明, 可有可无</p><h4 id="languages文件夹"><a href="#languages文件夹" class="headerlink" title="languages文件夹"></a>languages文件夹</h4><p>根据<a href="https://hexo.io/zh-cn/docs/internationalization.html">Hexo官网</a>的说明, 在此文件夹下配置多语言文件,可以让网站以不同语言呈现</p><p>例如, 配置<code>en.yml</code>和<code>zh-Hans.yml</code>文件可以支持英语和中文</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># en.yml</span></span><br><span class="line"><span class="attr">more:</span> <span class="string">...more</span></span><br><span class="line"><span class="comment"># zh-Hans.yml</span></span><br><span class="line"><span class="attr">more:</span> <span class="string">...阅读更多</span></span><br></pre></td></tr></table></figure><p>在模板中, 使用 __ 或 _p 辅助函数, 即可取得翻译后的字符串, 前者用于一般使用；而后者用于复数字符串</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.read-more(href&#x3D; url_for(item.path))!&#x3D; __(&#39;more&#39;)</span><br></pre></td></tr></table></figure><h4 id="layout文件夹"><a href="#layout文件夹" class="headerlink" title="layout文件夹"></a>layout文件夹</h4><p>该文件夹存放的就是博客页面的布局文件, 根据需求, 至少存在<code>index</code>, <code>post</code>, <code>archive</code> 三个页面</p><table><thead><tr><th>模板</th><th>用途</th><th>回退</th></tr></thead><tbody><tr><td>index</td><td>首页</td><td></td></tr><tr><td>post</td><td>文章</td><td>index</td></tr><tr><td>page</td><td>分页</td><td>index</td></tr><tr><td>archive</td><td>归档</td><td>index</td></tr><tr><td>category</td><td>分类归档</td><td>archive</td></tr><tr><td>tag</td><td>标签归档</td><td>archive</td></tr></tbody></table><h4 id="source文件夹"><a href="#source文件夹" class="headerlink" title="source文件夹"></a>source文件夹</h4><p>该文件夹下主要存放<code>css</code>文件, <code>js</code>文件, 图片资源等</p><h4 id="config-yml文件"><a href="#config-yml文件" class="headerlink" title="_config.yml文件"></a><code>_config.yml</code>文件</h4><p>主题配置文件, 其中定义的变量在模版中可通过<code>theme.xxx</code>获取</p><blockquote><p>Hexo博客目录下也有同样的配置文件, 可以覆盖主题中定义的变量</p></blockquote><h4 id="gulpfile-js-文件"><a href="#gulpfile-js-文件" class="headerlink" title="gulpfile.js 文件"></a><code>gulpfile.js</code> 文件</h4><p>执行<code>gulp</code>命令后执行的脚本, 可以将<code>scss</code>打包成<code>css</code>并监控文件变化, 后文会详细讲解</p><h3 id="布局语法和样式语法"><a href="#布局语法和样式语法" class="headerlink" title="布局语法和样式语法"></a>布局语法和样式语法</h3><h4 id="pug语法了解"><a href="#pug语法了解" class="headerlink" title="pug语法了解"></a><code>pug</code>语法了解</h4><ol><li><p>html标签, 注意缩进</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div</span><br><span class="line">    p Hello, world!</span><br><span class="line">    p Hello, pug.</span><br></pre></td></tr></table></figure></li><li><p>定义class或id</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">h1.title Test <span class="class"><span class="keyword">class</span> <span class="title">title</span></span></span><br><span class="line"><span class="class"><span class="title">h1</span>#<span class="title">title</span> <span class="title">Test</span> <span class="title">id</span> <span class="title">title</span></span></span><br></pre></td></tr></table></figure></li><li><p>标签属性, 存放于括号内</p> <figure class="highlight"><table><tr><td class="code"><pre><span class="line">img#name.class1.class2(src=&quot;/test.png&quot; alt=&quot;test&quot;)</span><br></pre></td></tr></table></figure></li><li><p>包含,方便代码复用</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html(lang=<span class="string">&#x27;en&#x27;</span>)</span><br><span class="line">    include _partial/head.pug</span><br></pre></td></tr></table></figure></li><li><p>继承, 方便模块化编写</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//- base.pug</span></span><br><span class="line">html</span><br><span class="line">    head</span><br><span class="line">        block title</span><br><span class="line">    body</span><br><span class="line">        block content</span><br><span class="line"><span class="comment">//- index.pug 使用extends继承以上模板，通过block覆盖或替换原有块block</span></span><br><span class="line"><span class="keyword">extends</span> base.pug</span><br><span class="line">  </span><br><span class="line">block title</span><br><span class="line">    title <span class="string">&quot;Test title&quot;</span></span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">    h1 Hello world!</span><br><span class="line">    block article</span><br></pre></td></tr></table></figure></li><li><p>定义变量</p> <figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//- 通过`- var`定义</span></span><br><span class="line">- <span class="keyword">var</span> intData = <span class="number">100</span></span><br><span class="line">- <span class="keyword">var</span> boolData = <span class="literal">false</span></span><br><span class="line">- <span class="keyword">var</span> stringData = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line"><span class="comment">//- 通过`=`引用</span></span><br><span class="line">p.int= intData</span><br><span class="line">p.bool= boolData</span><br><span class="line">p.stringData= stringData</span><br><span class="line"><span class="comment">//- 通过`#&#123;&#125;`连接其他字面量</span></span><br><span class="line">p #&#123;stringData&#125; is so good!</span><br></pre></td></tr></table></figure></li><li><p>条件结构</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> A</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> B</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li><li><p>迭代</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ol</span><br><span class="line">each item <span class="keyword">in</span> [<span class="string">&#x27;Sun&#x27;</span>, <span class="string">&#x27;Mon&#x27;</span>, <span class="string">&#x27;Tus&#x27;</span>, <span class="string">&#x27;Wen&#x27;</span>, <span class="string">&#x27;Thu&#x27;</span>, <span class="string">&#x27;Fri&#x27;</span>, <span class="string">&#x27;Sat&#x27;</span>]</span><br><span class="line">    li= item</span><br></pre></td></tr></table></figure></li><li><p>Mixin 用于编写函数</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//- 定义函数</span></span><br><span class="line">mixin menu-item(href, name)</span><br><span class="line">li</span><br><span class="line">    span.dot ●</span><br><span class="line">    a(href=href)= name</span><br><span class="line"><span class="comment">//- 调用函数</span></span><br><span class="line">+menu-item(<span class="string">&#x27;/About&#x27;</span>,<span class="string">&#x27;About&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>Javascript</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">script(type=<span class="string">&#x27;text/javascript&#x27;</span>).</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">&quot;Test&quot;</span></span><br><span class="line"><span class="keyword">var</span> enable = <span class="literal">true</span></span><br><span class="line"><span class="keyword">if</span> enable</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;nothing&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="scss介绍"><a href="#scss介绍" class="headerlink" title="scss介绍"></a><code>scss</code>介绍</h4><blockquote><p><code>scss</code>和<code>css</code>关系<br>scss 是 css的预处理器, 它的优势在于开发效率高, 对于一些样式复杂的站点, 用 scss 之类的工具生成代码比手写 css 快得多</p></blockquote><p>在这里我们通过<code>gulp</code>将<code>scss</code>转化为压缩的<code>css</code>, 即我们只用维护几个碎片的<code>scss</code>文件, 而不是直接修改<code>css</code>文件</p><h4 id="Hexo的变量"><a href="#Hexo的变量" class="headerlink" title="Hexo的变量"></a>Hexo的变量</h4><p>在模版中为了渲染出具体的内容需要使用Hexo中的变量</p><p>变量非常多, 建议看<a href="https://hexo.io/zh-cn/docs/variables">官方文档</a>按需使用</p><h4 id="Hexo的函数"><a href="#Hexo的函数" class="headerlink" title="Hexo的函数"></a>Hexo的函数</h4><p>在模版中也可以使用Hexo提供的函数, 可进行一些判断或作为工具</p><p>函数也非常多, 建议看<a href="https://hexo.io/zh-cn/docs/helpers">官方文档</a>按需使用</p></br><p>至此, 理论部分已经讲解完成, <a href="https://blog.xhyh.best/tutorial/hexo-theme-dev/">下一篇</a>实践篇将利用这些知识以实际例子讲述如何开发和修改主题</p>]]></content:encoded>
      
      
      <category domain="http://blog.xhyh.best/categories/tutorial/">tutorial</category>
      
      
      <category domain="http://blog.xhyh.best/tags/hexo/">hexo</category>
      
      <category domain="http://blog.xhyh.best/tags/hexo-theme/">hexo-theme</category>
      
      
      <comments>http://blog.xhyh.best/tutorial/hexo-theme-theory/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>用 Github Actions 将 Hexo 博客部署到 Github Page</title>
      <link>http://blog.xhyh.best/tutorial/zero-to-hexo2/</link>
      <guid>http://blog.xhyh.best/tutorial/zero-to-hexo2/</guid>
      <pubDate>Fri, 10 Apr 2020 02:43:08 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;a href=&quot;https://blog.xhyh.best/tutorial/zero-to-hexo1/&quot;&gt;上篇博客&lt;/a&gt;中已经实现在本地预览博客, 本篇会将本地博客部署到Github Page&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><a href="https://blog.xhyh.best/tutorial/zero-to-hexo1/">上篇博客</a>中已经实现在本地预览博客, 本篇会将本地博客部署到Github Page</p><a id="more"></a><h4 id="配置Github-Actions"><a href="#配置Github-Actions" class="headerlink" title="配置Github Actions"></a>配置Github Actions</h4><p><code>Github Actions</code> 是 Github 推出的一款持续集成工具, 这里我们可以用来发布博客到<code>Github Page</code></p><ol><li><p>新建workflow文件</p><p>只有当项目中<code>.github/workflows</code>目录下存在以<code>.yml</code>结尾的配置才会触发<code>Github Actions</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Blog</span><br><span class="line">mkdir -p .github/workflows</span><br><span class="line">touch .github/workflows/deploy.yml</span><br></pre></td></tr></table></figure></li><li><p>配置<code>deploy.yml</code>文件</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># workflow name</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">To</span> <span class="string">Github</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当有 push 到仓库和外部触发的时候就运行</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">repository_dispatch</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ACCESS_TOKEN</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span> <span class="string">Public</span> <span class="string">To</span> <span class="string">Pages</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> </span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># check it to your workflow can access it</span></span><br><span class="line">    <span class="comment"># from: https://github.com/actions/checkout</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎️</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span> <span class="comment"># If you&#x27;re using actions/checkout@v2 you must set persist-credentials    to false in most cases for the deployment to work correctly.</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">persist-credentials:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># from: https://github.com/actions/setup-node  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span> <span class="number">10.</span><span class="string">x</span> <span class="string">🔧</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;10.x&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span> <span class="string">Dependencies</span> <span class="string">🔧</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># from https://github.com/marketplace/actions/deploy-to-github-pages</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">🚀</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@releases/v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ACCESS_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span> </span><br><span class="line">        <span class="attr">BRANCH:</span> <span class="string">gh-pages</span> <span class="comment"># The branch the action should deploy to.</span></span><br><span class="line">        <span class="attr">FOLDER:</span> <span class="string">public</span> <span class="comment"># The folder the action should deploy.</span></span><br><span class="line">        <span class="attr">COMMIT_MESSAGE:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.head_commit.message</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>最新版可以查看<a href="https://github.com/achjqz/blog/blob/master/.github/workflows/deploy.yml">我的配置</a></p></li><li><p>流程介绍</p><p>根据上面的配置可以看到主要分为4步</p></li></ol><ul><li>Checkout 拉取你的博客, 默认拉取本项目</li><li>安装Node环境</li><li>安装Hexo依赖</li><li>部署到Github Page</li></ul><h4 id="生成ssh私钥"><a href="#生成ssh私钥" class="headerlink" title="生成ssh私钥"></a>生成ssh私钥</h4><p>有了ssh私钥可以实现免密码将博客推送到Github</p><p>具体配置可以参照<a href="https://blog.xhyh.best/tutorial/linux-ssh/">Linux下的ssh配置</a>, 只用完成第一部分ssh生成</p><h4 id="将公钥添加到Github"><a href="#将公钥添加到Github" class="headerlink" title="将公钥添加到Github"></a>将公钥添加到Github</h4><p>在<code>push</code>到Github时需要验证身份, 添加ssh公钥到Github, 本地使用私钥验证便有权限操控仓库</p><p>在Github账号设置中添加<code>ssh/id_rsa.pub</code>文件中的内容<br><img src="https://pic.rmb.bdstatic.com/6b5c9c8d97447ab0aad3da6af5439897.png" alt="ssh"></p><h4 id="生成ACCESS-SECRET"><a href="#生成ACCESS-SECRET" class="headerlink" title="生成ACCESS_SECRET"></a>生成ACCESS_SECRET</h4><p>有了ACCESS_SECRET, <code>Github Actions</code> 才有权限写入仓库</p><p>可以在Github账户设置中生成一个<br><img src="https://pic.rmb.bdstatic.com/3e96456f3136c30e6daee91f21d00176.png" alt="token"></p><p>至少必须给<code>read, write repo</code>的权限<br>保存好生成的一串数字字母</p><h4 id="在Github上新建仓库"><a href="#在Github上新建仓库" class="headerlink" title="在Github上新建仓库"></a>在Github上新建仓库</h4><ol><li>进入<a href="https://github.com/new">新建仓库页面</a></li><li>新建一个仓库, public和private均可, 但推荐public, 否则Github Page需要另外新建一个仓库<br><img src="https://pic.rmb.bdstatic.com/245f3c54feac8e15db0dae57ff18533c.png" alt="new repo"></li><li>在项目设置中添加<code>ACCESS_SECRET</code>, Value就是上面生成好的token<br><img src="https://pic.rmb.bdstatic.com/5b364db983b09727ee07df2a9dc54a99.png" alt="secret"></li><li>根据提示push项目</li></ol><h4 id="查看Github-Actions工作情况"><a href="#查看Github-Actions工作情况" class="headerlink" title="查看Github Actions工作情况"></a>查看<code>Github Actions</code>工作情况</h4><p>当push项目后, 在Actions选项中能看到已经自动运行部署<br><img src="https://pic.rmb.bdstatic.com/8cdc7826c558371149a5198b9fd6e43c.png" alt="workflow"></p><p>如果有报错信息, 则根据信息修改</p><h4 id="自定义域名设置"><a href="#自定义域名设置" class="headerlink" title="自定义域名设置"></a>自定义域名设置</h4><p>在项目Settings中可以<a href="https://help.github.com/en/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site">设置域名</a>并开启https<br><img src="https://pic.rmb.bdstatic.com/2e181936fe576fb0f0cf484f87d538ad.png" alt="setting"></p><blockquote><p>注意若设置的是子域名, 则需要在DNS设置中加入CNAME规则, 使子域名指向<code>username.github.io</code></p></blockquote><h4 id="写作发布流程"><a href="#写作发布流程" class="headerlink" title="写作发布流程"></a>写作发布流程</h4><p>至此, 应该能使用<code>username.github.io</code>访问你的博客了, 后续写作的流程是</p><ol><li><code>hexo new &#39;Hello world&#39;</code> 生成新文章</li><li>写作</li><li><code>git add</code>,  <code>git commit</code>, <code>git push</code></li><li><code>Github Actions</code> 自动部署</li></ol>]]></content:encoded>
      
      
      <category domain="http://blog.xhyh.best/categories/tutorial/">tutorial</category>
      
      
      <category domain="http://blog.xhyh.best/tags/hexo/">hexo</category>
      
      <category domain="http://blog.xhyh.best/tags/blog/">blog</category>
      
      
      <comments>http://blog.xhyh.best/tutorial/zero-to-hexo2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello new blog</title>
      <link>http://blog.xhyh.best/talk/hello-new-blog/</link>
      <guid>http://blog.xhyh.best/talk/hello-new-blog/</guid>
      <pubDate>Wed, 08 Apr 2020 10:50:46 GMT</pubDate>
      
      <description>&lt;p&gt;最近闲了下来, 计划慢慢输出一点这段时间学习的内容, 便重新打理了一下博客&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>最近闲了下来, 计划慢慢输出一点这段时间学习的内容, 便重新打理了一下博客</p><a id="more"></a><h4 id="为什么不使用老博客"><a href="#为什么不使用老博客" class="headerlink" title="为什么不使用老博客"></a>为什么不使用老博客</h4><ol><li>老博客基于<code>diygod</code>主题改造, 虽尽力保持简洁了很多, 但一段时间后发现还是不利于文章阅读</li><li><code>diygod</code> 主题过于复杂, 不利于修改和维护</li><li>老博客采用源码私库备份, <code>Github page</code> 部署的策略, 但非常不利于维护, 发布文章也不方便</li></ol><h4 id="新博客的优势"><a href="#新博客的优势" class="headerlink" title="新博客的优势"></a>新博客的优势</h4><ol><li>更加简洁的外观</li><li>基于<a href="https://github.com/achjqz/hexo-theme-apollo">apollo</a>主题修改, 额外支持了<code>tag</code>显示和<code>category</code>界面</li><li>使用<code>Github Actions</code>持续集成, 语雀云端写作, 维护和写作更加方便</li></ol><h4 id="新博客的内容"><a href="#新博客的内容" class="headerlink" title="新博客的内容"></a>新博客的内容</h4><ol><li>旧博客内容的整理, 升级</li><li>各种折腾的笔记</li><li>学习知识的整理输出</li><li>生活</li></ol>]]></content:encoded>
      
      
      <category domain="http://blog.xhyh.best/categories/talk/">talk</category>
      
      
      <category domain="http://blog.xhyh.best/tags/blog/">blog</category>
      
      <category domain="http://blog.xhyh.best/tags/summary/">summary</category>
      
      
      <comments>http://blog.xhyh.best/talk/hello-new-blog/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Linux 下 ssh 的配置</title>
      <link>http://blog.xhyh.best/tutorial/linux-ssh/</link>
      <guid>http://blog.xhyh.best/tutorial/linux-ssh/</guid>
      <pubDate>Fri, 28 Sep 2018 08:25:43 GMT</pubDate>
      
      <description>&lt;p&gt;本文带你了解ssh, 如何实现ssh免密码登陆? 如何使用ssh做端口转发, 跳板?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>本文带你了解ssh, 如何实现ssh免密码登陆? 如何使用ssh做端口转发, 跳板?</p><a id="more"></a><h4 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h4><p>本文以Linux为例, 其他平台可参照<a href="https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">Github官方文档</a>操作</p><ol><li><p>生成2048位的密匙 <code>passphrase</code> 可以设置为空</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>设置权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .ssh directory: 700 (drwx------)</span></span><br><span class="line">chmod 700 .ssh</span><br><span class="line"><span class="comment"># public key (.pub file): 644 (-rw-r--r--)</span></span><br><span class="line">chmod 644 .ssh/id_rsa.pub</span><br><span class="line"><span class="comment"># private key (id_rsa): 600 (-rw-------)</span></span><br><span class="line">chmod 600 .ssh/id_rsa</span><br></pre></td></tr></table></figure></li></ol><h4 id="服务器设置"><a href="#服务器设置" class="headerlink" title="服务器设置"></a>服务器设置</h4><ol><li><p>将公匙用<code>ssh-copy-id</code> 命令传给服务器,实现ssh免密码登陆</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@serverip</span><br></pre></td></tr></table></figure></li><li><p>服务器端设置<code>/etc/ssh/sshd_config</code>, 使得不能用密码登陆root用户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置</span></span><br><span class="line">PermitRootLogin yes</span><br><span class="line">PasswordAuthentication no</span><br></pre></td></tr></table></figure></li><li><p>本地新建一个config文件,填入服务器信息,实现简化登陆</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch ~/.ssh/config</span><br><span class="line"><span class="comment"># config file</span></span><br><span class="line">Host name</span><br><span class="line">  Hostname serverip</span><br><span class="line">  User root</span><br></pre></td></tr></table></figure></li><li><p>查看服务器ssh登陆日志</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp name:/var/<span class="built_in">log</span>/btmp btmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选日志信息, 实现显示 次数+ IP</span></span><br><span class="line">lastb -f btmp | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> | sort | uniq -c | sort -nr | more</span><br></pre></td></tr></table></figure></li></ol><h4 id="ssh高级操作"><a href="#ssh高级操作" class="headerlink" title="ssh高级操作"></a>ssh高级操作</h4><ol><li><p>实现端口转发,将服务器用作代理访问其他网站</p><p>命令: <code>ssh -N -f -L  \&lt;local port&gt;:\&lt;remote host&gt;:\&lt;remote port&gt; \&lt;SSH hostname&gt;</code></p><p>这样就将IP为remote host机器的remote port通过中间服务器映射到本地机器的localport</p><blockquote><p>解释:<br>-N 指这个连接不需要执行任何命令。仅仅做端口转发<br>-f 在后台运行<br>-L 做本地映射端口，被冒号分割的三个部分含义分别是<br>需要使用的本地端口号<br>​需要访问的目标机器IP地址<br>需要访问的目标机器端口</p></blockquote></li><li><p>将私匙添加到ssh-agent,避免每次都要输密码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># start ssh-agent</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(ssh-agent -s)</span>&quot;</span></span><br><span class="line"><span class="comment"># add ssh key</span></span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></li><li><p>跳板登陆<br>本地A, 跳板服务器B, 目标服务器C</p><p>首先将本地A均可以ssh登陆B和C</p><p>当连接服务器B时,使用ssh -A命令,  以打开agent forwarding</p><p>当服务器B连接服务器C时, 就不用再输密码了, 相当于这台服务器充当了转发信息的功能,把私钥操作的request转发到了本机的agent, 然后再将agent的response原路返回</p></li></ol>]]></content:encoded>
      
      
      <category domain="http://blog.xhyh.best/categories/tutorial/">tutorial</category>
      
      
      <category domain="http://blog.xhyh.best/tags/linux/">linux</category>
      
      <category domain="http://blog.xhyh.best/tags/ssh/">ssh</category>
      
      <category domain="http://blog.xhyh.best/tags/ssh-agent/">ssh-agent</category>
      
      
      <comments>http://blog.xhyh.best/tutorial/linux-ssh/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>零基础搭建 Hexo 博客</title>
      <link>http://blog.xhyh.best/tutorial/zero-to-hexo1/</link>
      <guid>http://blog.xhyh.best/tutorial/zero-to-hexo1/</guid>
      <pubDate>Sat, 14 Apr 2018 14:18:32 GMT</pubDate>
      
      <description>&lt;p&gt;用Hexo + Github来搭建个人博客已经很普遍了, 正好Github action发布, 可以利用持续集成使得部署更加轻松 &lt;br&gt;本文从零开始, 搭建hexo博客并用Github Actions发布到Github Page&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>用Hexo + Github来搭建个人博客已经很普遍了, 正好Github action发布, 可以利用持续集成使得部署更加轻松 <br>本文从零开始, 搭建hexo博客并用Github Actions发布到Github Page</p><a id="more"></a><h4 id="工具介绍及安装"><a href="#工具介绍及安装" class="headerlink" title="工具介绍及安装"></a>工具介绍及安装</h4><ol><li><code>Git</code>  版本管理工具, 用于管理写的文章, 并和Github仓库建立连接, <a href="https://git-scm.com/">官网安装</a></li><li><code>node.js</code>  为hexo提供JavaScript环境 <a href="https://nodejs.org/">官网安装</a></li><li><code>Github Pages</code>   Github 官网提供的一个服务, 将博客部署到它上面, 避免自己购买服务器, 无需安装</li></ol><h4 id="hexo和主题安装"><a href="#hexo和主题安装" class="headerlink" title="hexo和主题安装"></a>hexo和主题安装</h4><blockquote><p>hexo 和 hexo 主题的关系:<br>hexo 主题定义了博客的界面布局, 颜色, 脚本等<br>hexo 将内容交给hexo 主题生成对应的排版</p></blockquote><ol><li><p>hexo 安装 <a href="https://hexo.io/">官方文档</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li><li><p>生成默认博客</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>下载主题</p><p>这里以<code>apollo</code>主题为例</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-renderer-pug\</span><br><span class="line"> hexo-generator-feed \</span><br><span class="line"> hexo-generator-sitemap \</span><br><span class="line"> hexo-browsersync  \</span><br><span class="line"> hexo-generator-archive</span><br><span class="line">npm i hexo-theme-apollo</span><br></pre></td></tr></table></figure><blockquote><p>hexo 5.0 支持使用npm安装主题</p></blockquote></li></ol><h4 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h4><p>博客的配置主要都在<code>_config.yml</code>中</p><ol><li><p>主题相关配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"><span class="comment"># 修改主题名称</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">apollo</span></span><br></pre></td></tr></table></figure><blockquote><p>hexo 5.0 主题的具体配置移到了_config.apollo.yml中<br>更多配置说明请查看<a href="https://github.com/achjqz/hexo-theme-apollo/blob/master/docs/doc-zh.md">apollo</a>文档和参考<a href="https://github.com/achjqz/blog/blob/master/_config.yml">我的配置</a></p></blockquote></li><li><p>博客url配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">http://blog.xhyh.best</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:category/:urlname/</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year:month:day-:title.md</span></span><br></pre></td></tr></table></figure><blockquote><p>为方便整理, 生成新文章会有时间前缀<br>而我们不希望在文章链接中包含时间, 这里使用了urlname, 需要在每篇文章头中添加这个变量</p></blockquote></li></ol><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ol><li><code>hexo clean</code>  清除缓存和生成的public文件夹</li><li><code>hexo g</code>  generator  生成public文件</li><li><code>hexo s</code>  server     本地预览, 加参数<code>--debug</code>可查看调试信息</li><li><code>hexo d</code>   deploy   部署到github</li></ol><h4 id="增加category-tag页面"><a href="#增加category-tag页面" class="headerlink" title="增加category/tag页面"></a>增加category/tag页面</h4><p>默认并没有category, tag页面, 需要在命令行中输入命令添加</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page category</span><br></pre></td></tr></table></figure></br><p><a href="https://blog.xhyh.best/tutorial/zero-to-hexo2/">下一篇</a>将介绍如何使用 Github Actions 部署博客</p>]]></content:encoded>
      
      
      <category domain="http://blog.xhyh.best/categories/tutorial/">tutorial</category>
      
      
      <category domain="http://blog.xhyh.best/tags/hexo/">hexo</category>
      
      <category domain="http://blog.xhyh.best/tags/blog/">blog</category>
      
      
      <comments>http://blog.xhyh.best/tutorial/zero-to-hexo1/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
