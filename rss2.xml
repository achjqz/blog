<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>潇晗宇浩的博客</title>
    <link>http://blog.xhyh.best/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>记录生活</description>
    <pubDate>Tue, 28 Apr 2020 09:52:19 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>汇编入门-x86和x86_64函数调用对比-64位篇</title>
      <link>http://blog.xhyh.best/study/assembly-function-call-64/</link>
      <guid>http://blog.xhyh.best/study/assembly-function-call-64/</guid>
      <pubDate>Tue, 28 Apr 2020 03:19:33 GMT</pubDate>
      <description>
      
        &lt;p&gt;原来一直对64位程序的汇编函数调用比较熟悉, 32位程序的函数调用总觉得十分复杂. 本文主要对64位程序在不同优化级别下的汇编函数调用实现情况, 后篇再结合32位进行对比分析&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>原来一直对64位程序的汇编函数调用比较熟悉, 32位程序的函数调用总觉得十分复杂. 本文主要对64位程序在不同优化级别下的汇编函数调用实现情况, 后篇再结合32位进行对比分析</p><a id="more"></a><h3 id="说明">说明</h3><h4 id="汇编格式">汇编格式</h4><p>如果对汇编指令还不熟悉可以看<a href="https://blog.xhyh.best/study/assembly-instructions/">上一篇</a>文章, 本文还是采用<code>AT&amp;T</code>汇编格式</p><h4 id="优化级别">优化级别</h4><p>在编译时, 可以指定代码的优化级别, 大致优化级别有如下几个</p><ul><li>-O (相当于 -O1)</li><li>-O0 (不优化, 默认级别)</li><li>-O1 (不影响编译速度的前提下，尽量采用一些优化算法降低代码大小和可执行代码的运行速度)</li><li>-O2 (牺牲部分编译速度, 优化更多)</li><li>-O3 (采取很多向量化算法，提高代码的并行执行程度)</li><li>-Ofast (不会严格遵循语言标准, 优化更多)</li><li>-Og (提供合理的优化水平，同时产生较好的可调试信息)</li><li>-Os (尽量降低目标代码的大小)</li></ul><blockquote><p>如果优化级别太高会出现和源代码完全不符的情况, 如函数调用会被优化掉, 出现汇编中没有调用函数的现象</p></blockquote><p>本文主要分析不优化和<code>-Og</code>两种情况</p><h4 id="源代码">源代码</h4><p>为了简便, 下面分析将采用以下源代码</p><div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1"></a><span class="pp">#include</span><span class="im">&lt;stdio.h&gt;</span></span><span id="cb1-2"><a href="#cb1-2"></a></span><span id="cb1-3"><a href="#cb1-3"></a><span class="dt">int</span> add(<span class="dt">int</span> a, <span class="dt">int</span> b) {</span><span id="cb1-4"><a href="#cb1-4"></a>    <span class="dt">int</span> array[<span class="dv">10</span>];</span><span id="cb1-5"><a href="#cb1-5"></a>    <span class="cf">return</span> a + b  + array[<span class="dv">2</span>] + array[<span class="dv">1</span>];</span><span id="cb1-6"><a href="#cb1-6"></a>}</span><span id="cb1-7"><a href="#cb1-7"></a></span><span id="cb1-8"><a href="#cb1-8"></a><span class="dt">int</span> main() {</span><span id="cb1-9"><a href="#cb1-9"></a>    <span class="dt">int</span> array[] = {<span class="dv">4</span>, <span class="dv">5</span>, <span class="dv">6</span>};</span><span id="cb1-10"><a href="#cb1-10"></a>    <span class="dt">int</span> a = <span class="dv">7</span>, b = <span class="dv">8</span>;</span><span id="cb1-11"><a href="#cb1-11"></a>    printf(<span class="st">&quot;sum: %d</span><span class="sc">\n</span><span class="st">&quot;</span>, add(a, b));</span><span id="cb1-12"><a href="#cb1-12"></a>    <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; <span class="dv">3</span>; i++) {</span><span id="cb1-13"><a href="#cb1-13"></a>        printf(<span class="st">&quot;%d &quot;</span>, array[i]);</span><span id="cb1-14"><a href="#cb1-14"></a>    }</span><span id="cb1-15"><a href="#cb1-15"></a>}</span></code></pre></div><h3 id="x86_64程序分析">x86_64程序分析</h3><h4 id="og优化级别下">-Og优化级别下</h4><p>首先看<code>add</code>函数的汇编代码(已省去无关指令)</p><div class="sourceCode" id="cb2"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb2-1"><a href="#cb2-1"></a>subq<span class="bn">    $56, </span>%<span class="kw">rsp</span></span><span id="cb2-2"><a href="#cb2-2"></a>/* 栈保护代码</span><span id="cb2-3"><a href="#cb2-3"></a>movl<span class="bn">    $40, </span>%<span class="kw">edx</span></span><span id="cb2-4"><a href="#cb2-4"></a><span class="bu">movq</span>    %<span class="kw">fs</span>:(%<span class="kw">rdx</span>), %<span class="kw">rax</span></span><span id="cb2-5"><a href="#cb2-5"></a><span class="bu">movq</span>    %<span class="kw">rax</span>, <span class="dv">40</span>(%<span class="kw">rsp</span>)</span><span id="cb2-6"><a href="#cb2-6"></a>*/</span><span id="cb2-7"><a href="#cb2-7"></a>xorl    %<span class="kw">eax</span>, %<span class="kw">eax</span></span><span id="cb2-8"><a href="#cb2-8"></a>addl    %<span class="kw">esi</span>, %<span class="kw">edi</span>      // a + b</span><span id="cb2-9"><a href="#cb2-9"></a>addl    <span class="dv">8</span>(%<span class="kw">rsp</span>), %<span class="kw">edi</span>   // array[<span class="dv">2</span>]</span><span id="cb2-10"><a href="#cb2-10"></a>movl    %<span class="kw">edi</span>, %<span class="kw">eax</span></span><span id="cb2-11"><a href="#cb2-11"></a>addl    <span class="dv">4</span>(%<span class="kw">rsp</span>), %<span class="kw">eax</span>   // array[<span class="dv">1</span>]</span><span id="cb2-12"><a href="#cb2-12"></a>/* 栈保护代码</span><span id="cb2-13"><a href="#cb2-13"></a><span class="bu">movq</span>    <span class="dv">40</span>(%<span class="kw">rsp</span>), %<span class="kw">rcx</span></span><span id="cb2-14"><a href="#cb2-14"></a>xorq    %<span class="kw">fs</span>:(%<span class="kw">rdx</span>), %<span class="kw">rcx</span></span><span id="cb2-15"><a href="#cb2-15"></a><span class="bu">jne</span> .L4</span><span id="cb2-16"><a href="#cb2-16"></a>*/</span><span id="cb2-17"><a href="#cb2-17"></a>addq<span class="bn">    $56, </span>%<span class="kw">rsp</span></span><span id="cb2-18"><a href="#cb2-18"></a><span class="bu">ret</span></span></code></pre></div><blockquote><p>可以看到函数中存在栈保护代码, 这里暂且不说, 与函数调用关系不大, 后面的代码中将省略</p></blockquote><p>首先看出程序会计算出<code>add</code>函数内需要的栈空间, 这里我们开了长度为10的<code>int</code>数组, 需要40字节, 栈保护需要8字节, 在使用<code>call</code>调用函数时已经将返回地址8字节压入栈中, 为了使栈内存和16字节对齐, 所以第一步将栈顶指针下移了56字节(56+8 是16的倍数)</p><p><code>rsp + 40</code>的位置用于存放栈保护内容, 而<code>rsp</code>, <code>rsp + 4</code> 则依次存放数组元素<code>array[0]</code>, <code>array[1]</code></p><p><code>eax</code>寄存器作为返回值, 首先通过<code>xor</code>置0</p><p>函数的参数依次存放在<code>edi</code>, <code>esi</code> 寄存器中, 使用<code>add</code>指令累加</p><p>最后将栈指针上移56字节, 回到调用函数前的状态</p><p>再看<code>main</code>函数</p><div class="sourceCode" id="cb3"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb3-1"><a href="#cb3-1"></a>pushq   %<span class="kw">rbx</span></span><span id="cb3-2"><a href="#cb3-2"></a>subq<span class="bn">    $32, </span>%<span class="kw">rsp</span></span><span id="cb3-3"><a href="#cb3-3"></a>movl<span class="bn">    $4, </span><span class="dv">12</span>(%<span class="kw">rsp</span>)</span><span id="cb3-4"><a href="#cb3-4"></a>movl<span class="bn">    $5, </span><span class="dv">16</span>(%<span class="kw">rsp</span>)</span><span id="cb3-5"><a href="#cb3-5"></a>movl<span class="bn">    $6, </span><span class="dv">20</span>(%<span class="kw">rsp</span>)</span><span id="cb3-6"><a href="#cb3-6"></a>movl<span class="bn">    $8, </span>%<span class="kw">esi</span></span><span id="cb3-7"><a href="#cb3-7"></a>movl<span class="bn">    $7, </span>%<span class="kw">edi</span></span><span id="cb3-8"><a href="#cb3-8"></a><span class="bu">call</span>    <span class="bu">add</span></span><span id="cb3-9"><a href="#cb3-9"></a>movl    %<span class="kw">eax</span>, %<span class="kw">edx</span></span><span id="cb3-10"><a href="#cb3-10"></a>leaq    .LC0(%rip), %<span class="kw">rsi</span></span><span id="cb3-11"><a href="#cb3-11"></a>movl<span class="bn">    $1, </span>%<span class="kw">edi</span></span><span id="cb3-12"><a href="#cb3-12"></a>movl<span class="bn">    $0, </span>%<span class="kw">eax</span></span><span id="cb3-13"><a href="#cb3-13"></a><span class="bu">call</span>    __printf_chk@PLT</span></code></pre></div><p>除了一开始在栈上保存了<code>rbx</code>以外, 其它步骤基本和<code>add</code>函数一致, 也可以看到函数传参的过程(<code>mov</code>到相应寄存器)</p><blockquote><p>注意这里编译器自动优化, 将printf转换成了更安全的__printf_chk(int flag, const char * format)函数, 所以会多一个参数flag</p></blockquote><h4 id="无优化下">无优化下</h4><p>首先还是先看<code>add</code>函数</p><div class="sourceCode" id="cb4"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb4-1"><a href="#cb4-1"></a>pushq   %<span class="kw">rbp</span></span><span id="cb4-2"><a href="#cb4-2"></a><span class="bu">movq</span>    %<span class="kw">rsp</span>, %<span class="kw">rbp</span></span><span id="cb4-3"><a href="#cb4-3"></a>subq<span class="bn">    $64, </span>%<span class="kw">rsp</span></span><span id="cb4-4"><a href="#cb4-4"></a>movl    %<span class="kw">edi</span>, <span class="dv">-52</span>(%<span class="kw">rbp</span>)</span><span id="cb4-5"><a href="#cb4-5"></a>movl    %<span class="kw">esi</span>, <span class="dv">-56</span>(%<span class="kw">rbp</span>)</span><span id="cb4-6"><a href="#cb4-6"></a>/* 栈保护</span><span id="cb4-7"><a href="#cb4-7"></a><span class="bu">movq</span>    %<span class="kw">fs</span>:<span class="dv">40</span>, %<span class="kw">rax</span></span><span id="cb4-8"><a href="#cb4-8"></a><span class="bu">movq</span>    %<span class="kw">rax</span>, <span class="dv">-8</span>(%<span class="kw">rbp</span>)</span><span id="cb4-9"><a href="#cb4-9"></a>*/</span><span id="cb4-10"><a href="#cb4-10"></a>xorl    %<span class="kw">eax</span>, %<span class="kw">eax</span></span><span id="cb4-11"><a href="#cb4-11"></a>movl    <span class="dv">-52</span>(%<span class="kw">rbp</span>), %<span class="kw">edx</span></span><span id="cb4-12"><a href="#cb4-12"></a>movl    <span class="dv">-56</span>(%<span class="kw">rbp</span>), %<span class="kw">eax</span></span><span id="cb4-13"><a href="#cb4-13"></a>addl    %<span class="kw">eax</span>, %<span class="kw">edx</span></span><span id="cb4-14"><a href="#cb4-14"></a>movl    <span class="dv">-40</span>(%<span class="kw">rbp</span>), %<span class="kw">eax</span></span><span id="cb4-15"><a href="#cb4-15"></a>addl    %<span class="kw">eax</span>, %<span class="kw">edx</span></span><span id="cb4-16"><a href="#cb4-16"></a>movl    <span class="dv">-44</span>(%<span class="kw">rbp</span>), %<span class="kw">eax</span></span><span id="cb4-17"><a href="#cb4-17"></a>addl    %<span class="kw">edx</span>, %<span class="kw">eax</span></span><span id="cb4-18"><a href="#cb4-18"></a>/* 栈保护</span><span id="cb4-19"><a href="#cb4-19"></a><span class="bu">movq</span>    <span class="dv">-8</span>(%<span class="kw">rbp</span>), %<span class="kw">rcx</span></span><span id="cb4-20"><a href="#cb4-20"></a>xorq    %<span class="kw">fs</span>:<span class="dv">40</span>, %<span class="kw">rcx</span></span><span id="cb4-21"><a href="#cb4-21"></a>*/</span><span id="cb4-22"><a href="#cb4-22"></a><span class="bu">leave</span></span><span id="cb4-23"><a href="#cb4-23"></a><span class="bu">ret</span></span></code></pre></div><p>与优化过的代码相比, 最大的变化就是使用了<code>rbp</code>寄存器</p><p><code>rbp</code>存储当前函数的基地址, 一个正在执行的函数A, <code>rsp</code>是 A 的栈顶, <code>rbp</code> 是 A 的栈底 <img src="https://pic.rmb.bdstatic.com/d54c105690f8ff541982deae78df5457.png" alt="stack-frame" /></p><p>函数调用规定了被调用者需存储调用者的<code>rbp</code>信息(Callee Saved), 并且在函数执行结束时恢复</p><p>于是, 使用<code>rbp</code>这一套的模板大概如下</p><div class="sourceCode" id="cb5"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb5-1"><a href="#cb5-1"></a>pushq   %<span class="kw">rbp</span> // 存储调用者的rbp</span><span id="cb5-2"><a href="#cb5-2"></a><span class="bu">movq</span>    %<span class="kw">rsp</span>, %<span class="kw">rbp</span> // 将rbp设置为当前函数的基地址</span><span id="cb5-3"><a href="#cb5-3"></a>subq<span class="bn">    $64, </span>%<span class="kw">rsp</span> // 为局部变量预留空间</span><span id="cb5-4"><a href="#cb5-4"></a></span><span id="cb5-5"><a href="#cb5-5"></a>... // 使用rbp作为内存寻址的基地址</span><span id="cb5-6"><a href="#cb5-6"></a></span><span id="cb5-7"><a href="#cb5-7"></a><span class="bu">leave</span> // <span class="bu">mov</span> %<span class="kw">rbp</span>, %<span class="kw">rsp</span> 和 <span class="bu">pop</span> %<span class="kw">rbp</span> 指令的结合 </span></code></pre></div><blockquote><p>可以看到, 尽管使用rbp寻址, 但仍有subq $64, %rsp操作, 这是为了避免在调用函数时可能的push操作造成和局部变量数据冲突</p></blockquote><h4 id="多参数的情况">多参数的情况</h4><p>在64位程序中, 函数的参数会依次存在<code>%rdi, %rsi, %rdx, %rcx, %r8, %r9</code>, 这6个寄存器中, 如果参数多于6个怎么处理呢? 下面看一个例子</p><p>修改<code>add</code>函数接收7个参数</p><div class="sourceCode" id="cb6"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb6-1"><a href="#cb6-1"></a><span class="dt">int</span> add(<span class="dt">int</span> a, <span class="dt">int</span> b, <span class="dt">int</span> c, <span class="dt">int</span> d, <span class="dt">int</span> e, <span class="dt">int</span> f, <span class="dt">int</span> g) {</span><span id="cb6-2"><a href="#cb6-2"></a>    <span class="dt">int</span> array[<span class="dv">10</span>];</span><span id="cb6-3"><a href="#cb6-3"></a>    <span class="cf">return</span> a + b + c + d + e + f + g + array[<span class="dv">2</span>] + array[<span class="dv">1</span>];</span><span id="cb6-4"><a href="#cb6-4"></a>}</span></code></pre></div><p>对应的汇编代码为(-Og优化)</p><div class="sourceCode" id="cb7"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb7-1"><a href="#cb7-1"></a>// <span class="bu">add</span> 函数</span><span id="cb7-2"><a href="#cb7-2"></a>subq<span class="bn">    $56, </span>%<span class="kw">rsp</span></span><span id="cb7-3"><a href="#cb7-3"></a>addl    %<span class="kw">esi</span>, %<span class="kw">edi</span> //a + b</span><span id="cb7-4"><a href="#cb7-4"></a>addl    %<span class="kw">edx</span>, %<span class="kw">edi</span> // c</span><span id="cb7-5"><a href="#cb7-5"></a>addl    %<span class="kw">ecx</span>, %<span class="kw">edi</span> // d</span><span id="cb7-6"><a href="#cb7-6"></a>addl    %r8d, %<span class="kw">edi</span> // e</span><span id="cb7-7"><a href="#cb7-7"></a>addl    %r9d, %<span class="kw">edi</span> // f</span><span id="cb7-8"><a href="#cb7-8"></a>movl    %<span class="kw">edi</span>, %<span class="kw">eax</span>  </span><span id="cb7-9"><a href="#cb7-9"></a>addl    <span class="dv">64</span>(%<span class="kw">rsp</span>), %<span class="kw">eax</span> // g</span><span id="cb7-10"><a href="#cb7-10"></a>addl    <span class="dv">8</span>(%<span class="kw">rsp</span>), %<span class="kw">eax</span> // array[<span class="dv">1</span>]</span><span id="cb7-11"><a href="#cb7-11"></a>addl    <span class="dv">4</span>(%<span class="kw">rsp</span>), %<span class="kw">eax</span> // array[<span class="dv">0</span>]</span><span id="cb7-12"><a href="#cb7-12"></a>addq<span class="bn">    $56, </span>%<span class="kw">rsp</span></span><span id="cb7-13"><a href="#cb7-13"></a></span><span id="cb7-14"><a href="#cb7-14"></a>// main 函数</span><span id="cb7-15"><a href="#cb7-15"></a>pushq<span class="bn">   $0       </span>// g</span><span id="cb7-16"><a href="#cb7-16"></a>movl<span class="bn">    $0, </span>%r9d // f</span><span id="cb7-17"><a href="#cb7-17"></a>movl<span class="bn">    $0, </span>%r8d // e</span><span id="cb7-18"><a href="#cb7-18"></a>movl<span class="bn">    $0, </span>%<span class="kw">ecx</span> // d</span><span id="cb7-19"><a href="#cb7-19"></a>movl<span class="bn">    $0, </span>%<span class="kw">edx</span> // c</span><span id="cb7-20"><a href="#cb7-20"></a>movl<span class="bn">    $8, </span>%<span class="kw">esi</span> // b</span><span id="cb7-21"><a href="#cb7-21"></a>movl<span class="bn">    $7, </span>%<span class="kw">edi</span> // a</span><span id="cb7-22"><a href="#cb7-22"></a><span class="bu">call</span>    <span class="bu">add</span></span><span id="cb7-23"><a href="#cb7-23"></a>addq<span class="bn">    $16, </span>%<span class="kw">rsp</span></span></code></pre></div><p>可以看到, 在main函数中通过<code>push</code>操作将第7个参数压栈, 调用完成后通过<code>add</code>释放栈空间 这也是上面说的为什么即使有<code>rbp</code>作为基地址, 仍然要移动<code>rsp</code>的原因</p><p></br></p><p>本文大致讲了两种函数调用的方式, 可以看出, 仅使用<code>rsp</code>代码会简洁不少, 而<code>rbp</code>方式仅仅是方便于调试, 所以在开了优化的情况下, 一般会被编译为<code>rsp</code>方式</p><p>下一篇将讲述32位程序的情况, 并与64位程序做一个对比总结</p>]]></content:encoded>
      
      <comments>http://blog.xhyh.best/study/assembly-function-call-64/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MPV视频播放器配置与插件优化</title>
      <link>http://blog.xhyh.best/tutorial/mpv-config/</link>
      <guid>http://blog.xhyh.best/tutorial/mpv-config/</guid>
      <pubDate>Mon, 27 Apr 2020 01:36:19 GMT</pubDate>
      <description>
      
        &lt;p&gt;原来在Windows下一直用potplayer作为视频播放器, 也没发现什么大问题, 无广告, 支持格式全. 然而最近在倍速播放视频时声音老是出问题, 便搜寻到了一款更简洁的播放器MPV, 也是因为过于简洁, 所以需要配置插件做优化&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>原来在Windows下一直用potplayer作为视频播放器, 也没发现什么大问题, 无广告, 支持格式全. 然而最近在倍速播放视频时声音老是出问题, 便搜寻到了一款更简洁的播放器MPV, 也是因为过于简洁, 所以需要配置插件做优化</p><a id="more"></a><h4 id="mpv安装">MPV安装</h4><p>官方没有提供直接的安装包, 但推荐了一系列的<a href="https://mpv.io/installation/" target="_blank" rel="noopener">第三方编译包</a>, 这里我选择Windows平台的<a href="https://sourceforge.net/projects/mpv-player-windows/files/" target="_blank" rel="noopener">安装包</a></p><p>下载后直接解压到一个喜欢的目录, 运行目录下的<code>installer</code>文件下中<code>mpv-install.bat</code> 文件可将mpv注册到注册表</p><p>最后将mpv设置成默认的视频播放软件</p><h4 id="mpv配置">MPV配置</h4><p>在mpv安装目录下新建一个<code>portable_config</code>文件夹方便管理配置和插件, 新建配置文件<code>mpv.conf</code></p><p>这里贴一个我在网上找的<a href="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrnfoiwu5i48/b/anan/o/mpv.conf" target="_blank" rel="noopener">配置</a></p><p>快捷键这里用官方默认的, 不做修改, 可在<a href="https://mpv.io/manual/master/#keyboard-control" target="_blank" rel="noopener">官网文档</a>查看</p><h4 id="插件配置">插件配置</h4><p>官方记录了很多第三方插件, 如果有需要可以去<a href="https://github.com/mpv-player/mpv/wiki/User-Scripts" target="_blank" rel="noopener">查看</a></p><p>这里我的需求有两个, 一个是可以选择播放列表, 一个是可以查看播放历史</p><p>播放列表使用的插件是<a href="https://github.com/jonniek/mpv-playlistmanager" target="_blank" rel="noopener">playlistmanager</a>, 只需下载其中的<code>playlistmanager.conf</code>, <code>playlistmanager.lua</code> 分别放入<code>portable_config</code>中的<code>script-opts</code>文件夹和<code>scripts</code>文件夹</p><blockquote><p>这里默认的配置字体有点大, 可以修改style_ass_tags配置项调整大小</p></blockquote><p>播放历史使用的插件是<a href="https://github.com/hacel/mpv-scripts" target="_blank" rel="noopener">recent</a>, 只需下载其中的<code>recent.lua</code>放入<code>scripts</code>文件夹即可</p><h4 id="播放文件夹">播放文件夹</h4><p>很多时候都需要按照文件夹来播放, 自动生成播放列表, 配合播放列表插件使用</p><p>这里提供一个注册表<a href="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrnfoiwu5i48/b/anan/o/mpv.reg" target="_blank" rel="noopener">配置</a>, 修改为自己的mpv安装路径, 运行即可</p>]]></content:encoded>
      
      <comments>http://blog.xhyh.best/tutorial/mpv-config/#disqus_thread</comments>
    </item>
    
    <item>
      <title>汇编入门-汇编指令详解</title>
      <link>http://blog.xhyh.best/study/assembly-instructions/</link>
      <guid>http://blog.xhyh.best/study/assembly-instructions/</guid>
      <pubDate>Sun, 26 Apr 2020 03:18:26 GMT</pubDate>
      <description>
      
        &lt;p&gt;最近在深入学习操作系统, 少不了和汇编代码打交道, 尽管原来对汇编指令有所了解, 但实际看到一条指令还是模凌两可. 本文对常用汇编指令进行一个总结, 同时区分几个易混的指令&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>最近在深入学习操作系统, 少不了和汇编代码打交道, 尽管原来对汇编指令有所了解, 但实际看到一条指令还是模凌两可. 本文对常用汇编指令进行一个总结, 同时区分几个易混的指令</p><a id="more"></a><h3 id="汇编格式说明">汇编格式说明</h3><p>一般来说, 在<code>Linux</code>下使用<code>GCC</code>生成的汇编代码会使用<code>AT&amp;T/UNIX</code>汇编语法, 而使用<code>IDA</code>, <code>pwndbg</code>, <code>gef</code>反编译出来的代码会使用<code>Intel</code>汇编语法</p><p>下面大致讲一下两者语法的不同, 后文将使用<code>AT&amp;T</code>汇编格式</p><ol type="1"><li>操作数顺序不同</li></ol><div class="sourceCode" id="cb1"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb1-1"><a href="#cb1-1"></a>Op-code src dst //<span class="pp">AT</span>&amp;T语法</span><span id="cb1-2"><a href="#cb1-2"></a>Op-code dst src //Intel语法</span></code></pre></div><ol start="2" type="1"><li>寄存器, 立即数的使用</li></ol><div class="sourceCode" id="cb2"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb2-1"><a href="#cb2-1"></a>movl  <span class="dv">$</span><span class="bn">0xff</span>,%<span class="kw">ebx</span> //<span class="pp">AT</span>&amp;T语法</span><span id="cb2-2"><a href="#cb2-2"></a><span class="bu">mov</span>   <span class="kw">ebx</span><span class="bn">,0ffh   </span>//Intel语法</span></code></pre></div><ol start="3" type="1"><li>操作数大小</li></ol><div class="sourceCode" id="cb3"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb3-1"><a href="#cb3-1"></a>movb  (%<span class="kw">rbp</span>), %<span class="kw">al</span> //<span class="pp">AT</span>&amp;T语法</span><span id="cb3-2"><a href="#cb3-2"></a><span class="bu">mov</span>   <span class="kw">al</span>, <span class="dt">byte</span> <span class="dt">ptr</span> <span class="kw">rbp</span>   //Intel语法</span></code></pre></div><blockquote><p>movb, movw, movl, movq 分别代表操作1, 2, 4, 8字节, 若仅是mov, 则根据应用是32位还是64位决定是movl还是movq</p></blockquote><ol start="4" type="1"><li>内存寻址</li></ol><div class="sourceCode" id="cb4"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb4-1"><a href="#cb4-1"></a>movl <span class="dv">-8</span>(%<span class="kw">ebp</span>, %<span class="kw">edx</span>, <span class="dv">4</span>), %<span class="kw">eax</span> //<span class="pp">AT</span>&amp;T语法</span><span id="cb4-2"><a href="#cb4-2"></a><span class="bu">mov</span>  <span class="kw">eax</span>, [%<span class="kw">ebp</span> + %<span class="kw">edx</span> * <span class="dv">4</span> - 8h] //Intel语法</span></code></pre></div><h3 id="常见指令">常见指令</h3><h4 id="mov指令">mov指令</h4><p>mov作为最常用的指令, 用法非常灵活</p><p>语法</p><div class="sourceCode" id="cb5"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb5-1"><a href="#cb5-1"></a><span class="bu">mov</span> &lt;reg&gt;, &lt;reg&gt; // 寄存器的值到寄存器的值</span><span id="cb5-2"><a href="#cb5-2"></a><span class="bu">mov</span> &lt;reg&gt;, &lt;mem&gt; // 寄存器的值到寄存器指针指向的内存(通过加括号的方式)</span><span id="cb5-3"><a href="#cb5-3"></a><span class="bu">mov</span> &lt;mem&gt;, &lt;reg&gt; // 内存到寄存器</span><span id="cb5-4"><a href="#cb5-4"></a><span class="bu">mov</span> &lt;imm&gt;, &lt;reg&gt; // 立即数到寄存器(立即数前要加<span class="dv">$</span>)</span><span id="cb5-5"><a href="#cb5-5"></a><span class="bu">mov</span> &lt;imm&gt;, &lt;mem&gt; // 立即数到内存</span></code></pre></div><blockquote><p>内存寻址方式可采用disp(base, index, scale)的方式, 对表达式整体计算的值作为内存地址 如mov -8(%ebp, %edx, 4), %eax 表示加载 *(ebp + (edx * 4) - 8) 到 eax寄存器</p></blockquote><h4 id="push-pop指令">push / pop指令</h4><p>push可以理解为在mov到esp内存的同时使<code>esp</code>减小(高地址到低地址扩展) pop 可以理解为在mov到esp内存的同时的同时使<code>esp</code>增加</p><p>语法</p><div class="sourceCode" id="cb6"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb6-1"><a href="#cb6-1"></a><span class="bu">push</span> &lt;reg&gt;</span><span id="cb6-2"><a href="#cb6-2"></a><span class="bu">push</span> &lt;mem&gt;</span><span id="cb6-3"><a href="#cb6-3"></a><span class="bu">push</span> &lt;imm&gt;</span></code></pre></div><blockquote><p>在64位里push操作8字节的数, 32位只能操作4子节的数</p></blockquote><h4 id="lea-指令">lea 指令</h4><p>lea 可以将内存操作数放入寄存器中 lea 虽然用法单一, 但十分灵活, 常用来代替乘法和加法指令</p><p>语法</p><div class="sourceCode" id="cb7"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb7-1"><a href="#cb7-1"></a><span class="bu">lea</span> &lt;mem&gt;, &lt;reg&gt; </span></code></pre></div><blockquote><p>这里的mem并不是真的取内存中的值, 而是操作数本身 如lea -8(%ebp, %edx, 4), %eax 表示加载 ebp + (edx * 4) - 8 的值到 eax寄存器</p></blockquote><h4 id="add-sub-指令">add / sub 指令</h4><p>这两个指令比较简单, 就是做加法和减法, 将操作结果存在目的操作数中</p><p>语法</p><div class="sourceCode" id="cb8"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb8-1"><a href="#cb8-1"></a><span class="bu">add</span> &lt;reg&gt;, &lt;reg&gt;</span><span id="cb8-2"><a href="#cb8-2"></a><span class="bu">add</span> &lt;mem&gt;, &lt;reg&gt;</span><span id="cb8-3"><a href="#cb8-3"></a><span class="bu">add</span> &lt;reg&gt;, &lt;mem&gt;</span><span id="cb8-4"><a href="#cb8-4"></a><span class="bu">add</span> &lt;imm&gt;, &lt;reg&gt;</span><span id="cb8-5"><a href="#cb8-5"></a><span class="bu">add</span> &lt;imm&gt;, &lt;mem&gt;</span></code></pre></div><h4 id="inc-dec-指令">inc / dec 指令</h4><p>基本和add / sub一致, 但只能加减1</p><p>语法</p><div class="sourceCode" id="cb9"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb9-1"><a href="#cb9-1"></a><span class="bu">inc</span> &lt;reg&gt;</span><span id="cb9-2"><a href="#cb9-2"></a><span class="bu">inc</span> &lt;mem&gt;</span></code></pre></div><h4 id="imul-指令">imul 指令</h4><p>乘法指令, 可以有两个操作数或三个操作数, 第三个操作数必须为寄存器</p><p>语法</p><div class="sourceCode" id="cb10"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb10-1"><a href="#cb10-1"></a><span class="bu">imul</span> &lt;reg32&gt;, &lt;reg32&gt;</span><span id="cb10-2"><a href="#cb10-2"></a><span class="bu">imul</span> &lt;mem&gt;, &lt;reg32&gt;</span><span id="cb10-3"><a href="#cb10-3"></a><span class="bu">imul</span> &lt;imm&gt;, &lt;reg32&gt;, &lt;reg32&gt;</span><span id="cb10-4"><a href="#cb10-4"></a><span class="bu">imul</span> &lt;imm&gt;, &lt;mem&gt;, &lt;reg32&gt;</span></code></pre></div><h4 id="idiv-指令">idiv 指令</h4><p>除法指令, 需要把被除数放入eax寄存器中, 得到商在eax中, 余数在edx中</p><p>语法</p><div class="sourceCode" id="cb11"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb11-1"><a href="#cb11-1"></a><span class="bu">idiv</span> &lt;reg&gt;</span><span id="cb11-2"><a href="#cb11-2"></a><span class="bu">idiv</span> &lt;mem&gt;</span></code></pre></div><h4 id="and-or-xor-指令">and / or / xor 指令</h4><p>做与, 或, 异或运算</p><p>语法</p><div class="sourceCode" id="cb12"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb12-1"><a href="#cb12-1"></a><span class="bu">and</span> &lt;reg&gt;, &lt;reg&gt;</span><span id="cb12-2"><a href="#cb12-2"></a><span class="bu">and</span> &lt;mem&gt;, &lt;reg&gt;</span><span id="cb12-3"><a href="#cb12-3"></a><span class="bu">and</span> &lt;reg&gt;, &lt;mem&gt;</span><span id="cb12-4"><a href="#cb12-4"></a><span class="bu">and</span> &lt;imm&gt;, &lt;reg&gt;</span><span id="cb12-5"><a href="#cb12-5"></a><span class="bu">and</span> &lt;imm&gt;, &lt;mem&gt;</span></code></pre></div><blockquote><p>常使用xor %edx, %edx 将寄存器置0</p></blockquote><h4 id="not-neg-指令">not / neg 指令</h4><p>not 按位取反, neg 按补码取负</p><p>语法</p><div class="sourceCode" id="cb13"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb13-1"><a href="#cb13-1"></a><span class="bu">not</span> &lt;reg&gt;</span><span id="cb13-2"><a href="#cb13-2"></a><span class="bu">not</span> &lt;mem&gt;</span></code></pre></div><h4 id="shl-shr-sal-sar指令">shl / shr / sal / sar指令</h4><p>逻辑左移/逻辑右移/算数左移/算数右移操作</p><p>语法</p><div class="sourceCode" id="cb14"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb14-1"><a href="#cb14-1"></a><span class="bu">shl</span> &lt;imm&gt;, &lt;reg&gt;</span><span id="cb14-2"><a href="#cb14-2"></a><span class="bu">shl</span> &lt;imm&gt;, &lt;mem&gt;</span><span id="cb14-3"><a href="#cb14-3"></a><span class="bu">shl</span> %<span class="kw">cl</span>, &lt;reg&gt;</span><span id="cb14-4"><a href="#cb14-4"></a><span class="bu">shl</span> %<span class="kw">cl</span>, &lt;mem&gt;</span></code></pre></div><h4 id="jmp-jcondition-cmp指令">jmp / jcondition /cmp指令</h4><p>跳转到某一标签, 常用语循环语句和判断语句</p><p>语法</p><div class="sourceCode" id="cb15"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb15-1"><a href="#cb15-1"></a><span class="bu">jmp</span> &lt;<span class="pp">label</span>&gt;</span><span id="cb15-2"><a href="#cb15-2"></a></span><span id="cb15-3"><a href="#cb15-3"></a><span class="bu">cmp</span> &lt;reg&gt;, &lt;reg&gt;</span><span id="cb15-4"><a href="#cb15-4"></a><span class="bu">cmp</span> &lt;mem&gt;, &lt;reg&gt;</span><span id="cb15-5"><a href="#cb15-5"></a><span class="bu">cmp</span> &lt;reg&gt;, &lt;mem&gt;</span><span id="cb15-6"><a href="#cb15-6"></a><span class="bu">cmp</span> &lt;imm&gt;, &lt;reg&gt;</span><span id="cb15-7"><a href="#cb15-7"></a></span><span id="cb15-8"><a href="#cb15-8"></a><span class="bu">je</span>  &lt;<span class="pp">label</span>&gt; // 等于时跳转</span><span id="cb15-9"><a href="#cb15-9"></a><span class="bu">jne</span> &lt;<span class="pp">label</span>&gt; // 不等时跳转</span><span id="cb15-10"><a href="#cb15-10"></a><span class="bu">jz</span>  &lt;<span class="pp">label</span>&gt; // cmp将两数相减, 为0时跳转</span><span id="cb15-11"><a href="#cb15-11"></a><span class="bu">jg</span>  &lt;<span class="pp">label</span>&gt; // 大于时跳转</span><span id="cb15-12"><a href="#cb15-12"></a><span class="bu">jge</span> &lt;<span class="pp">label</span>&gt; // 大于等于跳转</span><span id="cb15-13"><a href="#cb15-13"></a><span class="bu">jl</span>  &lt;<span class="pp">label</span>&gt; // 小于时跳转</span><span id="cb15-14"><a href="#cb15-14"></a><span class="bu">jle</span> &lt;<span class="pp">label</span>&gt; // 小于等于跳转</span></code></pre></div><h4 id="call-ret-指令">call / ret 指令</h4><p>函数调用及函数返回</p><p>语法</p><div class="sourceCode" id="cb16"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb16-1"><a href="#cb16-1"></a><span class="bu">call</span> &lt;<span class="pp">label</span>&gt;</span><span id="cb16-2"><a href="#cb16-2"></a></span><span id="cb16-3"><a href="#cb16-3"></a><span class="bu">ret</span></span></code></pre></div><h3 id="常见问题">常见问题</h3><h4 id="mov-和-lea-指令的区别">mov 和 lea 指令的区别?</h4><p>在简单操作上两者可以等价</p><div class="sourceCode" id="cb17"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb17-1"><a href="#cb17-1"></a><span class="bu">mov</span> %<span class="kw">eax</span>, %<span class="kw">ebx</span></span><span id="cb17-2"><a href="#cb17-2"></a></span><span id="cb17-3"><a href="#cb17-3"></a><span class="bu">lea</span> (%<span class="kw">eax</span>), %<span class="kw">ebx</span></span></code></pre></div><p>若mov使用了内存寻址, 则mov会取到对应地址的值, 而lea仅操作地址</p><div class="sourceCode" id="cb18"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb18-1"><a href="#cb18-1"></a><span class="bu">mov</span> <span class="dv">-8</span>(%<span class="kw">ebp</span>, %<span class="kw">edx</span>, <span class="dv">4</span>), %<span class="kw">eax</span></span><span id="cb18-2"><a href="#cb18-2"></a></span><span id="cb18-3"><a href="#cb18-3"></a><span class="bu">lea</span> <span class="dv">-8</span>(%<span class="kw">ebp</span>, %<span class="kw">edx</span>, <span class="dv">4</span>), %<span class="kw">eax</span></span></code></pre></div><p>在这种情况下, mov便无法替代lea</p><h4 id="i为什么不是原子操作">i++为什么不是原子操作?</h4><p>尽管add/inc可以直接对内存进行操作, 但实际情况下会先从内存加载到寄存器中, 再对寄存器进行加操作</p>]]></content:encoded>
      
      <comments>http://blog.xhyh.best/study/assembly-instructions/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows下使用wsl2打造极致开发环境</title>
      <link>http://blog.xhyh.best/tutorial/windows-wsl2-env/</link>
      <guid>http://blog.xhyh.best/tutorial/windows-wsl2-env/</guid>
      <pubDate>Tue, 14 Apr 2020 01:09:44 GMT</pubDate>
      <description>
      
        &lt;p&gt;自Windows Terminal发布后一直用得很爽, 我也一直在关注着另一个&#39;神器&#39;wsl2的到来. Windows 2004 RTM版出来后我便立即重装了系统, 感受到了wsl2的强大. 本文的主要内容就是如何配置wsl2并解决它带来的一些问题&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>自Windows Terminal发布后一直用得很爽, 我也一直在关注着另一个'神器'wsl2的到来. Windows 2004 RTM版出来后我便立即重装了系统, 感受到了wsl2的强大. 本文的主要内容就是如何配置wsl2并解决它带来的一些问题</p><a id="more"></a><h4 id="为什么需要wsl2">为什么需要wsl2</h4><p>如果你是一个开发人员, 一定有以下几个痛点</p><ol type="1"><li>安装软件麻烦, c++应该下哪个? python应该下哪个? vscode对应的配置怎么配?</li><li>残缺的<code>Git bash</code>, <code>wget</code> 命令去哪了? <code>md5sum</code>在哪?</li><li>巨慢的<code>git clone</code>, ssh怎么不走代理啊? 怎么配置?</li><li>乱码问题, 我使用<code>UTF-8</code>编码, 怎么运行到命令行就乱码?</li></ol><p><code>Windows</code>下还有很多问题就不一一列举了</p><h4 id="wsl2能解决的问题">wsl2能解决的问题</h4><ol type="1"><li>真实<code>Linux</code>内核, 带来了完整的<code>Linux</code>体验</li><li>优化后的IO速度, 读写速度快</li><li>内存回收技术, 避免占用过多内存不释放</li><li>自动挂载Windows磁盘, 无缝访问Windows文件</li></ol><h4 id="wsl2安装">wsl2安装</h4><p>具体安装请看<a href="https://docs.microsoft.com/en-us/windows/wsl/wsl2-install" target="_blank" rel="noopener">官方文档</a></p><p>大致的步骤是</p><ol type="1"><li>打开可选功能的<code>适用于Linux的Windows子系统</code>和<code>虚拟机平台</code></li><li>重启计算机</li><li>在<code>Windows Store</code>中下载<code>Linux</code>发行版, 如<code>Ubuntu</code></li><li>启动<code>Ubuntu</code>, 设置用户名, 密码(此时默认是<code>wsl</code>而不是<code>wsl2</code>)</li><li>在<code>powershell</code>中根据文档切换成<code>wsl2</code></li><li>若提示切换失败, 可能需要手动安装内核, 去<a href="https://docs.microsoft.com/en-us/windows/wsl/wsl2-kernel" target="_blank" rel="noopener">官网</a>下载安装</li></ol><h4 id="windows-terminal配置">Windows Terminal配置</h4><ol type="1"><li>主题配置 这里贴一份我自己的配置, 有需要的可以<a href="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrnfoiwu5i48/b/anan/o/settings.json" target="_blank" rel="noopener">下载</a>修改 <img src="https://pic.rmb.bdstatic.com/3a62a32f090a8aed6fb9caa0af0019eb.png" alt="windows-terminal" /></li><li>右键-在此文件夹中打开 这个功能需要添加注册表, 有需要可以<a href="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrnfoiwu5i48/b/anan/o/right.reg" target="_blank" rel="noopener">下载</a>, 运行</li></ol><h4 id="wsl2简单配置">wsl2简单配置</h4><ol type="1"><li><p>使用<code>zsh</code>作为默认<code>bash</code>(可选, 这里不做过多介绍)</p></li><li><p>当使用<code>Windows Search</code> 打开<code>Windows Terminal</code>时, 默认进入用户目录<code>~</code></p><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">if [[</span> <span class="st">&quot;</span><span class="va">$(</span><span class="bu">pwd</span><span class="va">)</span><span class="st">&quot;</span> <span class="ot">==</span> *<span class="st">&quot;Windows&quot;</span>*<span class="kw"> ]]</span> ; <span class="kw">then</span></span><span id="cb1-2"><a href="#cb1-2"></a>    <span class="bu">cd</span> ~</span><span id="cb1-3"><a href="#cb1-3"></a><span class="kw">fi</span></span></code></pre></div><blockquote><p>由于我使用了oh-my-zsh, 每次安装会覆盖原有的.zshrc, 所以我的所有关于bash配置都写在~/.profile下, 并在.zshrc中使用source .profile加载</p></blockquote></li><li><p>配置默认使用<code>vim</code>作为可视化编辑器</p><div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1"></a><span class="bu">export</span> <span class="va">VISUAL=</span>vim</span><span id="cb2-2"><a href="#cb2-2"></a><span class="bu">export</span> <span class="va">EDITOR=</span><span class="st">&quot;</span><span class="va">$VISUAL</span><span class="st">&quot;</span></span></code></pre></div></li></ol><h4 id="wsl2代理设置">wsl2代理设置</h4><p><code>wsl2</code>采用的网络模式是<code>Nat</code>模式, 在<code>wsl2</code>中如果想使用<code>Windows</code>下的代理会比较麻烦, 不能直接通过<code>localhost</code>访问</p><blockquote><p>但Windows却可以使用localhost访问wsl2中的服务, 很便于程序的调试</p></blockquote><p>首先需要安装<code>proxychains4</code></p><div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1"></a><span class="fu">sudo</span> apt install proxychains4</span></code></pre></div><p>复制一份配置文件到用户目录</p><div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1"></a><span class="fu">sudo</span> cp /etc/proxychains4.conf ~/.proxychains.conf</span></code></pre></div><p>配置bash设置(.profile中)</p><div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1"></a><span class="co"># 找到windows ip</span></span><span id="cb5-2"><a href="#cb5-2"></a><span class="bu">export</span> <span class="va">WIN_IP=</span><span class="kw">`</span><span class="fu">cat</span> /etc/resolv.conf <span class="kw">|</span> <span class="fu">grep</span> nameserver <span class="kw">|</span> <span class="fu">awk</span> <span class="st">&#39;{print $2}&#39;</span><span class="kw">`</span></span><span id="cb5-3"><a href="#cb5-3"></a><span class="co"># 删除原有socks5配置</span></span><span id="cb5-4"><a href="#cb5-4"></a><span class="fu">sed</span> -i <span class="st">&#39;/socks5/d&#39;</span> ~/.proxychains.conf</span><span id="cb5-5"><a href="#cb5-5"></a><span class="co"># 添加新的socks5配置</span></span><span id="cb5-6"><a href="#cb5-6"></a><span class="fu">sed</span> -i <span class="st">&#39;$a socks5 &#39;</span><span class="va">${WIN_IP}</span><span class="st">&#39; 7891&#39;</span> ~/.proxychains.conf</span><span id="cb5-7"><a href="#cb5-7"></a><span class="bu">alias</span> pc=<span class="st">&#39;proxychains4 -q -f ~/.proxychains.conf&#39;</span></span></code></pre></div><p>这样每次启动都会寻找正确的ip地址, 并设置好给<code>proxychains4</code></p><h4 id="vscode设置">vscode设置</h4><p>还是由于网络问题, <code>remote server</code>继承了主<code>vscode</code>的配置, 代理会默认被设为<code>127.0.0.1:7890</code>, 会出现无法下载插件, 或无法使用插件等问题</p><p>经过测试, 即使在<code>wsl2</code>设置了<code>http_proxy</code>环境变量也没办法生效(主配置已检测到代理), 需要手动设置才能生效 <img src="https://pic.rmb.bdstatic.com/ff4e30a30dd6be1ee200ef58054b83e9.png" alt="vscode-config" /></p><h4 id="其他配置">其他配置</h4><p>大多数软件都能使用<code>wsl2</code>替代, 如<code>git</code>, <code>c++</code>, <code>python</code>, <code>golang</code>等</p><p>但还是有些依赖图形化的软件只能在<code>Windows</code>下运行, 如<code>IDEA</code>, <code>Android Studio</code>等</p><p>这些软件也依赖于<code>git</code>, 但又不想在<code>Windows</code>又装一个重量级的<code>git bash</code>, 于是我找到两种解决方案, 一种是<code>git</code>映射到<code>wsl2</code>中的<code>git</code>, 第二种是额外下载一个轻量级的<code>git</code>--<a href="https://github.com/git-for-windows/git/releases" target="_blank" rel="noopener">MinGit</a></p><p>这里推荐第二种方法, 简单, 最小只有20M左右, 而且无需安装</p><h4 id="坑">坑</h4><p><code>wsl2</code>唯一的缺点是无法自动缩进磁盘空间, 当突然下载大文件后又删除后, 虚拟机占用空间并不会减少, 只会持续扩张. 目前解决办法是磁盘分区, 后续官网应该有更好的解决方法</p><h4 id="总结">总结</h4><p>总得来说, <code>wsl2</code>的体验很不错, 有种在<code>Linux</code>中使用<code>Windows</code>的感觉, 既可以享受<code>Windows</code>众多图形化软件带来的优势, 也可以方便快捷使用<code>Linux</code>做程序开发, 这点就比原生<code>Linux</code>强很多了, 和<code>mac</code>的差距也没那么大了</p>]]></content:encoded>
      
      <comments>http://blog.xhyh.best/tutorial/windows-wsl2-env/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo主题开发和修改-实践篇</title>
      <link>http://blog.xhyh.best/tutorial/hexo-theme-dev/</link>
      <guid>http://blog.xhyh.best/tutorial/hexo-theme-dev/</guid>
      <pubDate>Mon, 13 Apr 2020 00:32:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;https://blog.xhyh.best/tutorial/hexo-theme-theory/&quot;&gt;上一篇&lt;/a&gt;中, 我们了解了Hexo主题的目录结构和基本的语法知识, 本文主要针对&lt;code&gt;apollo&lt;/code&gt;主题进行开发和修改&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><a href="https://blog.xhyh.best/tutorial/hexo-theme-theory/">上一篇</a>中, 我们了解了Hexo主题的目录结构和基本的语法知识, 本文主要针对<code>apollo</code>主题进行开发和修改</p><a id="more"></a><h3 id="布局修改">布局修改</h3><h4 id="部分部局">部分部局</h4><p>为了使布局能够复用, 所以将一个页面拆分成多个模块</p><p><code>head</code> 网页的头部信息, 变量可通过Hexo中配置文件<code>config.xxx</code>获取</p><p><code>nav</code> 导航栏信息, 可通过遍历主题配置<code>each value, key in theme.menu</code>获取</p><p><code>layout</code> 基布局, 包含多个<code>block</code>可以被覆盖</p><p><code>comment</code> 评论布局, 包括了所有支持的评论插件</p><p><code>copyright</code> 底部布局</p><p><code>scripts</code> 页面所需的js</p><h4 id="博客页面">博客页面</h4><p>主页: 继承至<code>layout</code>布局, 包含三大部分</p><pre class="pug"><code>extends partial/layoutblock container    include mixins/post    +posts()block pagination    include mixins/paginator    +home()block copyright    include partial/copyright</code></pre><p>其中<code>posts()</code>是混入的函数</p><pre class="pug"><code>mixin posts()    ul.home.post-list        - page.posts.each(function (item) {            li.post-list-item                article.post-block                    h2.post-title                        a.post-title-link(href= url_for(item.path))                            != item.title                    +postInfo(item)                    .post-content                        != item.excerpt                    a.read-more(href= url_for(item.path))!= __(&#39;more&#39;)        - })mixin postInfo(item)    .post-info        != full_date(item.date, &#39;ll&#39;)        if (item.tags &amp;&amp; (is_home() || is_post()))             for tag in item.tags.toArray()                a.tag-title(href=url_for(tag.path))                    != &#39;#&#39; + tag.name        </code></pre><blockquote><p>如果想修改, 比如给文章加上tag, 就可以自行在<code>postInfo</code>函数中加入对应的标签</p></blockquote><p>文章页: 和<code>index</code>页面基本一样, 但多了标题和描述block的覆盖</p><pre class="pug"><code>extends partial/layoutblock site_title    != page.title + &quot; · &quot; + config.titleblock description    - var desc = page.desc || page.title + &#39; - &#39; + config.author;    meta(name=&quot;description&quot;, content=desc)block container    include mixins/post    +post(page)block pagination    include mixins/paginator    +post()    include partial/commentblock copyright    include partial/copyright</code></pre><p>自定义页面: 需要在<code>block container</code>中判断页面类型实现不同的内容</p><pre class="pug"><code>extends partial/layoutblock container    if page.type === &#39;category&#39;      .category            h2.title               != page.title          != list_categories()    else if page.type === &#39;friends&#39;      .flink        if site.data.link           ...block pagination    include mixins/paginator    +home()block copyright    include partial/copyright</code></pre><blockquote><p>我这里使用<code>page.type</code>判断页面类型, 这样需要在对应页面<code>index.md</code>中添加<code>type</code>变量</p></blockquote><h3 id="样式修改">样式修改</h3><h4 id="根样式">根样式</h4><p>定义一个根样式, <code>gulp</code>只编译这个文件, 更方便管理, 其他样式通过<code>@import</code>引入</p><pre class="scss"><code>@charset &quot;utf-8&quot;;@import &quot;_partial/normalize&quot;;@import &quot;_partial/base&quot;;@import &quot;_partial/header&quot;;@import url(&#39;https://fonts.googleapis.com/css?family=Open+Sans&amp;display=swap&#39;);</code></pre><h4 id="部分样式">部分样式</h4><p>根据每个部分布局定义部分样式, 再在根样式中引入</p><p>在命令行中运行<code>gulp</code>命令即可监控样式的更改, 实时编译</p><blockquote><p>在chrome中, 右键-检查想修改的部分, 可快速定位css信息和debug</p></blockquote><h3 id="配置修改">配置修改</h3><p>可根据自身需求在<code>_config</code>文件中进行修改, 可以新增<code>menu</code>菜单或新增变量</p>]]></content:encoded>
      
      <comments>http://blog.xhyh.best/tutorial/hexo-theme-dev/#disqus_thread</comments>
    </item>
    
    <item>
      <title>记一次阿里云被攻击</title>
      <link>http://blog.xhyh.best/other/aliyun-hacked/</link>
      <guid>http://blog.xhyh.best/other/aliyun-hacked/</guid>
      <pubDate>Sun, 12 Apr 2020 02:46:23 GMT</pubDate>
      <description>
      
        &lt;p&gt;之前申请了免费的阿里云学生机, 部署了服务后就没管了, 前几天阿里云连续两天发来了安全警告邮件, 登上管理页一看, 还真的被hack了...&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>之前申请了免费的阿里云学生机, 部署了服务后就没管了, 前几天阿里云连续两天发来了安全警告邮件, 登上管理页一看, 还真的被hack了...</p><a id="more"></a><h4 id="事情开端">事情开端</h4><p>收到第一封阿里发的邮件 <img src="https://pic.rmb.bdstatic.com/bf8743473cee025d4c2bdc9523a93e5f.png" alt="mail-1" /> 当时在电脑右下角弹出来了, 我正好在忙其他的, 想了想我服务器上也没跑什么不安全的东西, 也许又是某个库(如<code>fastjson</code>)爆出的高危漏洞, 就没管它了</p><blockquote><p>现在重看发现上面写的内容是<strong>挖矿程序</strong>, 当时如果看到了应该会立即处理吧</p></blockquote><p>第二天收到第二封阿里发的邮件 <img src="https://pic.rmb.bdstatic.com/f9518a806696c111e4253d67b9fd65ae.png" alt="mail-2" /> 这天不忙, 点进去看了, 觉得很奇怪, 怎么变成了我<strong>对外攻击</strong>了啊?</p><p>于是便打开阿里云控制台查看情况</p><h4 id="情况分析">情况分析</h4><figure><img src="https://pic.rmb.bdstatic.com/eaa8ce2a19586e83a0d76fca536d2cb7.png" alt="" /><figcaption>alert-1</figcaption></figure><figure><img src="https://pic.rmb.bdstatic.com/81adc00297cf1dae3a7d81d09458f259.png" alt="" /><figcaption>alert-2</figcaption></figure><p>打开控制台后便看到了这两条警告</p><p>第一条是显示被植入了挖矿程序</p><p>第二条是显示在疯狂和外网IP通讯</p><p>然后去<a href="https://github.com/docker-library/redis/issues/217" target="_blank" rel="noopener">网上</a>查了一下, 这个挖矿程序在<code>redis docker</code>中十分盛行, 当然不是镜像的锅, 而是创建<code>redis</code>时没有设密码, 而<code>redis</code>本身防护做得不好, 导致可以任意的文件读写, 造成了被黑客攻击, 植入程序</p><p>其实我在很早就知道无密码的<code>redis</code>有很大的安全风险, 原来用腾讯云部署应用时, 为了方便就没给<code>redis</code>上密码, 后来发现<code>redis</code>服务隔一天左右就会自动停止服务, 去查了一下发现是被攻击了, 后面自己使用<code>redis</code>都会上密码</p><blockquote><p>给这次开redis服务的同学一个教训了</p></blockquote><h4 id="损失">损失</h4><p>分析完原因后想马上登陆服务器关掉<code>redis</code>, 然后一直连接不上, 估计是cpu跑到了100%</p><p>迫不得已只能重启服务器(幸好redis没开--restart always)</p><p>然而, 登陆发现<code>mysql</code>里面的数据全没了!!</p><p>我这才意识到, 每次新建<code>mysql</code>的时候, 我都偷懒没做文件映射, 也没对数据做定期备份</p><h4 id="教训">教训</h4><ol type="1"><li><p>不要忽视任何一封安全邮件</p></li><li><p>开<code>redis</code>设密码</p><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1"></a><span class="co"># 在容器执行redis-server启动命令，并打开redis持久化</span></span><span id="cb1-2"><a href="#cb1-2"></a><span class="ex">docker</span> run -d --name redis \</span><span id="cb1-3"><a href="#cb1-3"></a>              -p 6378:6379 <span class="dt">\ </span></span><span id="cb1-4"><a href="#cb1-4"></a>              <span class="ex">redis</span>:latest \</span><span id="cb1-5"><a href="#cb1-5"></a>              redis-server --appendonly yes --requirepass <span class="st">&quot;your_pass&quot;</span></span></code></pre></div></li><li><p>开<code>mysql</code>文件映射</p><div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1"></a><span class="ex">docker</span> run --name=mysql \</span><span id="cb2-2"><a href="#cb2-2"></a>            -v ~/docker/mysql/data:/var/lib/mysql \</span><span id="cb2-3"><a href="#cb2-3"></a>            -e MYSQL_ROOT_HOST=% -p 3306:3306 \</span><span id="cb2-4"><a href="#cb2-4"></a>            -d mysql/mysql-server</span><span id="cb2-5"><a href="#cb2-5"></a></span><span id="cb2-6"><a href="#cb2-6"></a><span class="co"># 查看密码</span></span><span id="cb2-7"><a href="#cb2-7"></a><span class="ex">docker</span> logs mysql1 <span class="op">2&gt;&amp;1</span> <span class="kw">|</span> <span class="fu">grep</span> GENERATED</span><span id="cb2-8"><a href="#cb2-8"></a><span class="co"># 进入容器</span></span><span id="cb2-9"><a href="#cb2-9"></a><span class="ex">docker</span> exec -it mysql mysql -uroot -p</span><span id="cb2-10"><a href="#cb2-10"></a><span class="co"># 修改密码</span></span><span id="cb2-11"><a href="#cb2-11"></a><span class="ex">ALTER</span> USER <span class="st">&#39;root&#39;</span>@<span class="st">&#39;localhost&#39;</span> IDENTIFIED BY <span class="st">&#39;password&#39;</span><span class="kw">;</span></span><span id="cb2-12"><a href="#cb2-12"></a><span class="ex">ALTER</span> USER <span class="st">&#39;root&#39;</span>@<span class="st">&#39;%&#39;</span> IDENTIFIED BY <span class="st">&#39;password&#39;</span><span class="kw">;</span></span></code></pre></div></li><li><p>定时备份数据库</p></li></ol>]]></content:encoded>
      
      <comments>http://blog.xhyh.best/other/aliyun-hacked/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo主题开发和修改-理论篇</title>
      <link>http://blog.xhyh.best/tutorial/hexo-theme-theory/</link>
      <guid>http://blog.xhyh.best/tutorial/hexo-theme-theory/</guid>
      <pubDate>Sat, 11 Apr 2020 03:37:19 GMT</pubDate>
      <description>
      
        &lt;p&gt;在寻找Hexo主题时, 发现了一款极其简洁的主题&lt;a href=&quot;https://github.com/achjqz/hexo-theme-apollo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;apollo&lt;/a&gt;, 这款主题代码量不多, 视图引擎使用的是&lt;code&gt;pug&lt;/code&gt;(原名&lt;code&gt;jade&lt;/code&gt;), 本文主要讲述进行Hexo主题开发和对主题的理论部分&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>在寻找Hexo主题时, 发现了一款极其简洁的主题<a href="https://github.com/achjqz/hexo-theme-apollo" target="_blank" rel="noopener">apollo</a>, 这款主题代码量不多, 视图引擎使用的是<code>pug</code>(原名<code>jade</code>), 本文主要讲述进行Hexo主题开发和对主题的理论部分</p><a id="more"></a><h3 id="主题下载和环境配置">主题下载和环境配置</h3><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1"></a><span class="fu">git</span> clone https://github.com/achjqz/hexo-theme-apollo.git apollo</span><span id="cb1-2"><a href="#cb1-2"></a><span class="bu">cd</span> apollo</span><span id="cb1-3"><a href="#cb1-3"></a><span class="ex">npm</span> install</span><span id="cb1-4"><a href="#cb1-4"></a><span class="ex">npm</span> install --global gulp-cli</span></code></pre></div><blockquote><p>主题用到的所有依赖包都是gulp相关的, gulp可以使开发者更方便的编写css文件</p></blockquote><h3 id="主题目录结构介绍">主题目录结构介绍</h3><figure><img src="https://pic.rmb.bdstatic.com/e5d6dc0330e0dbfb33d4419d968c5a8c.png" alt="" /><figcaption>catalog</figcaption></figure><h4 id="docs文件夹">docs文件夹</h4><p>这个文件夹是自己新建的, 存放主题的配置文档说明, 可有可无</p><h4 id="languages文件夹">languages文件夹</h4><p>根据<a href="https://hexo.io/zh-cn/docs/internationalization.html" target="_blank" rel="noopener">Hexo官网</a>的说明, 在此文件夹下配置多语言文件,可以让网站以不同语言呈现</p><p>例如, 配置<code>en.yml</code>和<code>zh-Hans.yml</code>文件可以支持英语和中文</p><div class="sourceCode" id="cb2"><pre class="sourceCode yml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1"></a><span class="co"># en.yml</span></span><span id="cb2-2"><a href="#cb2-2"></a><span class="fu">more</span><span class="kw">:</span><span class="at"> ...more</span></span><span id="cb2-3"><a href="#cb2-3"></a><span class="co"># zh-Hans.yml</span></span><span id="cb2-4"><a href="#cb2-4"></a><span class="fu">more</span><span class="kw">:</span><span class="at"> ...阅读更多</span></span></code></pre></div><p>在模板中, 使用 __ 或 _p 辅助函数, 即可取得翻译后的字符串, 前者用于一般使用；而后者用于复数字符串</p><pre class="pug"><code>a.read-more(href= url_for(item.path))!= __(&#39;more&#39;)</code></pre><h4 id="layout文件夹">layout文件夹</h4><p>该文件夹存放的就是博客页面的布局文件, 根据需求, 至少存在<code>index</code>, <code>post</code>, <code>archive</code> 三个页面</p><table><thead><tr class="header"><th>模板</th><th>用途</th><th>回退</th></tr></thead><tbody><tr class="odd"><td>index</td><td>首页</td><td></td></tr><tr class="even"><td>post</td><td>文章</td><td>index</td></tr><tr class="odd"><td>page</td><td>分页</td><td>index</td></tr><tr class="even"><td>archive</td><td>归档</td><td>index</td></tr><tr class="odd"><td>category</td><td>分类归档</td><td>archive</td></tr><tr class="even"><td>tag</td><td>标签归档</td><td>archive</td></tr></tbody></table><h4 id="source文件夹">source文件夹</h4><p>该文件夹下主要存放<code>css</code>文件, <code>js</code>文件, 图片资源等</p><h4 id="config.yml文件"><code>_config.yml</code>文件</h4><p>主题配置文件, 其中定义的变量在模版中可通过<code>theme.xxx</code>获取</p><blockquote><p>Hexo博客目录下也有同样的配置文件, 可以覆盖主题中定义的变量</p></blockquote><h4 id="gulpfile.js-文件"><code>gulpfile.js</code> 文件</h4><p>执行<code>gulp</code>命令后执行的脚本, 可以将<code>scss</code>打包成<code>css</code>并监控文件变化, 后文会详细讲解</p><h3 id="布局语法和样式语法">布局语法和样式语法</h3><h4 id="pug语法了解"><code>pug</code>语法了解</h4><ol type="1"><li><p>html标签, 注意缩进</p><pre class="pug"><code>div    p Hello, world!    p Hello, pug.</code></pre></li><li><p>定义class或id</p><pre class="pug"><code>h1.title Test class titleh1#title Test id title</code></pre></li><li><p>标签属性, 存放于括号内</p><pre class="pug"><code>img#name.class1.class2(src=&quot;/test.png&quot; alt=&quot;test&quot;)</code></pre></li><li><p>包含,方便代码复用</p><pre class="pug"><code>doctype htmlhtml(lang=&#39;en&#39;)    include _partial/head.pug</code></pre></li><li><p>继承, 方便模块化编写</p><pre class="pug"><code>//- base.pughtml    head        block title    body        block content//- index.pug 使用extends继承以上模板，通过block覆盖或替换原有块blockextends base.pugblock title    title &quot;Test title&quot;block content    h1 Hello world!    block article</code></pre></li><li><p>定义变量</p><pre class="pug"><code>//- 通过`- var`定义- var intData = 100- var boolData = false- var stringData = &#39;Test&#39;//- 通过`=`引用p.int= intDatap.bool= boolDatap.stringData= stringData//- 通过`#{}`连接其他字面量p #{stringData} is so good!</code></pre></li><li><p>条件结构</p><pre class="pug"><code>if A    ...else if B    ...else     ...</code></pre></li><li><p>迭代</p><pre class="pug"><code>oleach item in [&#39;Sun&#39;, &#39;Mon&#39;, &#39;Tus&#39;, &#39;Wen&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;]    li= item</code></pre></li><li><p>Mixin 用于编写函数</p><pre class="pug"><code>//- 定义函数mixin menu-item(href, name)li    span.dot ●    a(href=href)= name//- 调用函数+menu-item(&#39;/About&#39;,&#39;About&#39;)</code></pre></li><li><p>Javascript</p><pre class="pug"><code>script(type=&#39;text/javascript&#39;).var data = &quot;Test&quot;var enable = trueif enable    console.log(data)else    console.log(&#39;nothing&#39;)</code></pre></li></ol><h4 id="scss介绍"><code>scss</code>介绍</h4><blockquote><p><code>scss</code>和<code>css</code>关系</p><p>scss 是 css的预处理器, 它的优势在于开发效率高, 对于一些样式复杂的站点, 用 scss 之类的工具生成代码比手写 css 快得多</p></blockquote><p>在这里我们通过<code>gulp</code>将<code>scss</code>转化为压缩的<code>css</code>, 即我们只用维护几个碎片的<code>scss</code>文件, 而不是直接修改<code>css</code>文件</p><h4 id="hexo的变量">Hexo的变量</h4><p>在模版中为了渲染出具体的内容需要使用Hexo中的变量</p><p>变量非常多, 建议看<a href="https://hexo.io/zh-cn/docs/variables" target="_blank" rel="noopener">官方文档</a>按需使用</p><h4 id="hexo的函数">Hexo的函数</h4><p>在模版中也可以使用Hexo提供的函数, 可进行一些判断或作为工具</p><p>函数也非常多, 建议看<a href="https://hexo.io/zh-cn/docs/helpers" target="_blank" rel="noopener">官方文档</a>按需使用</p><p></br></p><p>至此, 理论部分已经讲解完成, <a href="https://blog.xhyh.best/tutorial/hexo-theme-dev/">下一篇</a>实践篇将利用这些知识以实际例子讲述如何开发和修改主题</p>]]></content:encoded>
      
      <comments>http://blog.xhyh.best/tutorial/hexo-theme-theory/#disqus_thread</comments>
    </item>
    
    <item>
      <title>用Github Actions将Hexo博客部署到Github Page</title>
      <link>http://blog.xhyh.best/tutorial/zero-to-hexo2/</link>
      <guid>http://blog.xhyh.best/tutorial/zero-to-hexo2/</guid>
      <pubDate>Fri, 10 Apr 2020 02:43:08 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;https://blog.xhyh.best/tutorial/zero-to-hexo1/&quot;&gt;上篇博客&lt;/a&gt;中已经实现在本地预览博客, 本篇会将本地博客部署到Github Page&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><a href="https://blog.xhyh.best/tutorial/zero-to-hexo1/">上篇博客</a>中已经实现在本地预览博客, 本篇会将本地博客部署到Github Page</p><a id="more"></a><h4 id="配置github-actions">配置Github Actions</h4><p><code>Github Actions</code> 是 Github 推出的一款持续集成工具, 这里我们可以用来发布博客到<code>Github Page</code></p><ol type="1"><li><p>新建workflow文件</p><p>只有当项目中<code>.github/workflow</code>目录下存在以<code>.yml</code>结尾的配置才会触发<code>Github Actions</code></p><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1"></a><span class="bu">cd</span> Blog</span><span id="cb1-2"><a href="#cb1-2"></a><span class="fu">mkdir</span> -p .github/workflow</span><span id="cb1-3"><a href="#cb1-3"></a><span class="fu">touch</span> .github/workflow/deploy.yml </span></code></pre></div></li><li><p>配置<code>deploy.yml</code>文件</p><div class="sourceCode" id="cb2"><pre class="sourceCode yml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1"></a><span class="co"># workflow name</span></span><span id="cb2-2"><a href="#cb2-2"></a><span class="fu">name</span><span class="kw">:</span><span class="at"> Deploy To Github Pages</span></span><span id="cb2-3"><a href="#cb2-3"></a></span><span id="cb2-4"><a href="#cb2-4"></a><span class="co"># 当有 push 到仓库和外部触发的时候就运行</span></span><span id="cb2-5"><a href="#cb2-5"></a><span class="fu">on</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="at">push</span><span class="kw">,</span><span class="at"> repository_dispatch</span><span class="kw">]</span></span><span id="cb2-6"><a href="#cb2-6"></a></span><span id="cb2-7"><a href="#cb2-7"></a><span class="co"># ACCESS_TOKEN</span></span><span id="cb2-8"><a href="#cb2-8"></a><span class="fu">jobs</span><span class="kw">:</span></span><span id="cb2-9"><a href="#cb2-9"></a><span class="at">  </span><span class="fu">deploy</span><span class="kw">:</span><span class="at"> </span></span><span id="cb2-10"><a href="#cb2-10"></a><span class="at">    </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Deploy Hexo Public To Pages</span></span><span id="cb2-11"><a href="#cb2-11"></a><span class="at">    </span><span class="fu">runs-on</span><span class="kw">:</span><span class="at"> ubuntu-latest </span></span><span id="cb2-12"><a href="#cb2-12"></a><span class="at">    </span><span class="fu">env</span><span class="kw">:</span></span><span id="cb2-13"><a href="#cb2-13"></a><span class="at">      </span><span class="fu">TZ</span><span class="kw">:</span><span class="at"> Asia/Shanghai    </span></span><span id="cb2-14"><a href="#cb2-14"></a></span><span id="cb2-15"><a href="#cb2-15"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span><span id="cb2-16"><a href="#cb2-16"></a><span class="co">    # check it to your workflow can access it</span></span><span id="cb2-17"><a href="#cb2-17"></a><span class="co">    # from: https://github.com/actions/checkout</span></span><span id="cb2-18"><a href="#cb2-18"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Checkout 🛎️</span></span><span id="cb2-19"><a href="#cb2-19"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/checkout@v2</span><span class="co"> # If you&#39;re using actions/checkout@v2 you must set persist-credentials    to false in most cases for the deployment to work correctly.</span></span><span id="cb2-20"><a href="#cb2-20"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span><span id="cb2-21"><a href="#cb2-21"></a><span class="at">        </span><span class="fu">persist-credentials</span><span class="kw">:</span><span class="at"> </span><span class="ch">false</span></span><span id="cb2-22"><a href="#cb2-22"></a><span class="at">        </span><span class="fu">submodules</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span><span id="cb2-23"><a href="#cb2-23"></a></span><span id="cb2-24"><a href="#cb2-24"></a><span class="co">    # from: https://github.com/actions/setup-node  </span></span><span id="cb2-25"><a href="#cb2-25"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Setup Node.js 10.x 🔧</span></span><span id="cb2-26"><a href="#cb2-26"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/setup-node@master</span></span><span id="cb2-27"><a href="#cb2-27"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span><span id="cb2-28"><a href="#cb2-28"></a><span class="at">        </span><span class="fu">node-version</span><span class="kw">:</span><span class="at"> </span><span class="st">&quot;10.x&quot;</span></span><span id="cb2-29"><a href="#cb2-29"></a></span><span id="cb2-30"><a href="#cb2-30"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Install pandoc 🔧</span></span><span id="cb2-31"><a href="#cb2-31"></a><span class="fu">      run</span><span class="kw">: </span><span class="ch">|</span></span><span id="cb2-32"><a href="#cb2-32"></a>        curl -s https://api.github.com/repos/jgm/pandoc/releases/latest | grep &quot;browser_download_url.   *deb&quot; | cut -d &#39;&quot;&#39; -f 4 | wget -qi -</span><span id="cb2-33"><a href="#cb2-33"></a>        sudo dpkg -i *.deb</span><span id="cb2-34"><a href="#cb2-34"></a></span><span id="cb2-35"><a href="#cb2-35"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Setup Hexo Dependencies 🔧</span></span><span id="cb2-36"><a href="#cb2-36"></a><span class="fu">      run</span><span class="kw">: </span><span class="ch">|</span></span><span id="cb2-37"><a href="#cb2-37"></a>        npm install hexo-cli -g</span><span id="cb2-38"><a href="#cb2-38"></a>        npm install</span><span id="cb2-39"><a href="#cb2-39"></a>        npm run build</span><span id="cb2-40"><a href="#cb2-40"></a></span><span id="cb2-41"><a href="#cb2-41"></a><span class="co">    # from https://github.com/marketplace/actions/deploy-to-github-pages   </span></span><span id="cb2-42"><a href="#cb2-42"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Deploy 🚀</span></span><span id="cb2-43"><a href="#cb2-43"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> JamesIves/github-pages-deploy-action@releases/v3</span></span><span id="cb2-44"><a href="#cb2-44"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span><span id="cb2-45"><a href="#cb2-45"></a><span class="fu">        ACCESS_TOKEN</span><span class="kw">: </span><span class="at">$&lt;!--￼0--</span><span class="ch">&gt;</span></span><span id="cb2-46"><a href="#cb2-46"></a><span class="at">        </span><span class="fu">BRANCH</span><span class="kw">:</span><span class="at"> gh-pages</span><span class="co"> # The branch the action should deploy to.</span></span><span id="cb2-47"><a href="#cb2-47"></a><span class="at">        </span><span class="fu">FOLDER</span><span class="kw">:</span><span class="at"> public</span><span class="co"> # The folder the action should deploy.</span></span><span id="cb2-48"><a href="#cb2-48"></a><span class="fu">        COMMIT_MESSAGE</span><span class="kw">: </span><span class="at">$&lt;!--￼1--</span><span class="ch">&gt;</span></span></code></pre></div></li><li><p>流程介绍</p><p>根据上面的配置可以看到主要分为4步</p><ul><li>Checkout 拉取你的博客, 默认拉取本项目</li><li>安装Node环境</li><li>安装Hexo依赖</li><li>部署到Github Page</li></ul><blockquote><p>由于我的博客使用<code>pandoc</code>进行渲染, 所以还多了一步安装<code>pandoc</code>环境</p></blockquote></li></ol><h4 id="生成ssh私钥">生成ssh私钥</h4><p>有了ssh私钥可以实现免密码将博客推送到Github</p><p>具体配置可以参照<a href="https://blog.xhyh.best/tutorial/linux-ssh/">Linux下的ssh配置</a>, 只用完成第一部分ssh生成</p><h4 id="生成access_secret">生成ACCESS_SECRET</h4><p>有了ACCESS_SECRET, <code>Github Actions</code> 才有权限写入仓库</p><p>可以在Github账户设置中生成一个 <img src="https://pic.rmb.bdstatic.com/3e96456f3136c30e6daee91f21d00176.png" alt="token" /></p><p>至少必须给<code>read, write repo</code>的权限</p><h4 id="在github上新建仓库">在Github上新建仓库</h4><ol type="1"><li>进入<a href="https://github.com/new" target="_blank" rel="noopener">新建仓库页面</a></li><li>新建一个仓库, public和private均可, 但推荐public, 否则Github Page需要另外新建一个仓库 <img src="https://pic.rmb.bdstatic.com/245f3c54feac8e15db0dae57ff18533c.png" alt="new repo" /></li><li>在项目设置中添加ACCESS_SECRET <img src="https://pic.rmb.bdstatic.com/5b364db983b09727ee07df2a9dc54a99.png" alt="secret" /></li><li>根据提示push项目</li></ol><h4 id="查看github-actions工作情况">查看<code>Github Actions</code>工作情况</h4><p>当push项目后, 在Actions选项中能看到已经自动运行部署 <img src="https://pic.rmb.bdstatic.com/8cdc7826c558371149a5198b9fd6e43c.png" alt="workflow" /></p><p>如果有报错信息, 则根据信息修改</p><h4 id="自定义域名设置">自定义域名设置</h4><p>在项目Settings中可以<a href="https://help.github.com/en/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site" target="_blank" rel="noopener">设置域名</a>并开启https <img src="https://pic.rmb.bdstatic.com/2e181936fe576fb0f0cf484f87d538ad.png" alt="setting" /></p><blockquote><p>注意若设置的是子域名, 则需要在DNS设置中加入CNAME规则, 使子域名指向<code>username.github.io</code></p></blockquote><h4 id="写作发布流程">写作发布流程</h4><p>至此, 应该能使用<code>username.github.io</code>访问你的博客了, 后续写作的流程是</p><ol type="1"><li><code>hexo new 'Hello world'</code> 生成新文章</li><li>写作</li><li><code>git add</code>, <code>git commit</code>, <code>git push</code></li><li><code>Github Actions</code> 自动部署</li></ol>]]></content:encoded>
      
      <comments>http://blog.xhyh.best/tutorial/zero-to-hexo2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello new blog</title>
      <link>http://blog.xhyh.best/talk/hello-new-blog/</link>
      <guid>http://blog.xhyh.best/talk/hello-new-blog/</guid>
      <pubDate>Wed, 08 Apr 2020 10:50:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;最近闲了下来, 计划慢慢输出一点这段时间学习的内容, 便重新打理了一下博客&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>最近闲了下来, 计划慢慢输出一点这段时间学习的内容, 便重新打理了一下博客</p><a id="more"></a><h4 id="为什么不使用老博客">为什么不使用老博客</h4><ol type="1"><li>老博客基于<code>diygod</code>主题改造, 虽尽力保持简洁了很多, 但一段时间后发现还是不利于文章阅读</li><li><code>diygod</code> 主题过于复杂, 不利于修改和维护</li><li>老博客采用源码私库备份, <code>Github page</code> 部署的策略, 但非常不利于维护, 发布文章也不方便</li></ol><h4 id="新博客的优势">新博客的优势</h4><ol type="1"><li>更加简洁的外观</li><li>基于<a href="https://github.com/achjqz/hexo-theme-apollo" target="_blank" rel="noopener">apollo</a>主题修改, 额外支持了<code>tag</code>显示和<code>category</code>界面</li><li>使用<code>Github Actions</code>持续集成, 语雀云端写作, 维护和写作更加方便</li></ol><h4 id="新博客的内容">新博客的内容</h4><ol type="1"><li>旧博客内容的整理, 升级</li><li>各种折腾的笔记</li><li>学习知识的整理输出</li><li>生活</li></ol>]]></content:encoded>
      
      <comments>http://blog.xhyh.best/talk/hello-new-blog/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Linux下ssh的配置</title>
      <link>http://blog.xhyh.best/tutorial/linux-ssh/</link>
      <guid>http://blog.xhyh.best/tutorial/linux-ssh/</guid>
      <pubDate>Fri, 28 Sep 2018 08:25:43 GMT</pubDate>
      <description>
      
        &lt;p&gt;本文带你了解ssh, 如何实现ssh免密码登陆? 如何使用ssh做端口转发, 跳板?&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>本文带你了解ssh, 如何实现ssh免密码登陆? 如何使用ssh做端口转发, 跳板?</p><a id="more"></a><h4 id="生成ssh-key">生成ssh key</h4><p>本文以Linux为例, 其他平台可参照<a href="https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" target="_blank" rel="noopener">Github官方文档</a>操作</p><ol type="1"><li><p>生成2048位的密匙 <code>passphrase</code> 可以设置为空</p><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1"></a><span class="fu">ssh-keygen</span> -t rsa -b 4096 -C <span class="st">&quot;your_email@example.com&quot;</span></span></code></pre></div></li><li><p>设置权限</p><div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1"></a><span class="co"># .ssh directory: 700 (drwx------)</span></span><span id="cb2-2"><a href="#cb2-2"></a><span class="fu">chmod</span> 700 .ssh</span><span id="cb2-3"><a href="#cb2-3"></a><span class="co"># public key (.pub file): 644 (-rw-r--r--)</span></span><span id="cb2-4"><a href="#cb2-4"></a><span class="fu">chmod</span> 644 .ssh/id_rsa.pub</span><span id="cb2-5"><a href="#cb2-5"></a><span class="co"># private key (id_rsa): 600 (-rw-------)</span></span><span id="cb2-6"><a href="#cb2-6"></a><span class="fu">chmod</span> 600 .ssh/id_rsa</span></code></pre></div></li></ol><h4 id="服务器设置">服务器设置</h4><ol type="1"><li><p>将公匙用<code>ssh-copy-id</code> 命令传给服务器,实现ssh免密码登陆</p><div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1"></a><span class="ex">ssh-copy-id</span> -i ~/.ssh/id_rsa.pub root@serverip </span></code></pre></div></li><li><p>服务器端设置<code>/etc/ssh/sshd_config</code>, 使得不能用密码登陆root用户</p><div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1"></a><span class="bu">cd</span> /etc/ssh/sshd_config</span><span id="cb4-2"><a href="#cb4-2"></a></span><span id="cb4-3"><a href="#cb4-3"></a><span class="co">#修改配置</span></span><span id="cb4-4"><a href="#cb4-4"></a><span class="ex">PermitRootLogin</span> yes</span><span id="cb4-5"><a href="#cb4-5"></a><span class="ex">PasswordAuthentication</span> no</span></code></pre></div></li><li><p>本地新建一个config文件,填入服务器信息,实现简化登陆</p><div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1"></a><span class="fu">touch</span> ~/.ssh/config</span><span id="cb5-2"><a href="#cb5-2"></a><span class="co"># config file</span></span><span id="cb5-3"><a href="#cb5-3"></a><span class="ex">Host</span> name</span><span id="cb5-4"><a href="#cb5-4"></a>  <span class="ex">Hostname</span> serverip</span><span id="cb5-5"><a href="#cb5-5"></a>  <span class="ex">User</span> root</span></code></pre></div></li><li><p>查看服务器ssh登陆日志</p><div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1"></a><span class="fu">scp</span> name:/var/log/btmp btmp</span><span id="cb6-2"><a href="#cb6-2"></a></span><span id="cb6-3"><a href="#cb6-3"></a><span class="co"># 筛选日志信息, 实现显示 次数+ IP</span></span><span id="cb6-4"><a href="#cb6-4"></a><span class="fu">lastb</span> -f btmp <span class="kw">|</span> <span class="fu">awk</span> <span class="st">&#39;{print $3}&#39;</span> <span class="kw">|</span> <span class="fu">sort</span> <span class="kw">|</span> <span class="fu">uniq</span> -c <span class="kw">|</span> <span class="fu">sort</span> -nr <span class="kw">|</span> <span class="fu">more</span></span></code></pre></div></li></ol><h4 id="ssh高级操作">ssh高级操作</h4><ol type="1"><li><p>实现端口转发,将服务器用作代理访问其他网站</p><p>命令: <code>ssh -N -f -L  \&lt;local port&gt;:\&lt;remote host&gt;:\&lt;remote port&gt; \&lt;SSH hostname&gt;</code></p><p>这样就将IP为remote host机器的remote port通过中间服务器映射到本地机器的localport</p><blockquote><p>解释:</p><p>-N 指这个连接不需要执行任何命令。仅仅做端口转发</p><p>-f 在后台运行</p><p>-L 做本地映射端口，被冒号分割的三个部分含义分别是</p><p>需要使用的本地端口号 </br> ​需要访问的目标机器IP地址 </br> 需要访问的目标机器端口 </br></p></blockquote></li><li><p>将私匙添加到ssh-agent,避免每次都要输密码</p><div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1"></a><span class="co"># start ssh-agent</span></span><span id="cb7-2"><a href="#cb7-2"></a><span class="bu">eval</span> <span class="st">&quot;</span><span class="va">$(</span><span class="fu">ssh-agent</span> -s<span class="va">)</span><span class="st">&quot;</span></span><span id="cb7-3"><a href="#cb7-3"></a><span class="op">&gt;</span> <span class="ex">Agent</span> pid 59566</span><span id="cb7-4"><a href="#cb7-4"></a></span><span id="cb7-5"><a href="#cb7-5"></a><span class="co"># add ssh key</span></span><span id="cb7-6"><a href="#cb7-6"></a><span class="fu">ssh-add</span> ~/.ssh/id_rsa</span></code></pre></div></li><li><p>跳板登陆 本地A, 跳板服务器B, 目标服务器C</p><p>首先将本地A均可以ssh登陆B和C</p><p>当连接服务器B时,使用ssh -A命令, 以打开agent forwarding</p><p>当服务器B连接服务器C时, 就不用再输密码了, 相当于这台服务器充当了转发信息的功能,把私钥操作的request转发到了本机的agent, 然后再将agent的response原路返回</p></li></ol>]]></content:encoded>
      
      <comments>http://blog.xhyh.best/tutorial/linux-ssh/#disqus_thread</comments>
    </item>
    
    <item>
      <title>零基础搭建Hexo博客</title>
      <link>http://blog.xhyh.best/tutorial/zero-to-hexo1/</link>
      <guid>http://blog.xhyh.best/tutorial/zero-to-hexo1/</guid>
      <pubDate>Sat, 14 Apr 2018 14:18:32 GMT</pubDate>
      <description>
      
        &lt;p&gt;用Hexo + Github来搭建个人博客已经很普遍了, 正好Github action发布, 可以利用持续集成使得部署更加轻松&lt;br /&gt;
本文从零开始, 搭建hexo博客并用Github Actions发布到Github Page&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>用Hexo + Github来搭建个人博客已经很普遍了, 正好Github action发布, 可以利用持续集成使得部署更加轻松<br />本文从零开始, 搭建hexo博客并用Github Actions发布到Github Page</p><a id="more"></a><h4 id="工具介绍及安装">工具介绍及安装</h4><ol type="1"><li><code>Git</code> 版本管理工具, 用于管理写的文章, 并和Github仓库建立连接, <a href="https://git-scm.com/" target="_blank" rel="noopener">官网安装</a></li><li><code>node.js</code> 为hexo提供JavaScript环境 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">官网安装</a></li><li><code>Github Pages</code> Github 官网提供的一个服务, 将博客部署到它上面, 避免自己购买服务器, 无需安装</li></ol><h4 id="hexo和主题安装">hexo和主题安装</h4><blockquote><p>hexo 和 hexo 主题的关系<br />hexo 主题定义了博客的界面布局, 颜色, 脚本等<br />hexo 将内容交给hexo 主题生成对应的排版</p></blockquote><ol type="1"><li><p>hexo 安装 <a href="https:/hexo.io/" target="_blank" rel="noopener">官方文档</a></p><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1"></a><span class="ex">npm</span> install hexo-cli -g</span></code></pre></div></li><li><p>生成默认博客</p><div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1"></a><span class="ex">hexo</span> init blog</span><span id="cb2-2"><a href="#cb2-2"></a><span class="bu">cd</span> blog</span><span id="cb2-3"><a href="#cb2-3"></a><span class="ex">npm</span> install</span></code></pre></div></li><li><p>下载主题</p><p>这里以<code>apollo</code>主题为例</p><div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1"></a><span class="ex">npm</span> install --save hexo-renderer-pug\</span><span id="cb3-2"><a href="#cb3-2"></a> hexo-generator-feed \</span><span id="cb3-3"><a href="#cb3-3"></a> hexo-generator-sitemap <span class="dt">\ </span></span><span id="cb3-4"><a href="#cb3-4"></a> <span class="ex">hexo-browsersync</span>  \</span><span id="cb3-5"><a href="#cb3-5"></a> hexo-generator-archive \</span><span id="cb3-6"><a href="#cb3-6"></a>git clone https://github.com/achjqz/hexo-theme-apollo.git themes/apollo</span></code></pre></div></li></ol><h4 id="博客配置">博客配置</h4><p>博客的配置主要都在<code>_config.yml</code>中</p><ol type="1"><li><p>主题相关配置</p><div class="sourceCode" id="cb4"><pre class="sourceCode yml"><code class="sourceCode yaml"><span id="cb4-1"><a href="#cb4-1"></a><span class="co">...</span></span><span id="cb4-2"><a href="#cb4-2"></a><span class="co"># 修改主题名称</span></span><span id="cb4-3"><a href="#cb4-3"></a><span class="co">theme: apollo</span></span><span id="cb4-4"><a href="#cb4-4"></a><span class="co">theme_config: </span></span><span id="cb4-5"><a href="#cb4-5"></a><span class="co">  # google analyse 配置</span></span><span id="cb4-6"><a href="#cb4-6"></a><span class="co">  ga: UA-117536047-1</span></span><span id="cb4-7"><a href="#cb4-7"></a><span class="co">  # 评论区配置</span></span><span id="cb4-8"><a href="#cb4-8"></a><span class="co">  gitalk:</span></span><span id="cb4-9"><a href="#cb4-9"></a><span class="co">    on: true</span></span><span id="cb4-10"><a href="#cb4-10"></a><span class="co">    owner: achjqz</span></span><span id="cb4-11"><a href="#cb4-11"></a><span class="co">    repo: blog</span></span><span id="cb4-12"><a href="#cb4-12"></a><span class="co">    admin: [&#39;achjqz&#39;]</span></span><span id="cb4-13"><a href="#cb4-13"></a><span class="co">    clientID: 1ad726ece750d0552748</span></span><span id="cb4-14"><a href="#cb4-14"></a><span class="co">    clientSecret: 6917691391883046d263b52a7107fab68e457194</span></span><span id="cb4-15"><a href="#cb4-15"></a><span class="co">...</span></span></code></pre></div></li><li><p>博客url配置</p><div class="sourceCode" id="cb5"><pre class="sourceCode yml"><code class="sourceCode yaml"><span id="cb5-1"><a href="#cb5-1"></a><span class="fu">url</span><span class="kw">:</span><span class="at"> http://blog.xhyh.best</span></span><span id="cb5-2"><a href="#cb5-2"></a><span class="fu">root</span><span class="kw">:</span><span class="at"> /</span></span><span id="cb5-3"><a href="#cb5-3"></a><span class="fu">permalink</span><span class="kw">:</span><span class="at"> :category/:urlname/</span></span><span id="cb5-4"><a href="#cb5-4"></a><span class="fu">new_post_name</span><span class="kw">:</span><span class="at"> :year:month:day-:title.md</span></span></code></pre></div><blockquote><p>为方便整理, 生成新文章会有时间前缀<br />而我们不希望在文章链接中包含时间, 这里使用了urlname, 需要在每篇文章头中添加这个变量</p></blockquote></li></ol><h4 id="常用命令">常用命令</h4><ol type="1"><li><code>hexo clean</code> 清除缓存和生成的public文件夹</li><li><code>hexo g</code> generator 生成public文件</li><li><code>hexo s</code> server 本地预览, 加参数<code>--debug</code>可查看具体信息</li><li><code>hexo d</code> deploy 部署到github</li></ol><h4 id="增加categorytag页面">增加category/tag页面</h4><p>默认并没有category, tag页面, 需要在命令行中输入命令添加</p><div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1"></a><span class="ex">hexo</span> new page category</span></code></pre></div><p></br></p><p><a href="https://blog.xhyh.best/tutorial/zero-to-hexo2/">下一篇</a>将介绍如何使用 Github Actions 部署博客</p>]]></content:encoded>
      
      <comments>http://blog.xhyh.best/tutorial/zero-to-hexo1/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
